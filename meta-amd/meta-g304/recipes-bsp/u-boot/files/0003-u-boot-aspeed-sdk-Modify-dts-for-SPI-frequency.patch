From 741ba4112ab65f6c6119a7c175cdbdd269824a1b Mon Sep 17 00:00:00 2001
Message-Id: <741ba4112ab65f6c6119a7c175cdbdd269824a1b.1683323633.git.vinu.vaghasia@amd.com>
From: Vinu Vaghasia <vinu.vaghasia@amd.com>
Date: Fri, 5 May 2023 16:41:38 -0500
Subject: [PATCH] u-boot-aspeed-sdk: Modify dts for SPI frequency and applided
 Aspeed bug fix

- SPI frequency set to 1MHz
- As per Aspeed:
   - The SPI clock frequency in the device tree is adopted from probe
     SPI flash stage instead of after timing calibration.
   - aspeed: Fix bug for lower SPI clock frequency
     When SPI clock frequency is lower than 12.5MHz, u-boot
     will hang before access SPI flash.

Signed-off-by: Vinu Vaghasia <vinu.vaghasia@amd.com>
---
 arch/arm/dts/ast2600-hawaii.dts | 12 ++++++------
 drivers/spi/aspeed_spi.c        | 15 ++++++++++++++-
 2 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/arch/arm/dts/ast2600-hawaii.dts b/arch/arm/dts/ast2600-hawaii.dts
index 0ac05e26e6..96143d1462 100644
--- a/arch/arm/dts/ast2600-hawaii.dts
+++ b/arch/arm/dts/ast2600-hawaii.dts
@@ -99,8 +99,6 @@
 };

 // FPGA and BIOS FLASH
-
-#if 0
 &spi1 {
 	status = "okay";
 	pinctrl-names = "default";
@@ -108,21 +106,22 @@

 	flash@0 {
 		status = "okay";
-		spi-max-frequency = <500000000>;
+		compatible = "spi-flash", "is,25wp256";
+		spi-max-frequency = <1000000>;
 		spi-tx-bus-width = <1>;
 		spi-rx-bus-width = <1>;
 	};

 	flash@1 {
 		status = "okay";
-		spi-max-frequency = <500000000>;
+		compatible = "spi-flash", "is,25wp256";
+		spi-max-frequency = <1000000>;
 		spi-tx-bus-width = <1>;
 		spi-rx-bus-width = <1>;
 	};


 };
-#endif

 &spi2 {
 	status = "okay";
@@ -131,7 +130,8 @@

 	flash@0 {
 		status = "okay";
-		spi-max-frequency = <10000000>;
+		compatible = "spi-flash", "is,25wp256";
+		spi-max-frequency = <1000000>;
 		spi-tx-bus-width = <1>;
 		spi-rx-bus-width = <1>;
 	};
diff --git a/drivers/spi/aspeed_spi.c b/drivers/spi/aspeed_spi.c
index f93200f8f6..66c12081a5 100644
--- a/drivers/spi/aspeed_spi.c
+++ b/drivers/spi/aspeed_spi.c
@@ -104,6 +104,7 @@ struct aspeed_spi_regs {

 #define SPI_READ_FROM_FLASH		0x00000001
 #define SPI_WRITE_TO_FLASH		0x00000002
+#define CE_CTRL_FREQ_MASK		0xf0fff0ff

 /* Auto Soft-Reset Command Control */
 #define SOFT_RST_CMD_EN     GENMASK(1, 0)
@@ -216,7 +217,7 @@ static u32 aspeed_g6_spi_hclk_divisor(struct aspeed_spi_priv *priv, u32 max_hz)
 	u32 i, j = 0;
 	u32 hclk_div_setting = 0;

-	for (j = 0; j < 0xf; i++) {
+	for (j = 0; j < 0xf; j++) {
 		for (i = 0; i < ARRAY_SIZE(hclk_masks); i++) {
 			base_div = j * 16;
 			if (max_hz >= (hclk_rate / ((i + 1) + base_div))) {
@@ -991,6 +992,8 @@ static int aspeed_spi_claim_bus(struct udevice *dev)
 	struct aspeed_spi_priv *priv = dev_get_priv(bus);
 	struct dm_spi_slave_platdata *slave_plat = dev_get_parent_platdata(dev);
 	struct aspeed_spi_flash *flash;
+	struct spi_slave *slave = dev_get_parent_priv(dev);
+	u32 read_hclk;

 	debug("%s: claim bus CS%u\n", bus->name, slave_plat->cs);

@@ -998,6 +1001,16 @@ static int aspeed_spi_claim_bus(struct udevice *dev)
 	if (!flash)
 		return -ENODEV;

+	if (priv->new_ver) {
+		if (dev_read_bool(bus, "timing-calibration-disabled")) {
+			read_hclk = aspeed_g6_spi_hclk_divisor(priv, slave->speed);
+			flash->ce_ctrl_user &= CE_CTRL_FREQ_MASK;
+			flash->ce_ctrl_user |= CE_G6_CTRL_CLOCK_FREQ(read_hclk);
+			flash->ce_ctrl_fread &= CE_CTRL_FREQ_MASK;
+			flash->ce_ctrl_fread |= CE_G6_CTRL_CLOCK_FREQ(read_hclk);
+		}
+	}
+
 	return aspeed_spi_flash_init(priv, flash, dev);
 }

--
2.17.1

