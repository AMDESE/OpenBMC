From d7a08fb6c2ae312b82a9f83c7c64a696bd1e99d8 Mon Sep 17 00:00:00 2001
From: Vinu Vaghasia <vinu.vaghasia@amd.com>
Date: Thu, 5 May 2022 16:33:55 -0500
Subject: [PATCH 1/1] phosphor-network-Add-LCD-write-for-BMC-IP

Write BMC IP Address to LCD Line 2

Signed-off-by: Mohsen Dolaty <mohsen.dolaty@amd.com>
Signed-off-by: Vinu Vaghasia <vinu.vaghasia@amd.com>
---
 ipaddress.cpp | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/ipaddress.cpp b/ipaddress.cpp
index f30cf34..f6a5936 100644
--- a/ipaddress.cpp
+++ b/ipaddress.cpp
@@ -1,3 +1,5 @@
+#include <lcdlib_common.h>
+
 #include "config.h"

 #include "ipaddress.hpp"
@@ -8,16 +10,37 @@
 #include <phosphor-logging/elog-errors.hpp>
 #include <phosphor-logging/log.hpp>
 #include <xyz/openbmc_project/Common/error.hpp>
+
 namespace phosphor
 {
 namespace network
 {
+#define LCD_MAX_CHAR  20
+#define LCD_BUFF_SIZE 2*LCD_MAX_CHAR

 using namespace phosphor::logging;
 using namespace sdbusplus::xyz::openbmc_project::Common::Error;
 using NotAllowed = sdbusplus::xyz::openbmc_project::Common::Error::NotAllowed;
 using Reason = xyz::openbmc_project::Common::NotAllowed::REASON;

+static void writeLCD(char *ip)
+{
+    int size;
+
+    if (lcdlib_open_dev() != 0 ) {
+        log<level::ERR>("writeLCD Error: Could not open LCD device\n");
+        return;
+    }
+    size = strlen(ip);
+    if((size != 0) && (size <= LCD_MAX_CHAR))
+        memset(&ip[size-1], 0x20, (LCD_MAX_CHAR-size+1)); // fill it up with space char
+    if (lcdlib_write_string(BMC_IPADDR, (unsigned char*)ip, LCD_MAX_CHAR) !=0)
+        log<level::ERR>("writeLCD Error: Could not wirte BMC IP to LCD \n");
+    if (lcdlib_close_dev() != 0 )
+        log<level::ERR>("writeLCD Error : Failed to close LCD device\n");
+    return;
+}
+
 IPAddress::IPAddress(sdbusplus::bus::bus& bus, const char* objPath,
                      EthernetInterface& parent, IP::Protocol type,
                      const std::string& ipaddress, IP::AddressOrigin origin,
@@ -25,12 +48,20 @@ IPAddress::IPAddress(sdbusplus::bus::bus& bus, const char* objPath,
     IPIfaces(bus, objPath, true),
     parent(parent)
 {
+    char ip[LCD_BUFF_SIZE];

     IP::address(ipaddress);
     IP::prefixLength(prefixLength);
     IP::gateway(gateway);
     IP::type(type);
     IP::origin(origin);
+    // LCD
+    snprintf(ip, LCD_BUFF_SIZE, "%s", address().c_str());
+    // skip IPV6 and private IP 169.254
+    if ((strstr(ip,":") == 0) && (strstr(ip,"169.254.") == 0)) {
+        snprintf(ip, LCD_BUFF_SIZE, "IP: %s \n", address().c_str());
+        writeLCD(ip);
+    }

     // Emit deferred signal.
     emit_object_added();
--
2.17.1

