From c3c4a6748f7fbd7364ecae2d26f78f487f1da3e1 Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Tue, 17 May 2022 02:22:12 -0500
Subject: [PATCH 2/2] platformization changes for sp5 platforms

Signed-off-by: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
---
 Makefile.am        |  55 +++++++++++++++++----
 configure.ac       |  74 +++++++++++++++++++++++------
 fruread.hpp        |   6 +++
 read_fru_data.cpp  |   1 -
 selutility.cpp     |   1 -
 selutility.hpp     |   6 +++
 sensorhandler.cpp  |  10 +---
 sensorhandler.hpp  |  13 +++++
 storagehandler.cpp | 116 ++++++++++++++++++++++++++++++++++++++++++++-
 9 files changed, 246 insertions(+), 36 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index fbeb379..6fff870 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -29,9 +29,18 @@ ipmid_SOURCES = \
 	host-cmd-manager.cpp

 libipmi20_BUILT_LIST = \
-	sensor-gen.cpp \
-	inventory-sensor-gen.cpp \
-	fru-read-gen.cpp
+	quartz-sensor-gen.cpp \
+	quartz-inventory-sensor-gen.cpp \
+	quartz-fru-read-gen.cpp \
+	onyx-sensor-gen.cpp \
+	onyx-inventory-sensor-gen.cpp \
+	onyx-fru-read-gen.cpp \
+	titanite-sensor-gen.cpp \
+	titanite-inventory-sensor-gen.cpp \
+	titanite-fru-read-gen.cpp \
+	ruby-sensor-gen.cpp \
+	ruby-inventory-sensor-gen.cpp \
+	ruby-fru-read-gen.cpp

 BUILT_SOURCES = \
 	$(IPMI_WHITELIST_SOURCE) \
@@ -75,14 +84,42 @@ ipmid_LDFLAGS = \
 ipmiwhitelist.cpp: ${srcdir}/generate_whitelist.sh $(WHITELIST_CONF)
 	$(SHELL) $^ > $@

-sensor-gen.cpp: scripts/writesensor.mako.cpp scripts/sensor_gen.py @SENSOR_YAML_GEN@
-	$(AM_V_GEN)@SENSORGEN@ -o $(top_builddir) generate-cpp
+onyx-sensor-gen.cpp: scripts/writesensor.mako.cpp scripts/sensor_gen.py @ONYX_SENSOR_YAML_GEN@
+	$(AM_V_GEN)@ONYX_SENSORGEN@ -o $(top_builddir) -p onyx generate-cpp

-inventory-sensor-gen.cpp: scripts/inventorysensor.mako.cpp scripts/inventory-sensor.py @INVSENSOR_YAML_GEN@
-	$(AM_V_GEN)@INVSENSORGEN@ -o $(top_builddir) generate-cpp
+onyx-inventory-sensor-gen.cpp: scripts/inventorysensor.mako.cpp scripts/inventory-sensor.py @ONYX_INVSENSOR_YAML_GEN@
+	$(AM_V_GEN)@ONYX_INVSENSORGEN@ -o $(top_builddir) -p onyx generate-cpp
+
+onyx-fru-read-gen.cpp: scripts/readfru.mako.cpp scripts/fru_gen.py @ONYX_FRU_YAML_GEN@
+	$(AM_V_GEN)@ONYX_FRUGEN@ -o $(top_builddir) -p onyx generate-cpp
+
+quartz-sensor-gen.cpp: scripts/writesensor.mako.cpp scripts/sensor_gen.py @QUARTZ_SENSOR_YAML_GEN@
+	$(AM_V_GEN)@QUARTZ_SENSORGEN@ -o $(top_builddir) -p quartz generate-cpp
+
+quartz-inventory-sensor-gen.cpp: scripts/inventorysensor.mako.cpp scripts/inventory-sensor.py @QUARTZ_INVSENSOR_YAML_GEN@
+	$(AM_V_GEN)@QUARTZ_INVSENSORGEN@ -o $(top_builddir) -p quartz generate-cpp
+
+quartz-fru-read-gen.cpp: scripts/readfru.mako.cpp scripts/fru_gen.py @QUARTZ_FRU_YAML_GEN@
+	$(AM_V_GEN)@QUARTZ_FRUGEN@ -o $(top_builddir) -p quartz generate-cpp
+
+ruby-sensor-gen.cpp: scripts/writesensor.mako.cpp scripts/sensor_gen.py @RUBY_SENSOR_YAML_GEN@
+	$(AM_V_GEN)@RUBY_SENSORGEN@ -o $(top_builddir) -p ruby generate-cpp
+
+ruby-inventory-sensor-gen.cpp: scripts/inventorysensor.mako.cpp scripts/inventory-sensor.py @RUBY_INVSENSOR_YAML_GEN@
+	$(AM_V_GEN)@RUBY_INVSENSORGEN@ -o $(top_builddir) -p ruby generate-cpp
+
+ruby-fru-read-gen.cpp: scripts/readfru.mako.cpp scripts/fru_gen.py @RUBY_FRU_YAML_GEN@
+	$(AM_V_GEN)@RUBY_FRUGEN@ -o $(top_builddir) -p ruby generate-cpp
+
+titanite-sensor-gen.cpp: scripts/writesensor.mako.cpp scripts/sensor_gen.py @TITANITE_SENSOR_YAML_GEN@
+	$(AM_V_GEN)@TITANITE_SENSORGEN@ -o $(top_builddir) -p titanite generate-cpp
+
+titanite-inventory-sensor-gen.cpp: scripts/inventorysensor.mako.cpp scripts/inventory-sensor.py @TITANITE_INVSENSOR_YAML_GEN@
+	$(AM_V_GEN)@TITANITE_INVSENSORGEN@ -o $(top_builddir) -p titanite generate-cpp
+
+titanite-fru-read-gen.cpp: scripts/readfru.mako.cpp scripts/fru_gen.py @TITANITE_FRU_YAML_GEN@
+	$(AM_V_GEN)@TITANITE_FRUGEN@ -o $(top_builddir) -p titanite generate-cpp

-fru-read-gen.cpp: scripts/readfru.mako.cpp scripts/fru_gen.py @FRU_YAML_GEN@
-	$(AM_V_GEN)@FRUGEN@ -o $(top_builddir) generate-cpp

 providers_LTLIBRARIES += libipmi20.la
 if FEATURE_TRANSPORT_OEM
diff --git a/configure.ac b/configure.ac
index dcf5e79..f4f2bde 100644
--- a/configure.ac
+++ b/configure.ac
@@ -125,20 +125,66 @@ if test -z "$WHITELIST_CONF"; then
         WHITELIST_CONF=${srcdir}/host-ipmid-whitelist.conf
 fi

-AS_IF([test "x$SENSOR_YAML_GEN" == "x"], [SENSOR_YAML_GEN="$srcdir/scripts/sensor-example.yaml"])
-SENSORGEN="$PYTHON ${srcdir}/scripts/sensor_gen.py -i $SENSOR_YAML_GEN"
-AC_SUBST(SENSOR_YAML_GEN)
-AC_SUBST(SENSORGEN)
-
-AS_IF([test "x$INVSENSOR_YAML_GEN" == "x"], [INVSENSOR_YAML_GEN="$srcdir/scripts/inventory-sensor-example.yaml"])
-INVSENSORGEN="$PYTHON ${srcdir}/scripts/inventory-sensor.py -i $INVSENSOR_YAML_GEN"
-AC_SUBST(INVSENSOR_YAML_GEN)
-AC_SUBST(INVSENSORGEN)
-
-AS_IF([test "x$FRU_YAML_GEN" == "x"], [FRU_YAML_GEN="$srcdir/scripts/fru-read-example.yaml"])
-FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $FRU_YAML_GEN"
-AC_SUBST(FRU_YAML_GEN)
-AC_SUBST(FRUGEN)
+AS_IF([test "x$ONYX_SENSOR_YAML_GEN" == "x"], [ONYX_SENSOR_YAML_GEN="$srcdir/scripts/sensor-example.yaml"])
+ONYX_SENSORGEN="$PYTHON ${srcdir}/scripts/sensor_gen.py -i $ONYX_SENSOR_YAML_GEN"
+AC_SUBST(ONYX_SENSOR_YAML_GEN)
+AC_SUBST(ONYX_SENSORGEN)
+
+AS_IF([test "x$ONYX_INVSENSOR_YAML_GEN" == "x"], [ONYX_INVSENSOR_YAML_GEN="$srcdir/scripts/inventory-sensor-example.yaml"])
+ONYX_INVSENSORGEN="$PYTHON ${srcdir}/scripts/inventory-sensor.py -i $ONYX_INVSENSOR_YAML_GEN"
+AC_SUBST(ONYX_INVSENSOR_YAML_GEN)
+AC_SUBST(ONYX_INVSENSORGEN)
+
+AS_IF([test "x$ONYX_FRU_YAML_GEN" == "x"], [ONYX_FRU_YAML_GEN="$srcdir/scripts/fru-read-example.yaml"])
+ONYX_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $ONYX_FRU_YAML_GEN"
+AC_SUBST(ONYX_FRU_YAML_GEN)
+AC_SUBST(ONYX_FRUGEN)
+
+AS_IF([test "x$QUARTZ_SENSOR_YAML_GEN" == "x"], [QUARTZ_SENSOR_YAML_GEN="$srcdir/scripts/sensor-example.yaml"])
+QUARTZ_SENSORGEN="$PYTHON ${srcdir}/scripts/sensor_gen.py -i $QUARTZ_SENSOR_YAML_GEN"
+AC_SUBST(QUARTZ_SENSOR_YAML_GEN)
+AC_SUBST(QUARTZ_SENSORGEN)
+
+AS_IF([test "x$QUARTZ_INVSENSOR_YAML_GEN" == "x"], [QUARTZ_INVSENSOR_YAML_GEN="$srcdir/scripts/inventory-sensor-example.yaml"])
+QUARTZ_INVSENSORGEN="$PYTHON ${srcdir}/scripts/inventory-sensor.py -i $QUARTZ_INVSENSOR_YAML_GEN"
+AC_SUBST(QUARTZ_INVSENSOR_YAML_GEN)
+AC_SUBST(QUARTZ_INVSENSORGEN)
+
+AS_IF([test "x$QUARTZ_FRU_YAML_GEN" == "x"], [QUARTZ_FRU_YAML_GEN="$srcdir/scripts/fru-read-example.yaml"])
+QUARTZ_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $QUARTZ_FRU_YAML_GEN"
+AC_SUBST(QUARTZ_FRU_YAML_GEN)
+AC_SUBST(QUARTZ_FRUGEN)
+
+AS_IF([test "x$RUBY_SENSOR_YAML_GEN" == "x"], [RUBY_SENSOR_YAML_GEN="$srcdir/scripts/sensor-example.yaml"])
+RUBY_SENSORGEN="$PYTHON ${srcdir}/scripts/sensor_gen.py -i $RUBY_SENSOR_YAML_GEN"
+AC_SUBST(RUBY_SENSOR_YAML_GEN)
+AC_SUBST(RUBY_SENSORGEN)
+
+AS_IF([test "x$RUBY_INVSENSOR_YAML_GEN" == "x"], [RUBY_INVSENSOR_YAML_GEN="$srcdir/scripts/inventory-sensor-example.yaml"])
+RUBY_INVSENSORGEN="$PYTHON ${srcdir}/scripts/inventory-sensor.py -i $RUBY_INVSENSOR_YAML_GEN"
+AC_SUBST(RUBY_INVSENSOR_YAML_GEN)
+AC_SUBST(RUBY_INVSENSORGEN)
+
+AS_IF([test "x$RUBY_FRU_YAML_GEN" == "x"], [RUBY_FRU_YAML_GEN="$srcdir/scripts/fru-read-example.yaml"])
+RUBY_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $RUBY_FRU_YAML_GEN"
+AC_SUBST(RUBY_FRU_YAML_GEN)
+AC_SUBST(RUBY_FRUGEN)
+
+AS_IF([test "x$TITANITE_SENSOR_YAML_GEN" == "x"], [TITANITE_SENSOR_YAML_GEN="$srcdir/scripts/sensor-example.yaml"])
+TITANITE_SENSORGEN="$PYTHON ${srcdir}/scripts/sensor_gen.py -i $TITANITE_SENSOR_YAML_GEN"
+AC_SUBST(TITANITE_SENSOR_YAML_GEN)
+AC_SUBST(TITANITE_SENSORGEN)
+
+AS_IF([test "x$TITANITE_INVSENSOR_YAML_GEN" == "x"], [TITANITE_INVSENSOR_YAML_GEN="$srcdir/scripts/inventory-sensor-example.yaml"])
+TITANITE_INVSENSORGEN="$PYTHON ${srcdir}/scripts/inventory-sensor.py -i $TITANITE_INVSENSOR_YAML_GEN"
+AC_SUBST(TITANITE_INVSENSOR_YAML_GEN)
+AC_SUBST(TITANITE_INVSENSORGEN)
+
+AS_IF([test "x$TITANITE_FRU_YAML_GEN" == "x"], [TITANITE_FRU_YAML_GEN="$srcdir/scripts/fru-read-example.yaml"])
+TITANITE_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $TITANITE_FRU_YAML_GEN"
+AC_SUBST(TITANITE_FRU_YAML_GEN)
+AC_SUBST(TITANITE_FRUGEN)
+

 AS_IF([test "x$ENTITY_YAML_GEN" == "x"], [ENTITY_YAML_GEN="$srcdir/scripts/entity-example.yaml"])
 ENTITYGEN="$PYTHON $srcdir/scripts/entity_gen.py -i $ENTITY_YAML_GEN"
diff --git a/fruread.hpp b/fruread.hpp
index a2fb650..c497d37 100644
--- a/fruread.hpp
+++ b/fruread.hpp
@@ -34,3 +34,9 @@ using FruInstanceVec = std::vector<FruInstance>;

 using FruId = uint32_t;
 using FruMap = std::map<FruId, FruInstanceVec>;
+
+extern FruMap frus;
+extern const FruMap quartz_frus;
+extern const FruMap titanite_frus;
+extern const FruMap onyx_frus;
+extern const FruMap ruby_frus;
diff --git a/read_fru_data.cpp b/read_fru_data.cpp
index 740a140..eace885 100644
--- a/read_fru_data.cpp
+++ b/read_fru_data.cpp
@@ -11,7 +11,6 @@
 #include <sdbusplus/message/types.hpp>
 #include <xyz/openbmc_project/Common/error.hpp>

-extern const FruMap frus;
 namespace ipmi
 {
 namespace fru
diff --git a/selutility.cpp b/selutility.cpp
index 11b2fb9..da38608 100644
--- a/selutility.cpp
+++ b/selutility.cpp
@@ -12,7 +12,6 @@
 #include <vector>
 #include <xyz/openbmc_project/Common/error.hpp>

-extern const ipmi::sensor::InvObjectIDMap invSensors;
 using namespace phosphor::logging;
 using InternalFailure =
     sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure;
diff --git a/selutility.hpp b/selutility.hpp
index 06fc453..5587b6f 100644
--- a/selutility.hpp
+++ b/selutility.hpp
@@ -5,6 +5,12 @@
 #include <ipmid/types.hpp>
 #include <sdbusplus/server.hpp>

+extern ipmi::sensor::InvObjectIDMap invSensors;
+extern const ipmi::sensor::InvObjectIDMap quartz_invSensors;
+extern const ipmi::sensor::InvObjectIDMap titanite_invSensors;
+extern const ipmi::sensor::InvObjectIDMap onyx_invSensors;
+extern const ipmi::sensor::InvObjectIDMap ruby_invSensors;
+
 namespace ipmi
 {

diff --git a/sensorhandler.cpp b/sensorhandler.cpp
index 881ea35..364462a 100644
--- a/sensorhandler.cpp
+++ b/sensorhandler.cpp
@@ -28,15 +28,7 @@ static constexpr uint8_t BMCSlaveAddress = 0x20;
 extern int updateSensorRecordFromSSRAESC(const void*);
 extern sd_bus* bus;

-namespace ipmi
-{
-namespace sensor
-{
-extern const IdInfoMap sensors;
-} // namespace sensor
-} // namespace ipmi
-
-extern const FruMap frus;
+extern FruMap frus;

 using namespace phosphor::logging;
 using InternalFailure =
diff --git a/sensorhandler.hpp b/sensorhandler.hpp
index ea9fa3c..27bdb64 100644
--- a/sensorhandler.hpp
+++ b/sensorhandler.hpp
@@ -726,3 +726,16 @@ inline void enableScanning(ipmi::sensor::GetSensorResponse* resp)
 } // namespace sensor

 } // namespace ipmi
+
+
+
+namespace ipmi {
+namespace sensor {
+
+extern IdInfoMap sensors;
+extern const IdInfoMap quartz_sensors;
+extern const IdInfoMap titanite_sensors;
+extern const IdInfoMap onyx_sensors;
+extern const IdInfoMap ruby_sensors;
+}
+}
diff --git a/storagehandler.cpp b/storagehandler.cpp
index 3f09940..0d1ec58 100644
--- a/storagehandler.cpp
+++ b/storagehandler.cpp
@@ -24,6 +24,30 @@
 #include <variant>
 #include <xyz/openbmc_project/Common/error.hpp>

+// Platform Type
+constexpr auto ONYX_SLT     = 61;   //0x3D
+constexpr auto ONYX_1       = 64;   //0x40
+constexpr auto ONYX_2       = 65;   //0x41
+constexpr auto ONYX_3       = 66;   //0x42
+constexpr auto ONYX_FR4     = 82;   //0x52
+constexpr auto QUARTZ_DAP   = 62;   //0x3E
+constexpr auto QUARTZ_1     = 67;   //0x43
+constexpr auto QUARTZ_2     = 68;   //0x44
+constexpr auto QUARTZ_3     = 69;   //0x45
+constexpr auto QUARTZ_FR4   = 81;   //0x51
+constexpr auto RUBY_1       = 70;   //0x46
+constexpr auto RUBY_2       = 71;   //0x47
+constexpr auto RUBY_3       = 72;   //0x48
+constexpr auto TITANITE_1   = 73;   //0x49
+constexpr auto TITANITE_2   = 74;   //0x4A
+constexpr auto TITANITE_3   = 75;   //0x4B
+constexpr auto TITANITE_4   = 76;   //0x4C
+constexpr auto TITANITE_5   = 77;   //0x4D
+constexpr auto TITANITE_6   = 78;   //0x4E
+
+#define COMMAND_BOARD_ID    ("/sbin/fw_printenv -n board_id")
+#define COMMAND_LEN         3
+
 void register_netfn_storage_functions() __attribute__((constructor));

 unsigned int g_sel_time = 0xFFFFFFFF;
@@ -31,11 +55,13 @@ namespace ipmi
 {
 namespace sensor
 {
-extern const IdInfoMap sensors;
+IdInfoMap sensors;
 } // namespace sensor
 } // namespace ipmi

-extern const FruMap frus;
+FruMap frus;
+ipmi::sensor::InvObjectIDMap invSensors;
+
 constexpr uint8_t eventDataSize = 3;
 namespace
 {
@@ -750,8 +776,94 @@ ipmi::RspType<uint8_t,  // SDR version
                                  operationSupport);
 }

+std::string getPlatformID()
+{
+    FILE *pf;
+    char data[COMMAND_LEN] = {0};
+    std::stringstream ss;
+    unsigned int board_id = 0;
+
+    // Setup pipe for reading and execute to get u-boot environment
+    // variable board_id.
+    pf = popen(COMMAND_BOARD_ID,"r");
+
+    if(pf > 0)
+    {   // no error
+        if (fgets(data, COMMAND_LEN , pf) != NULL)
+        {
+            ss << std::hex << (std::string)data;
+            ss >> board_id;
+        }
+        pclose(pf);
+        if ( board_id > 0 || board_id < 0xFF )
+        {
+            switch (board_id)
+            {
+                case ONYX_SLT:
+                case ONYX_1 ... ONYX_3:
+                case ONYX_FR4:
+                    return "onyx";
+                case RUBY_1 ... RUBY_3:
+                    return "ruby";
+                case QUARTZ_DAP:
+                case QUARTZ_1 ... QUARTZ_3:
+                case QUARTZ_FR4:
+                    return "quartz";
+                case TITANITE_1 ... TITANITE_6:
+                    return "titanite";
+                default:
+                    return "quartz";
+            }//switch
+        }
+    }
+    else
+    {
+        log<level::DEBUG>("Unable to determine platform",
+                          entry("Defaulting to 2P"));
+    }
+
+    return "quartz";
+}
+
 void register_netfn_storage_functions()
 {
+    // Load the right device symbols based on platform
+
+    std::string platform = getPlatformID();
+    if (platform.compare("quartz") == 0)
+    {
+        log<level::INFO>("Loading Quartz configuration");
+        frus = quartz_frus;
+        invSensors = quartz_invSensors;
+        ipmi::sensor::sensors = ipmi::sensor::quartz_sensors;
+    }
+    else if (platform.compare("onyx") == 0)
+    {
+        log<level::INFO>("Loading Onyx configuration");
+        frus = onyx_frus;
+        invSensors = onyx_invSensors;
+        ipmi::sensor::sensors = ipmi::sensor::onyx_sensors;
+    }
+    else if (platform.compare("ruby") == 0)
+    {
+        log<level::INFO>("Loading Ruby configuration");
+        frus = ruby_frus;
+        invSensors = ruby_invSensors;
+        ipmi::sensor::sensors = ipmi::sensor::ruby_sensors;
+    }
+    else if (platform.compare("titanite") == 0)
+    {
+        log<level::INFO>("Loading Titanite configuration");
+        frus = titanite_frus;
+        invSensors = titanite_invSensors;
+        ipmi::sensor::sensors = ipmi::sensor::titanite_sensors;
+    }
+    else
+    {
+        log<level::ERR>("Unknown platform?!",
+                          entry("Registration failed"));
+    }
+
     // <Get SEL Info>
     ipmi::registerHandler(ipmi::prioOpenBmcBase, ipmi::netFnStorage,
                           ipmi::storage::cmdGetSelInfo, ipmi::Privilege::User,
--
2.17.1

