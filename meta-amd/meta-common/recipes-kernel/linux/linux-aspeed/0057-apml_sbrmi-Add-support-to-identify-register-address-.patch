From 667c7675f7663ffd4d28993f0180aff0dce5cfe1 Mon Sep 17 00:00:00 2001
From: Akshay Gupta <Akshay.Gupta@amd.com>
Date: Mon, 10 Apr 2023 01:46:00 -0400
Subject: [PATCH 3/3] apml_sbrmi: Add support to identify register address size
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

- This patch implements the identification of register address
  size at runtime.
- For RMI in Turin the address size is 2 bytes but for previous
  processors the address size is 1 byte.
- The identification is done in first transaction using the
  Revision register
- The ideal place to configure regmap is in probe,
  current workaround to make it work over Turin IOD/Genoa
  with Mux present

Signed-off-by: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
---
 drivers/misc/amd-apml/sbrmi-common.h |   2 +
 drivers/misc/amd-apml/sbrmi.c        | 297 +++++++++++++++++++++++++--
 2 files changed, 277 insertions(+), 22 deletions(-)

diff --git a/drivers/misc/amd-apml/sbrmi-common.h b/drivers/misc/amd-apml/sbrmi-common.h
index 0275c271a541..4462d23c1d23 100644
--- a/drivers/misc/amd-apml/sbrmi-common.h
+++ b/drivers/misc/amd-apml/sbrmi-common.h
@@ -17,6 +17,8 @@
 struct apml_sbrmi_device {
 	struct miscdevice sbrmi_misc_dev;
 	struct completion misc_fops_done;
+	struct i3c_device *i3cdev;
+	struct i2c_client *client;
 	struct regmap *regmap;
 	struct mutex lock;
 	u32 pwr_limit_max;
diff --git a/drivers/misc/amd-apml/sbrmi.c b/drivers/misc/amd-apml/sbrmi.c
index 12f8976d9fcb..e18a16309016 100644
--- a/drivers/misc/amd-apml/sbrmi.c
+++ b/drivers/misc/amd-apml/sbrmi.c
@@ -28,12 +28,28 @@
 /* Do not allow setting negative power limit */
 #define SBRMI_PWR_MIN	0

+/* SBRMI REVISION REG */
+#define SBRMI_REV	0x0
+#define SBRMI_REV_BRTH (0x21)
+
 #define DIMM_BASE_ID		(0x80)
 #define MAX_DIMM_COUNT		(12)
 #define DIMM_TEMP_OFFSET	(21)
 #define MAX_WAIT_TIME_SEC	(3)
 static u32 *dimm_id;

+/* SBRMI registers data out is 1 byte */
+#define SBRMI_REG_DATA_SIZE		0x1
+/* Default SBRMI register address is 1 byte */
+#define SBRMI_REG_ADDR_SIZE_DEF		0x1
+/* TURIN SBRMI register address is 2 byte */
+#define SBRMI_REG_ADDR_SIZE_TWO_BYTE	0x2
+
+/* Two xfers, one write and one read require to read the data */
+#define I3C_I2C_MSG_XFER_SIZE		0x2
+
+static int configure_regmap(struct apml_sbrmi_device *rmi_dev);
+
 enum sbrmi_msg_id {
 	SBRMI_READ_PKG_PWR_CONSUMPTION = 0x1,
 	SBRMI_WRITE_PKG_PWR_LIMIT,
@@ -211,8 +227,7 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 	bool read = false;
 	int ret = -EFAULT;

-	rmi_dev = container_of(fp->private_data, struct apml_sbrmi_device,
-			       sbrmi_misc_dev);
+	rmi_dev = fp->private_data;
 	if (!rmi_dev)
 		return ret;

@@ -266,7 +281,7 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 		/* REG R/W */
 		if (read) {
 			ret = regmap_read(rmi_dev->regmap,
-					  msg.data_in.reg_in[REG_OFF_INDEX],
+					  msg.data_in.mb_in[REG_OFF_INDEX],
 					  &msg.data_out.mb_out[RD_WR_DATA_INDEX]);
 		} else {
 			ret = regmap_write(rmi_dev->regmap,
@@ -292,8 +307,38 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 	return ret;
 }

+static int sbrmi_open(struct inode *inode, struct file *filp)
+{
+	struct miscdevice *mdev = filp->private_data;
+	struct apml_sbrmi_device *rmi_dev = container_of(mdev, struct apml_sbrmi_device,
+							 sbrmi_misc_dev);
+	int ret = 0;
+
+	if (!rmi_dev)
+		return -ENODEV;
+
+	if (!rmi_dev->regmap) {
+		ret = configure_regmap(rmi_dev);
+		if (ret < 0) {
+			pr_err("regmap configuration failed with return value:%d in misc dev open\n", ret);
+			return ret;
+		}
+	}
+	filp->private_data = rmi_dev;
+	return 0;
+}
+
+static int sbrmi_release(struct inode *inode, struct file *filp)
+{
+	filp->private_data = NULL;
+
+	return 0;
+}
+
 static const struct file_operations sbrmi_fops = {
 	.owner		= THIS_MODULE,
+	.open		= sbrmi_open,
+	.release	= sbrmi_release,
 	.unlocked_ioctl	= sbrmi_ioctl,
 	.compat_ioctl	= sbrmi_ioctl,
 };
@@ -318,16 +363,88 @@ static int create_misc_rmi_device(struct apml_sbrmi_device *rmi_dev,
 	return ret;
 }

+static int sbrmi_i2c_identify_reg_addr_size(struct i2c_client *i2cdev, u32 *size, u32 *rev)
+{
+	struct i2c_msg xfer[I3C_I2C_MSG_XFER_SIZE];
+	int reg = SBRMI_REV;
+	int val_size = SBRMI_REG_DATA_SIZE;
+	int ret;
+	int probe = 3;
+
+	do
+	{
+		// Attempt two byte addressing mode
+		xfer[0].addr = i2cdev->addr;
+		xfer[0].flags = 0;
+		xfer[0].len = SBRMI_REG_ADDR_SIZE_TWO_BYTE;
+		xfer[0].buf = (void *)&reg;
+
+		xfer[1].addr = i2cdev->addr;
+		xfer[1].flags = I2C_M_RD;
+		xfer[1].len = val_size;
+		xfer[1].buf = (void *)rev;
+
+		ret = i2c_transfer(i2cdev->adapter, xfer, I3C_I2C_MSG_XFER_SIZE);
+
+		if (ret >= 0)
+		{
+			pr_err("I2C SBRMI_REV command returned value: %d\n", *rev);
+			if(*rev == SBRMI_REV_BRTH)
+				*size = SBRMI_REG_ADDR_SIZE_TWO_BYTE;
+			else
+				*size = SBRMI_REG_ADDR_SIZE_DEF;
+
+			return 0;
+		}
+		else
+		{
+			probe--;
+			continue;
+		}
+	} while (probe > 0);
+
+	probe = 3;
+	do
+	{
+		// Attempt one byte addressing mode
+		xfer[0].addr = i2cdev->addr;
+		xfer[0].flags = 0;
+		xfer[0].len = SBRMI_REG_ADDR_SIZE_DEF;
+		xfer[0].buf = (void *)&reg;
+
+		xfer[1].addr = i2cdev->addr;
+		xfer[1].flags = I2C_M_RD;
+		xfer[1].len = val_size;
+		xfer[1].buf = (void *)rev;
+
+		ret = i2c_transfer(i2cdev->adapter, xfer, I3C_I2C_MSG_XFER_SIZE);
+		if (ret >= 0)
+		{
+			pr_err("I2C SBRMI_REV command returned value: %d\n", *rev);
+			if(*rev == SBRMI_REV_BRTH)
+				*size = SBRMI_REG_ADDR_SIZE_TWO_BYTE;
+			else
+				*size = SBRMI_REG_ADDR_SIZE_DEF;
+
+			return 0;
+		}
+		else
+		{
+			probe--;
+			continue;
+		}
+	} while (probe > 0);
+
+	pr_err("I2C SBRMI_REV error code value: %d\n", ret);
+	return ret;
+}
+
 static int sbrmi_i2c_probe(struct i2c_client *client,
 			   const struct i2c_device_id *rmi_id)
 {
 	struct device *dev = &client->dev;
 	struct device *hwmon_dev;
 	struct apml_sbrmi_device *rmi_dev;
-	struct regmap_config sbrmi_i2c_regmap_config = {
-		.reg_bits = 8,
-		.val_bits = 8,
-	};
 	int ret;
 	int i;
 	u32 dimm_cnt;
@@ -338,11 +455,14 @@ static int sbrmi_i2c_probe(struct i2c_client *client,

 	atomic_set(&rmi_dev->in_progress, 0);
 	atomic_set(&rmi_dev->no_new_trans, 0);
+	rmi_dev->client = client;

+	ret = configure_regmap(rmi_dev);
+	if (ret < 0) {
+		pr_err("regmap configuration failed with return value:%d in Probe\n", ret);
+		return ret;
+	}
 	mutex_init(&rmi_dev->lock);
-	rmi_dev->regmap = devm_regmap_init_i2c(client, &sbrmi_i2c_regmap_config);
-	if (IS_ERR(rmi_dev->regmap))
-		return PTR_ERR(rmi_dev->regmap);

 	dev_set_drvdata(dev, (void *)rmi_dev);

@@ -387,33 +507,165 @@ static int sbrmi_i2c_probe(struct i2c_client *client,
 	return create_misc_rmi_device(rmi_dev, dev);
 }

+
+static int sbrmi_i3c_identify_reg_addr_size(struct i3c_device *i3cdev, u32 *size, u32 *rev)
+{
+	struct i3c_priv_xfer xfers[I3C_I2C_MSG_XFER_SIZE];
+	int reg = SBRMI_REV;
+	int val_size = SBRMI_REG_DATA_SIZE;
+	int ret;
+	int probe = 3;
+
+	do
+	{
+		// Attempt two byte addressing mode
+		xfers[0].rnw = false;
+		xfers[0].len = SBRMI_REG_ADDR_SIZE_TWO_BYTE;
+		xfers[0].data.out = &reg;
+
+		xfers[1].rnw = true;
+		xfers[1].len = val_size;
+		xfers[1].data.in = rev;
+
+		ret = i3c_device_do_priv_xfers(i3cdev, xfers, I3C_I2C_MSG_XFER_SIZE);
+
+		if (ret >= 0)
+		{
+			pr_err("I3C SBRMI_REV command returned value: %d\n", *rev);
+			if(*rev == SBRMI_REV_BRTH)
+				*size = SBRMI_REG_ADDR_SIZE_TWO_BYTE;
+			else
+				*size = SBRMI_REG_ADDR_SIZE_DEF;
+
+			return 0;
+		}
+		else
+		{
+			probe--;
+			continue;
+		}
+	} while (probe > 0);
+
+	probe = 3;
+	do
+	{
+		// Attempt one byte addressing mode
+		xfers[0].rnw = false;
+		xfers[0].len = SBRMI_REG_ADDR_SIZE_DEF;
+		xfers[0].data.out = &reg;
+
+		xfers[1].rnw = true;
+		xfers[1].len = val_size;
+		xfers[1].data.in = rev;
+
+		ret = i3c_device_do_priv_xfers(i3cdev, xfers, I3C_I2C_MSG_XFER_SIZE);
+
+		if (ret >= 0)
+		{
+			pr_err("I3C SBRMI_REV command returned value: %d\n", *rev);
+			if(*rev == SBRMI_REV_BRTH)
+				*size = SBRMI_REG_ADDR_SIZE_TWO_BYTE;
+			else
+				*size = SBRMI_REG_ADDR_SIZE_DEF;
+
+			return 0;
+		}
+		else
+		{
+			probe--;
+			continue;
+		}
+	} while (probe > 0);
+
+	pr_err("I3C SBRMI_REV error code value: %d\n", ret);
+	return ret;
+}
+
+static int init_rmi_regmap(struct apml_sbrmi_device *rmi_dev, u32 size, u32 rev)
+{
+	struct regmap_config sbrmi_regmap_config = {
+		.reg_bits = 8 * size,
+		.val_bits = 8,
+		.reg_format_endian = REGMAP_ENDIAN_LITTLE,
+	};
+	struct regmap *regmap;
+
+	if (rmi_dev->i3cdev) {
+		regmap = devm_regmap_init_i3c(rmi_dev->i3cdev,
+					      &sbrmi_regmap_config);
+		if (IS_ERR(regmap)) {
+			dev_err(&rmi_dev->i3cdev->dev,
+				"Failed to register i3c regmap %d\n",
+				(int)PTR_ERR(regmap));
+			return PTR_ERR(regmap);
+		}
+	} else if (rmi_dev->client) {
+		regmap = devm_regmap_init_i2c(rmi_dev->client,
+					      &sbrmi_regmap_config);
+		if (IS_ERR(regmap))
+			return PTR_ERR(rmi_dev->regmap);
+	} else {
+		return -ENODEV;
+	}
+
+	rmi_dev->regmap = regmap;
+	rmi_dev->rev = rev;
+	return 0;
+}
+
+/*
+ * configure_regmap call should happen in probe, currently for Turin
+ * the I3C APML client controllers are not initialized and also
+ * Efuse need to be done so move the config to first transaction
+ * https://ontrack-internal.amd.com/browse/PLAT-126960
+ */
+static int configure_regmap(struct apml_sbrmi_device *rmi_dev)
+{
+	u32 size = 2;
+	u32 rev = 0;
+	int ret = 0;
+
+	if (rmi_dev->i3cdev) {
+		ret = sbrmi_i3c_identify_reg_addr_size(rmi_dev->i3cdev, &size, &rev);
+		if (ret < 0) {
+			pr_err("Reg size identification failed with return value:%d\n", ret);
+			return ret;
+		}
+	} else if (rmi_dev->client) {
+		ret = sbrmi_i2c_identify_reg_addr_size(rmi_dev->client, &size, &rev);
+		if (ret < 0) {
+			pr_err("Reg size identification failed with return value:%d\n", ret);
+			return ret;
+		}
+	} else {
+		return ret;
+	}
+	ret = init_rmi_regmap(rmi_dev, size, rev);
+	return ret;
+}
+
 static int sbrmi_i3c_probe(struct i3c_device *i3cdev)
 {
 	struct device *dev = &i3cdev->dev;
 	struct device *hwmon_dev;
 	struct apml_sbrmi_device *rmi_dev;
-	struct regmap_config sbrmi_i3c_regmap_config = {
-		.reg_bits = 8,
-		.val_bits = 8,
-	};
-	struct regmap *regmap;
 	int ret;
 	int i;
 	u32 dimm_cnt;

-	regmap = devm_regmap_init_i3c(i3cdev, &sbrmi_i3c_regmap_config);
-	if (IS_ERR(regmap)) {
-		dev_err(&i3cdev->dev, "Failed to register i3c regmap %d\n",
-			(int)PTR_ERR(regmap));
-		return PTR_ERR(regmap);
-	}
 	rmi_dev = devm_kzalloc(dev, sizeof(struct apml_sbrmi_device), GFP_KERNEL);
 	if (!rmi_dev)
 		return -ENOMEM;

-	rmi_dev->regmap = regmap;
 	atomic_set(&rmi_dev->in_progress, 0);
 	atomic_set(&rmi_dev->no_new_trans, 0);
+	rmi_dev->i3cdev = i3cdev;
+
+	ret = configure_regmap(rmi_dev);
+	if (ret < 0) {
+		pr_err("regmap configuration failed with return value:%d in Probe\n", ret);
+		return ret;
+	}
 	mutex_init(&rmi_dev->lock);

 	dev_set_drvdata(dev, (void *)rmi_dev);
@@ -566,5 +818,6 @@ static struct i3c_driver sbrmi_i3c_driver = {
 module_i3c_i2c_driver(sbrmi_i3c_driver, &sbrmi_driver)

 MODULE_AUTHOR("Akshay Gupta <akshay.gupta@amd.com>");
+MODULE_AUTHOR("Naveenkrishna Chatradhi <naveenkrishna.chatradhi@amd.com>");
 MODULE_DESCRIPTION("Hwmon driver for AMD SB-RMI emulated sensor");
 MODULE_LICENSE("GPL");
--
2.17.1

