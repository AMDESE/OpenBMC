From 15b09cbb01c8643f53ae882eb85275db42d3e543 Mon Sep 17 00:00:00 2001
From: Ashok Kumar <ashok2.kumar@amd.com>
Date: Mon, 15 Apr 2024 12:37:53 -0500
Subject: [PATCH] recipes-kernel/linux/linux-aspeed: SPDM driver update

Race condition issue with I2C-slave backend driver in BMC
https://er.github.amd.com/RoT/proto-apps/blob/fdamato_slave_module_restruct/platform_shim/common/os/linux/i2c-slave/i2c-slave-module.c

Fixes: FWDEV-77404

Signed-off-by: Ashok Kumar <ashok2.kumar@amd.com>
---
 drivers/i2c/i2c-slave-backend.c | 250 +++++++++++++++-----------------
 1 file changed, 119 insertions(+), 131 deletions(-)

diff --git a/drivers/i2c/i2c-slave-backend.c b/drivers/i2c/i2c-slave-backend.c
index a0caac167a9e..31c47b072761 100644
--- a/drivers/i2c/i2c-slave-backend.c
+++ b/drivers/i2c/i2c-slave-backend.c
@@ -19,59 +19,41 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/slab.h>
-#include <linux/workqueue.h>
 #include <linux/cdev.h>
 #include <linux/device.h>
 #include <linux/kernel.h>
 #include <linux/fs.h>
 #include <linux/uaccess.h>
-#include <linux/list.h>

-#define DEVICE_NAME "i2c-slave-backend"
+#define DEVICE_NAME "i2c-backend-slave"
 #define CLASS_NAME "i2c"
-#define BUFFER_SIZE 0x1000u
+
+#define PACKET_MAX_SIZE (128)
+#define MAX_PACKET_NUM (512)

 // Arbitrary number for device class
 #define I2C_SLAVE_MAJOR_ID 47

-struct i2c_slave_work_data {
-    struct work_struct worker;
-    u8 *buffer;
-    u32 size;
-    enum i2c_slave_event event;
-};
-
-struct i2c_buffer_list {
-    struct list_head list;
-    u8 *buffer;
-    u32 size;
-};
-
 struct buffer_slice {
-    u8 data[BUFFER_SIZE * 2];
-    u32 idx;
-    u8 slice;
+    u8 data[PACKET_MAX_SIZE];
+    u32 size;
 };

 struct i2c_slave_backend_data {
-    struct buffer_slice _buffer;
-    struct list_head buffer_list;
-    struct mutex lock;
+    struct buffer_slice buffer[MAX_PACKET_NUM];
+    u32 buffer_wr_idx;
+    u32 buffer_rd_idx;
     bool is_dev_open;
     struct i2c_client *client;
     struct cdev i2c_slave_dev;
-    struct i2c_slave_work_data work_data;
 };

-static void delete_i2c_buffer_list(struct i2c_slave_backend_data *data)
+static void backend_data_init(struct i2c_slave_backend_data *data)
 {
-    struct list_head *i;
-    list_for_each(i, &data->buffer_list) {
-        struct i2c_buffer_list *bf = list_entry(i, struct i2c_buffer_list, list);
-        kfree(bf->buffer);
-        list_del(&bf->list);
-    }
-
+    data->buffer_wr_idx = 0;
+    data->buffer_rd_idx = 0;
+    // Reset size on first slice
+    data->buffer[0].size = 0;
 }

 static int i2c_slave_dev_open(struct inode *inode, struct file *file)
@@ -98,10 +80,56 @@ static ssize_t i2c_slave_dev_write(struct file *file, const char __user *buf, si
     return -ENOTSUPP;
 }

+static int cb_increment_wr_idx(u32 *wr_idx, u32 rd_idx)
+{
+    // Check for Buffer Full (Look Ahead no Lock)
+    if (((rd_idx > 1) && (*wr_idx == (rd_idx - 2)) ) ||
+        ((rd_idx < 1) && (*wr_idx == MAX_PACKET_NUM - 2)))
+        return -1;
+
+    // Increment Write Index
+    if (*wr_idx == MAX_PACKET_NUM - 1)
+        *wr_idx = 0;
+    else
+        (*wr_idx)++;
+    return 0;
+}
+
+static int cb_increment_rd_idx(u32 wr_idx, u32 *rd_idx)
+{
+    // Check for Buffer Empty
+    if (*rd_idx == wr_idx)
+        return -1;
+
+    // Increment Read Index
+    if (*rd_idx == MAX_PACKET_NUM - 1)
+        *rd_idx = 0;
+    else
+        (*rd_idx)++;
+    return 0;
+}
+
+struct buffer_slice *cb_buffer_read_peek(struct buffer_slice *buffer, u32 wr_idx, u32 rd_idx)
+{
+    if (rd_idx >= MAX_PACKET_NUM) {
+        pr_err("cb_buffer_read_peek: read_index out of bound 0x%x \n", rd_idx);
+        return NULL;
+    }
+
+    // Check if Buffer Empty
+    if (rd_idx == wr_idx)
+        return NULL;
+
+    // Return Buffer at current Read Index
+    return &buffer[rd_idx];
+}
+
+
 static ssize_t i2c_slave_dev_read(struct file *file, char __user *buf, size_t count, loff_t *offset)
 {
-    struct i2c_buffer_list *q = NULL;
     struct i2c_slave_backend_data *data = (struct i2c_slave_backend_data *) file->private_data;
+    struct buffer_slice *slice = NULL;
+    int rc = 0;

     // if file is not opened return error
     if (!data->is_dev_open) {
@@ -109,41 +137,30 @@ static ssize_t i2c_slave_dev_read(struct file *file, char __user *buf, size_t co
         return 0;
     }

-    // lock the device
-    if (!mutex_trylock(&data->lock)) {
-        return 0;
-    }
-
-    // if data not availabe return 0
-    if (list_empty(&data->buffer_list)) {
-        mutex_unlock(&data->lock);
+    // Circular Buffer Peek
+    slice = cb_buffer_read_peek(data->buffer, data->buffer_wr_idx, data->buffer_rd_idx);
+    if (slice == NULL)
         return 0;
-    }
-
-    // Retrieve fist element from the list
-    q = list_first_entry(&data->buffer_list, struct i2c_buffer_list, list);
-
-    // if User Buffer is bigger than needed resize count
-    if (count > q->size) {
-        count = q->size;
-    }

     // Copy Data to User
-    if (copy_to_user(buf, q->buffer, count)) {
-        mutex_unlock(&data->lock);
-        return 0;
+    rc = copy_to_user(buf, slice->data, slice->size);
+    if (rc) {
+        pr_err("i2c_slave_dev_read: copy_to_user error %d \n", rc);
+        return rc;
     }

-    // free data and remove entry
-    kfree(q->buffer);
-    list_del(&q->list);
-
-    // Unlock the device
-    mutex_unlock(&data->lock);
+    // Circular Buffer Increment Read Index
+    rc = cb_increment_rd_idx(data->buffer_wr_idx, &data->buffer_rd_idx);
+    if (rc) {
+        pr_err("i2c_slave_dev_read: cb_increment_rd_idx error %d \n", rc);
+        return rc;
+    }

-    return count;
+    // Return Value
+    return slice->size;
 }

+
 static struct file_operations i2c_slave_fops =
 {
    .open = i2c_slave_dev_open,
@@ -152,70 +169,56 @@ static struct file_operations i2c_slave_fops =
    .release = i2c_slave_dev_release,
 };

-static void i2c_slave_backend_wq_handled(struct work_struct *work)
-{
-    struct i2c_buffer_list *buffer_list;
-    struct i2c_slave_work_data *work_data = (struct i2c_slave_work_data *)work;
-
-    // Save input data on stack before acquiring mutex
-    u32 buffer_size = work_data->size;
-    u8 *buffer = work_data->buffer;
-
-    // Retrieve i2c_data
-    struct i2c_slave_backend_data *data = container_of(work_data, struct i2c_slave_backend_data, work_data);

-    // Lock mutex
-    mutex_lock(&data->lock);
-
-    // Allocate new list (and copy data)
-    buffer_list = kzalloc(sizeof(struct i2c_buffer_list), GFP_KERNEL);
-    buffer_list->buffer = kmalloc(buffer_size, GFP_KERNEL);
-    buffer_list->size = buffer_size;
-    memcpy(buffer_list->buffer, buffer, buffer_size);
-
-    // Add list
-    list_add_tail(&buffer_list->list, &data->buffer_list);
-
-    // Unlock mutex
-    mutex_unlock(&data->lock);
-}

 static int i2c_slave_backend_slave_cb(struct i2c_client *client,
                                       enum i2c_slave_event event, u8 *val)
 {
-    u32 offset;
     int rc = 0;
     struct i2c_slave_backend_data *data = i2c_get_clientdata(client);
+    struct buffer_slice *slice = NULL;
     if (!data) {
         printk(KERN_ALERT "i2c_slave_backend_slave_cb: No data associated to the device \n");
         return -EIO;
     }

-    offset = (u32)data->_buffer.slice * BUFFER_SIZE;
-    switch (event) {
+    // Get Current Slice
+    slice = &data->buffer[data->buffer_wr_idx];
+
+    switch (event) {
         case I2C_SLAVE_WRITE_RECEIVED:
         case I2C_SLAVE_WRITE_REQUESTED:
-            if (data->_buffer.idx < BUFFER_SIZE)
-                data->_buffer.data[data->_buffer.idx++ + offset] = *val;
+            if (slice->size < PACKET_MAX_SIZE) {
+                if (val == NULL)
+                    // We only support 7-bit addresses
+                    slice->data[slice->size++] = (u8)(client->addr << 1);
+                else
+                    slice->data[slice->size++] = *val;
+            } else {
+                pr_err("i2c_slave_backend_slave_cb - I2C_SLAVE_WRITE_REQUESTED: Packet bigger than 0x%x - overflow\n", PACKET_MAX_SIZE);
+                slice->size = 0;
+            }
             break;
         case I2C_SLAVE_STOP:
             // Add last byte
-            if (data->_buffer.idx < BUFFER_SIZE)
-                data->_buffer.data[data->_buffer.idx + offset] = *val;
-
-            // Save data for queue
-            data->work_data.size = data->_buffer.idx;
-            data->work_data.buffer = &data->_buffer.data[offset];
-
-            // Queue Work
-            queue_work(system_long_wq, &data->work_data.worker);
-
-            // Ping-Pong on Buffers
-            data->_buffer.slice++;
-            data->_buffer.slice %= 2;
+            if (slice->size < PACKET_MAX_SIZE) {
+                if (val)
+                    slice->data[slice->size] = *val;
+            } else {
+                pr_err("i2c_slave_backend_slave_cb - I2C_SLAVE_STOP: Packet bigger than 0x%x - overflow\n", PACKET_MAX_SIZE);
+                slice->size = 0;
+            }
+
+            // Circular Buffer Increment Write Index
+            if (cb_increment_wr_idx(&data->buffer_wr_idx, data->buffer_rd_idx)) {
+                pr_err("i2c_slave_backend_slave_cb: Circular Buffer Full - Clear it \n");
+                data->buffer_wr_idx = data->buffer_rd_idx;
+            }
+
+            // Reset idx on next slice
+            slice = &data->buffer[data->buffer_wr_idx];
+            slice->size = 0;

-            // Reset idx
-            data->_buffer.idx = 0;
             break;
         // for now supports only I2C_SLAVE_WRITE
         default:
@@ -226,6 +229,7 @@ static int i2c_slave_backend_slave_cb(struct i2c_client *client,
     return rc;
 }

+
 static int register_i2c_slave_device(struct i2c_slave_backend_data *data)
 {
     int rc;
@@ -256,17 +260,12 @@ static int i2c_slave_backend_remove(struct i2c_client *client)
     // unregister char device region
     unregister_chrdev_region(MKDEV(I2C_SLAVE_MAJOR_ID, 0), 1);

-    // cancel any on progress work
-    cancel_work_sync(&data->work_data.worker);
-
-    // delete lists
-    delete_i2c_buffer_list(data);
-
     // free data
     kfree(data);

     // unregister slave device
     i2c_slave_unregister(client);
+
     return 0;
 }

@@ -280,27 +279,23 @@ static int i2c_slave_backend_probe(struct i2c_client *client)
     if (!data)
         return -ENOMEM;

-    // Initialize lock
-    mutex_init(&data->lock);
-    // Initialize buffer list
-    INIT_LIST_HEAD(&data->buffer_list);
     data->client = client;
     i2c_set_clientdata(client, data);

+    // Initialize Backend Data
+    backend_data_init(data);
+
     // Register slave device
     rc = i2c_slave_register(client, i2c_slave_backend_slave_cb);
     if (rc) {
-        printk(KERN_ALERT "i2c_slave_backend_probe: error %d in i2c_slave_register \n", rc);
+        printk(KERN_ALERT "i2c_slave_back_end_probe: error %d in i2c_slave_register \n", rc);
         return rc;
     }

-    // Initialize workqueue
-    INIT_WORK(&data->work_data.worker, i2c_slave_backend_wq_handled);
-
     // Register char device (use the same minor as the associated i2c-dev driver)
     rc = register_i2c_slave_device(data);
     if (rc) {
-        printk(KERN_ALERT "i2c_slave_back_endprobe: cannot register char device \n");
+        printk(KERN_ALERT "i2c_slave_back_end_probe: cannot register char device \n");
         i2c_slave_backend_remove(client);
         return -EIO;
     }
@@ -308,24 +303,17 @@ static int i2c_slave_backend_probe(struct i2c_client *client)
     return 0;
 };

+
+
 static const struct i2c_device_id i2c_slave_backend_id[] = {
-    { "i2c-slave-backend", 0 },
+    { "slave-backend", 0 },
     {}
 };
-
 MODULE_DEVICE_TABLE(i2c, i2c_slave_backend_id);

-static const struct of_device_id i2c_slave_backend_of_match[] = {
-	{ .compatible = "i2c-slave-backend" },
-	{},
-};
-
-MODULE_DEVICE_TABLE(of, i2c_slave_backend_of_match);
-
 static struct i2c_driver i2c_slave_backend_driver = {
     .driver = {
         .name = DEVICE_NAME,
-		.of_match_table = i2c_slave_backend_of_match
     },
     .probe_new = i2c_slave_backend_probe,
     .remove = i2c_slave_backend_remove,
--
2.25.1

