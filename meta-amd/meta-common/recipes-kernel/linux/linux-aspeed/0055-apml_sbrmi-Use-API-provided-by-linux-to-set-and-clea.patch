From 698558639e52d0316d430f260679ceb78af286b7 Mon Sep 17 00:00:00 2001
From: Akshay Gupta <Akshay.Gupta@amd.com>
Date: Mon, 10 Apr 2023 01:18:23 -0400
Subject: [PATCH 1/3] apml_sbrmi: Use API provided by linux to set and clear
 the variable
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

- Instead of setting the varaiable as true and false, use
  atomic_set & atomic_read API to set, clear & read the variable

Signed-of-by: Akshay Gupta <Akshay.Gupta@amd.com>
---
 drivers/misc/amd-apml/sbrmi-common.h |  4 +-
 drivers/misc/amd-apml/sbrmi.c        | 98 ++++++++++++++--------------
 2 files changed, 51 insertions(+), 51 deletions(-)

diff --git a/drivers/misc/amd-apml/sbrmi-common.h b/drivers/misc/amd-apml/sbrmi-common.h
index 1c9f0f3fdef5..e352489dd8bc 100644
--- a/drivers/misc/amd-apml/sbrmi-common.h
+++ b/drivers/misc/amd-apml/sbrmi-common.h
@@ -20,8 +20,8 @@ struct apml_sbrmi_device {
 	struct regmap *regmap;
 	struct mutex lock;
 	u32 pwr_limit_max;
-	bool in_progress;
-	bool no_new_trans;
+	atomic_t in_progress;
+	atomic_t no_new_trans;
 	u8 rev;
 } __packed;

diff --git a/drivers/misc/amd-apml/sbrmi.c b/drivers/misc/amd-apml/sbrmi.c
index a9c44f6e7ed8..d4b6cf6a6c2c 100644
--- a/drivers/misc/amd-apml/sbrmi.c
+++ b/drivers/misc/amd-apml/sbrmi.c
@@ -221,7 +221,7 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 	 * Tickets: https://ontrack-internal.amd.com/browse/PLAT-122500
 	 * 	    https://ontrack-internal.amd.com/browse/DCSM-154
 	 */
-	if (rmi_dev->no_new_trans)
+	if (atomic_read(&rmi_dev->no_new_trans))
 		return -EBUSY;

 	/* Copy the structure from user */
@@ -237,7 +237,7 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 	mutex_lock(&rmi_dev->lock);

 	/* Verify device unbind/remove is not invoked */
-	if (rmi_dev->no_new_trans) {
+	if (atomic_read(&rmi_dev->no_new_trans)) {
 		mutex_unlock(&rmi_dev->lock);
 		return -EBUSY;
 	}
@@ -248,7 +248,7 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 	 * Set the in_progress variable to true, to wait for
 	 * completion during unbind/remove of driver
 	 */
-	rmi_dev->in_progress = true;
+	atomic_set(&rmi_dev->in_progress, 1);
 	switch (msg.cmd) {
 	case 0 ... 0x999:
 		/* Mailbox protocol */
@@ -279,9 +279,9 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 	}

 	/* Send complete only if device is unbinded/remove */
-	if (rmi_dev->no_new_trans)
+	if (atomic_read(&rmi_dev->no_new_trans))
 		complete(&rmi_dev->misc_fops_done);
-	rmi_dev->in_progress = false;
+	atomic_set(&rmi_dev->in_progress, 0);
 	mutex_unlock(&rmi_dev->lock);

 	/* Copy results back to user only for get/monitor commands and firmware failures */
@@ -337,8 +337,8 @@ static int sbrmi_i2c_probe(struct i2c_client *client,
 	if (!rmi_dev)
 		return -ENOMEM;

-	rmi_dev->no_new_trans = false;
-	rmi_dev->in_progress = false;
+	atomic_set(&rmi_dev->in_progress, 0);
+	atomic_set(&rmi_dev->no_new_trans, 0);

 	mutex_init(&rmi_dev->lock);
 	rmi_dev->regmap = devm_regmap_init_i2c(client, &sbrmi_i2c_regmap_config);
@@ -414,8 +414,8 @@ static int sbrmi_i3c_probe(struct i3c_device *i3cdev)
 		return -ENOMEM;

 	rmi_dev->regmap = regmap;
-	rmi_dev->no_new_trans = false;
-	rmi_dev->in_progress = false;
+	atomic_set(&rmi_dev->in_progress, 0);
+	atomic_set(&rmi_dev->no_new_trans, 0);
 	mutex_init(&rmi_dev->lock);

 	dev_set_drvdata(dev, (void *)rmi_dev);
@@ -464,26 +464,26 @@ static int sbrmi_i2c_remove(struct i2c_client *client)
 	struct device *dev = &client->dev;
 	struct apml_sbrmi_device *rmi_dev = dev_get_drvdata(&client->dev);

-	if (rmi_dev) {
-		/*
-		 * Set the no_new_trans so no new transaction can
-		 * occur in sbrmi_ioctl
-		 */
-		rmi_dev->no_new_trans = true;
-		/*
-		 * If any transaction is in progress wait for the
-		 * transaction to get complete
-		 * Max wait is 3 sec for any pending transaction to
-		 * complete, https://ontrack-internal.amd.com/browse/DCSM-84
-		 */
-		if (rmi_dev->in_progress)
-			wait_for_completion_timeout(&rmi_dev->misc_fops_done,
-						    MAX_WAIT_TIME_SEC * HZ);
-		misc_deregister(&rmi_dev->sbrmi_misc_dev);
-		/* Assign fops and parent of misc dev to NULL */
-		rmi_dev->sbrmi_misc_dev.fops = NULL;
-		rmi_dev->sbrmi_misc_dev.parent = NULL;
-	}
+	if (!rmi_dev)
+		return 0;
+	/*
+	 * Set the no_new_trans so no new transaction can
+	 * occur in sbrmi_ioctl
+	 */
+	atomic_set(&rmi_dev->no_new_trans, 1);
+	/*
+	 * If any transaction is in progress wait for the
+	 * transaction to get complete
+	 * Max wait is 3 sec for any pending transaction to
+	 * complete, https://ontrack-internal.amd.com/browse/DCSM-84
+	 */
+	if (atomic_read(&rmi_dev->in_progress))
+		wait_for_completion_timeout(&rmi_dev->misc_fops_done,
+					    MAX_WAIT_TIME_SEC * HZ);
+	misc_deregister(&rmi_dev->sbrmi_misc_dev);
+	/* Assign fops and parent of misc dev to NULL */
+	rmi_dev->sbrmi_misc_dev.fops = NULL;
+	rmi_dev->sbrmi_misc_dev.parent = NULL;

 	if (dimm_id)
 		devm_kfree(dev, dimm_id);
@@ -497,26 +497,26 @@ static int sbrmi_i3c_remove(struct i3c_device *i3cdev)
 	struct device *dev = &i3cdev->dev;
 	struct apml_sbrmi_device *rmi_dev = dev_get_drvdata(&i3cdev->dev);

-	if (rmi_dev) {
-		/*
-		 * Set the no_new_trans so no new transaction can
-		 * occur in sbrmi_ioctl
-		 */
-		rmi_dev->no_new_trans = true;
-		/*
-		 * If any transaction is in progress wait for the
-		 * transaction to get complete
-		 * Max wait is 3 sec for any pending transaction to
-		 * complete, https://ontrack-internal.amd.com/browse/DCSM-84
-		 */
-		if (rmi_dev->in_progress)
-			wait_for_completion_timeout(&rmi_dev->misc_fops_done,
-						MAX_WAIT_TIME_SEC * HZ);
-		misc_deregister(&rmi_dev->sbrmi_misc_dev);
-		/* Assign fops and parent of misc dev to NULL */
-		rmi_dev->sbrmi_misc_dev.fops = NULL;
-		rmi_dev->sbrmi_misc_dev.parent = NULL;
-	}
+	if (!rmi_dev)
+		return 0;
+	/*
+	 * Set the no_new_trans so no new transaction can
+	 * occur in sbrmi_ioctl
+	 */
+	atomic_set(&rmi_dev->no_new_trans, 1);
+	/*
+	 * If any transaction is in progress wait for the
+	 * transaction to get complete
+	 * Max wait is 3 sec for any pending transaction to
+	 * complete, https://ontrack-internal.amd.com/browse/DCSM-84
+	 */
+	if (atomic_read(&rmi_dev->in_progress))
+		wait_for_completion_timeout(&rmi_dev->misc_fops_done,
+					MAX_WAIT_TIME_SEC * HZ);
+	misc_deregister(&rmi_dev->sbrmi_misc_dev);
+	/* Assign fops and parent of misc dev to NULL */
+	rmi_dev->sbrmi_misc_dev.fops = NULL;
+	rmi_dev->sbrmi_misc_dev.parent = NULL;

 	if (dimm_id)
 		devm_kfree(dev, dimm_id);
--
2.17.1

