From 2b4d4d2fdeaf071c7edd9deeb5a2979d1be13396 Mon Sep 17 00:00:00 2001
From: Akshay Gupta <akshay.gupta@amd.com>
Date: Wed, 8 Mar 2023 13:49:06 +0000
Subject: [PATCH 1/1] apml_sbrmi: Wait for fops to complete cleanly on device
 unbind

- This patch modifies the misc fops to wait for clean removal
  of device in case of device unbind

Signed-off-by: Akshay Gupta <akshay.gupta@amd.com>
Signed-off-by: Naveen Krishna Chatradhi <nchatrad@amd.com>
---
 drivers/misc/amd-apml/sbrmi-common.c |  10 --
 drivers/misc/amd-apml/sbrmi-common.h |   7 ++
 drivers/misc/amd-apml/sbrmi.c        | 132 +++++++++++++++++++++------
 3 files changed, 113 insertions(+), 36 deletions(-)

diff --git a/drivers/misc/amd-apml/sbrmi-common.c b/drivers/misc/amd-apml/sbrmi-common.c
index e53293c2aab8..4840ec02e6da 100644
--- a/drivers/misc/amd-apml/sbrmi-common.c
+++ b/drivers/misc/amd-apml/sbrmi-common.c
@@ -160,16 +160,13 @@ int rmi_mca_msr_read(struct apml_sbrmi_device *rmi_dev,
 		thread -= 128;
 		val = 1;
 	}
-	mutex_lock(&rmi_dev->lock);
 	ret = regmap_write(rmi_dev->regmap, SBRMI_THREAD128CS, val);
 	if (ret < 0)
 		goto exit_unlock;
-	mutex_unlock(&rmi_dev->lock);

 	prepare_mca_msr_input_message(input, thread,
 				      msg->data_in.mb_in[RD_WR_DATA_INDEX]);

-	mutex_lock(&rmi_dev->lock);
 	ret = regmap_bulk_write(rmi_dev->regmap, CPUID_MCA_CMD,
 				&input, MSR_WR_REG_LEN);
 	if (ret < 0)
@@ -201,7 +198,6 @@ int rmi_mca_msr_read(struct apml_sbrmi_device *rmi_dev,
 	msg->data_out.cpu_msr_out = output.value;

 exit_unlock:
-	mutex_unlock(&rmi_dev->lock);
 	return ret;
 }

@@ -231,17 +227,14 @@ int rmi_cpuid_read(struct apml_sbrmi_device *rmi_dev,
 		thread -= 128;
 		val = 1;
 	}
-	mutex_lock(&rmi_dev->lock);
 	ret = regmap_write(rmi_dev->regmap, SBRMI_THREAD128CS, val);
 	if (ret < 0)
 		goto exit_unlock;
-	mutex_unlock(&rmi_dev->lock);

 	prepare_cpuid_input_message(input, thread,
 				    msg->data_in.mb_in[RD_WR_DATA_INDEX],
 				    msg->data_in.reg_in[EXT_FUNC_INDEX]);

-	mutex_lock(&rmi_dev->lock);
 	ret = regmap_bulk_write(rmi_dev->regmap, CPUID_MCA_CMD,
 				&input, CPUID_WR_REG_LEN);
 	if (ret < 0)
@@ -272,7 +265,6 @@ int rmi_cpuid_read(struct apml_sbrmi_device *rmi_dev,
 	}
 	msg->data_out.cpu_msr_out = output.value;
 exit_unlock:
-	mutex_unlock(&rmi_dev->lock);
 	return ret;
 }

@@ -300,7 +292,6 @@ int rmi_mailbox_xfer(struct apml_sbrmi_device *rmi_dev,
 	int sw_status;
 	u8 byte = 0;

-	mutex_lock(&rmi_dev->lock);
 	msg->fw_ret_code = 0;

 	ret = esmi_oob_clear_status_alert(rmi_dev);
@@ -376,6 +367,5 @@ int rmi_mailbox_xfer(struct apml_sbrmi_device *rmi_dev,
 		msg->fw_ret_code = ec;
 	}
 exit_unlock:
-	mutex_unlock(&rmi_dev->lock);
 	return ret;
 }
diff --git a/drivers/misc/amd-apml/sbrmi-common.h b/drivers/misc/amd-apml/sbrmi-common.h
index 24c2ab354a75..1c9f0f3fdef5 100644
--- a/drivers/misc/amd-apml/sbrmi-common.h
+++ b/drivers/misc/amd-apml/sbrmi-common.h
@@ -10,11 +10,18 @@
 #include <uapi/linux/amd-apml.h>

 /* Each client has this additional data */
+/* in_progress: Variable is set if any transaction is in
+ * progress in IOCTL
+ * no_new_trans: Variable is set if rmmmod/unbind is called
+ */
 struct apml_sbrmi_device {
 	struct miscdevice sbrmi_misc_dev;
+	struct completion misc_fops_done;
 	struct regmap *regmap;
 	struct mutex lock;
 	u32 pwr_limit_max;
+	bool in_progress;
+	bool no_new_trans;
 	u8 rev;
 } __packed;

diff --git a/drivers/misc/amd-apml/sbrmi.c b/drivers/misc/amd-apml/sbrmi.c
index 2704a33eb8da..a9c44f6e7ed8 100644
--- a/drivers/misc/amd-apml/sbrmi.c
+++ b/drivers/misc/amd-apml/sbrmi.c
@@ -31,6 +31,7 @@
 #define DIMM_BASE_ID		(0x80)
 #define MAX_DIMM_COUNT		(12)
 #define DIMM_TEMP_OFFSET	(21)
+#define MAX_WAIT_TIME_SEC	(3)
 static u32 *dimm_id;

 enum sbrmi_msg_id {
@@ -66,6 +67,7 @@ static int sbrmi_read(struct device *dev, enum hwmon_sensor_types type,
 	if (type != hwmon_power && type != hwmon_temp)
 		return -EINVAL;

+	mutex_lock(&rmi_dev->lock);
 	msg.data_in.reg_in[RD_FLAG_INDEX] = 1;

 	switch (attr) {
@@ -79,28 +81,30 @@ static int sbrmi_read(struct device *dev, enum hwmon_sensor_types type,
 		break;
 	case hwmon_temp_input:
 		msg.cmd = SBRMI_READ_DIMM_THERMAL_SENSOR;
-		if (channel >= MAX_DIMM_COUNT)
-			return -EINVAL;
+		if (channel >= MAX_DIMM_COUNT) {
+			ret = -EINVAL;
+			goto out;
+		}
 		msg.data_in.mb_in[RD_WR_DATA_INDEX] = dimm_id[channel];
 		ret = rmi_mailbox_xfer(rmi_dev, &msg);
 		if (ret < 0)
-			return ret;
+			goto out;
 		break;
 	case hwmon_power_cap_max:
 		/* Cache maximum power limit */
 		if (!rmi_dev->pwr_limit_max) {
 			ret = sbrmi_get_max_pwr_limit(rmi_dev);
 			if (ret < 0)
-				return ret;
+				goto out;
 		}
 		msg.data_out.mb_out[RD_WR_DATA_INDEX] = rmi_dev->pwr_limit_max;
 		ret = 0;
 		break;
 	default:
-		return -EINVAL;
+		ret = -EINVAL;
 	}
 	if (ret < 0)
-		return ret;
+		goto out;
 	/* hwmon power attributes are in microWatt */
 	if (type == hwmon_power) //power sensor
 		*val = (long)msg.data_out.mb_out[RD_WR_DATA_INDEX] * 1000;
@@ -109,6 +113,8 @@ static int sbrmi_read(struct device *dev, enum hwmon_sensor_types type,
 	{
 		*val = (msg.data_out.mb_out[RD_WR_DATA_INDEX] >> DIMM_TEMP_OFFSET) * 1000;
 	}
+out:
+	mutex_unlock(&rmi_dev->lock);
 	return ret;
 }

@@ -117,6 +123,7 @@ static int sbrmi_write(struct device *dev, enum hwmon_sensor_types type,
 {
 	struct apml_sbrmi_device *rmi_dev = dev_get_drvdata(dev);
 	struct apml_message msg = { 0 };
+	int ret;

 	if (type != hwmon_power && attr != hwmon_power_cap)
 		return -EINVAL;
@@ -132,7 +139,10 @@ static int sbrmi_write(struct device *dev, enum hwmon_sensor_types type,
 	msg.data_in.mb_in[RD_WR_DATA_INDEX] = val;
 	msg.data_in.reg_in[RD_FLAG_INDEX] = 0;

-	return rmi_mailbox_xfer(rmi_dev, &msg);
+	mutex_lock(&rmi_dev->lock);
+	ret = rmi_mailbox_xfer(rmi_dev, &msg);
+	mutex_unlock(&rmi_dev->lock);
+	return ret;
 }

 static umode_t sbrmi_is_visible(const void *data,
@@ -201,56 +211,83 @@ static long sbrmi_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 	bool read = false;
 	int ret = -EFAULT;

-	if (copy_struct_from_user(&msg, sizeof(msg), arguser,
-				  sizeof(struct apml_message)))
-		return ret;
-
 	rmi_dev = container_of(fp->private_data, struct apml_sbrmi_device,
 			       sbrmi_misc_dev);
 	if (!rmi_dev)
 		return ret;

+	/*
+	 * If device remove/unbind is called do not allow new transaction
+	 * Tickets: https://ontrack-internal.amd.com/browse/PLAT-122500
+	 * 	    https://ontrack-internal.amd.com/browse/DCSM-154
+	 */
+	if (rmi_dev->no_new_trans)
+		return -EBUSY;
+
+	/* Copy the structure from user */
+	if (copy_struct_from_user(&msg, sizeof(msg), arguser,
+				  sizeof(struct apml_message)))
+		return ret;
+
+	/*
+	 * Only one I2C/I3C transaction can happen at
+	 * one time. Take lock across so no two protocol is
+	 * invoked at same time, modifying the register value.
+	 */
+	mutex_lock(&rmi_dev->lock);
+
+	/* Verify device unbind/remove is not invoked */
+	if (rmi_dev->no_new_trans) {
+		mutex_unlock(&rmi_dev->lock);
+		return -EBUSY;
+	}
 	/* Is this a read/monitor/get request */
 	if (msg.data_in.reg_in[RD_FLAG_INDEX])
 		read = true;
-
+	/*
+	 * Set the in_progress variable to true, to wait for
+	 * completion during unbind/remove of driver
+	 */
+	rmi_dev->in_progress = true;
 	switch (msg.cmd) {
 	case 0 ... 0x999:
+		/* Mailbox protocol */
 		ret = rmi_mailbox_xfer(rmi_dev, &msg);
-		if (ret && ret != -EPROTOTYPE)
-			return ret;
 		break;
 	case APML_CPUID:
+		/* CPUID protocol */
 		ret = rmi_cpuid_read(rmi_dev, &msg);
-		if (ret && ret != -EPROTOTYPE)
-			return ret;
 		break;
 	case APML_MCA_MSR:
+		/* MCAMSR protocol */
 		ret = rmi_mca_msr_read(rmi_dev, &msg);
-		if (ret && ret != -EPROTOTYPE)
-			return ret;
 		break;
 	case APML_REG:
+		/* REG R/W */
 		if (read) {
 			ret = regmap_read(rmi_dev->regmap,
 					  msg.data_in.reg_in[REG_OFF_INDEX],
 					  &msg.data_out.mb_out[RD_WR_DATA_INDEX]);
-			if (ret)
-				return ret;
 		} else {
-			return regmap_write(rmi_dev->regmap,
+			ret = regmap_write(rmi_dev->regmap,
 					    msg.data_in.reg_in[REG_OFF_INDEX],
 					    msg.data_in.reg_in[REG_VAL_INDEX]);
 		}
 		break;
 	default:
-		return ret;
+		break;
 	}

+	/* Send complete only if device is unbinded/remove */
+	if (rmi_dev->no_new_trans)
+		complete(&rmi_dev->misc_fops_done);
+	rmi_dev->in_progress = false;
+	mutex_unlock(&rmi_dev->lock);
+
 	/* Copy results back to user only for get/monitor commands and firmware failures */
-	if (read || ret == -EPROTOTYPE) {
+	if ((read && !ret) || ret == -EPROTOTYPE) {
 		if (copy_to_user(arguser, &msg, sizeof(struct apml_message)))
-			return -EFAULT;
+			ret = -EFAULT;
 	}
 	return ret;
 }
@@ -300,6 +337,9 @@ static int sbrmi_i2c_probe(struct i2c_client *client,
 	if (!rmi_dev)
 		return -ENOMEM;

+	rmi_dev->no_new_trans = false;
+	rmi_dev->in_progress = false;
+
 	mutex_init(&rmi_dev->lock);
 	rmi_dev->regmap = devm_regmap_init_i2c(client, &sbrmi_i2c_regmap_config);
 	if (IS_ERR(rmi_dev->regmap))
@@ -344,6 +384,7 @@ static int sbrmi_i2c_probe(struct i2c_client *client,
 	if (client->addr == SOCK_1_ADDR)
 		id = 1;

+	init_completion(&rmi_dev->misc_fops_done);
 	return create_misc_rmi_device(rmi_dev, dev, id);
 }

@@ -373,6 +414,8 @@ static int sbrmi_i3c_probe(struct i3c_device *i3cdev)
 		return -ENOMEM;

 	rmi_dev->regmap = regmap;
+	rmi_dev->no_new_trans = false;
+	rmi_dev->in_progress = false;
 	mutex_init(&rmi_dev->lock);

 	dev_set_drvdata(dev, (void *)rmi_dev);
@@ -412,6 +455,7 @@ static int sbrmi_i3c_probe(struct i3c_device *i3cdev)
 	if (i3cdev->desc->info.static_addr == SOCK_1_ADDR)
 		id = 1;

+	init_completion(&rmi_dev->misc_fops_done);
 	return create_misc_rmi_device(rmi_dev, dev, id);
 }

@@ -420,8 +464,26 @@ static int sbrmi_i2c_remove(struct i2c_client *client)
 	struct device *dev = &client->dev;
 	struct apml_sbrmi_device *rmi_dev = dev_get_drvdata(&client->dev);

-	if (rmi_dev)
+	if (rmi_dev) {
+		/*
+		 * Set the no_new_trans so no new transaction can
+		 * occur in sbrmi_ioctl
+		 */
+		rmi_dev->no_new_trans = true;
+		/*
+		 * If any transaction is in progress wait for the
+		 * transaction to get complete
+		 * Max wait is 3 sec for any pending transaction to
+		 * complete, https://ontrack-internal.amd.com/browse/DCSM-84
+		 */
+		if (rmi_dev->in_progress)
+			wait_for_completion_timeout(&rmi_dev->misc_fops_done,
+						    MAX_WAIT_TIME_SEC * HZ);
 		misc_deregister(&rmi_dev->sbrmi_misc_dev);
+		/* Assign fops and parent of misc dev to NULL */
+		rmi_dev->sbrmi_misc_dev.fops = NULL;
+		rmi_dev->sbrmi_misc_dev.parent = NULL;
+	}

 	if (dimm_id)
 		devm_kfree(dev, dimm_id);
@@ -435,8 +497,26 @@ static int sbrmi_i3c_remove(struct i3c_device *i3cdev)
 	struct device *dev = &i3cdev->dev;
 	struct apml_sbrmi_device *rmi_dev = dev_get_drvdata(&i3cdev->dev);

-	if (rmi_dev)
+	if (rmi_dev) {
+		/*
+		 * Set the no_new_trans so no new transaction can
+		 * occur in sbrmi_ioctl
+		 */
+		rmi_dev->no_new_trans = true;
+		/*
+		 * If any transaction is in progress wait for the
+		 * transaction to get complete
+		 * Max wait is 3 sec for any pending transaction to
+		 * complete, https://ontrack-internal.amd.com/browse/DCSM-84
+		 */
+		if (rmi_dev->in_progress)
+			wait_for_completion_timeout(&rmi_dev->misc_fops_done,
+						MAX_WAIT_TIME_SEC * HZ);
 		misc_deregister(&rmi_dev->sbrmi_misc_dev);
+		/* Assign fops and parent of misc dev to NULL */
+		rmi_dev->sbrmi_misc_dev.fops = NULL;
+		rmi_dev->sbrmi_misc_dev.parent = NULL;
+	}

 	if (dimm_id)
 		devm_kfree(dev, dimm_id);
--
2.17.1

