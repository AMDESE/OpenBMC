From c26e1263cd50f4055c9565a44b5bd564caddfe27 Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Wed, 4 Jan 2023 23:53:41 -0600
Subject: [PATCH] drivers/hwmon: add aspeed-chassis driver

Added chassis intrusion driver

Signed-off-by: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
---
 arch/arm/boot/dts/aspeed-g6.dtsi |   7 +
 drivers/hwmon/Kconfig            |  10 ++
 drivers/hwmon/Makefile           |   1 +
 drivers/hwmon/aspeed-chassis.c   | 222 +++++++++++++++++++++++++++++++
 4 files changed, 240 insertions(+)
 create mode 100755 drivers/hwmon/aspeed-chassis.c

diff --git a/arch/arm/boot/dts/aspeed-g6.dtsi b/arch/arm/boot/dts/aspeed-g6.dtsi
index f5f3b03ffce8..24ca19a06881 100644
--- a/arch/arm/boot/dts/aspeed-g6.dtsi
+++ b/arch/arm/boot/dts/aspeed-g6.dtsi
@@ -363,6 +363,13 @@
 				quality = <100>;
 			};

+			chassis: chassis@1e6ef010 {
+				compatible = "aspeed,ast2600-chassis";
+				reg = <0x1e6ef010 0x4>;
+				interrupts = <GIC_SPI 149 IRQ_TYPE_LEVEL_HIGH>;
+				status = "disabled";
+			};
+
 			pcie_ep:pcie_ep@1e6ed000 {
 				compatible = "aspeed,ast2600-pcie-ep", "syscon";
 				reg = <0x1e6ed000 0x100>;
diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index b0aef089cec8..35cc3910c12e 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -400,6 +400,16 @@ config SENSORS_ASPEED
 	  This driver can also be built as a module. If so, the module
 	  will be called aspeed_pwm_tacho.

+config SENSORS_ASPEED_CHASSIS
+	tristate "ASPEED CHASSIS Driver"
+	depends on ARCH_ASPEED || COMPILE_TEST
+	help
+	  This driver provides support for Aspeed ast2600 chassis intruded
+	  detect support.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called aspeed-chassis.
+
 config SENSORS_ATXP1
 	tristate "Attansic ATXP1 VID controller"
 	depends on I2C
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index f6874e76ee93..bb3cf72b884e 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -52,6 +52,7 @@ obj-$(CONFIG_SENSORS_ARM_SCPI)	+= scpi-hwmon.o
 obj-$(CONFIG_SENSORS_AS370)	+= as370-hwmon.o
 obj-$(CONFIG_SENSORS_ASC7621)	+= asc7621.o
 obj-$(CONFIG_SENSORS_ASPEED)	+= aspeed-pwm-tacho.o
+obj-$(CONFIG_SENSORS_ASPEED_CHASSIS) += aspeed-chassis.o
 obj-$(CONFIG_SENSORS_ATXP1)	+= atxp1.o
 obj-$(CONFIG_SENSORS_AXI_FAN_CONTROL) += axi-fan-control.o
 obj-$(CONFIG_SENSORS_BT1_PVT)	+= bt1-pvt.o
diff --git a/drivers/hwmon/aspeed-chassis.c b/drivers/hwmon/aspeed-chassis.c
new file mode 100755
index 000000000000..6f0e98f5b1e6
--- /dev/null
+++ b/drivers/hwmon/aspeed-chassis.c
@@ -0,0 +1,222 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright (C) 2021 ASPEED Technology Inc.
+ *
+ * CHASSIS driver for the Aspeed SoC
+ */
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_platform.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/sysfs.h>
+#include <linux/interrupt.h>
+
+//#define USE_INTERRUPTS
+/******************************************************************************/
+union chassis_ctrl_register {
+	uint32_t value;
+	struct {
+		uint32_t intrusion_status_clear : 1; /*[0]*/
+		uint32_t intrusion_int_enable : 1; /*[1]*/
+		uint32_t intrusion_status : 1; /*[2]*/
+		uint32_t battery_power_good : 1; /*[3]*/
+		uint32_t chassis_raw_status : 1; /*[4]*/
+		uint32_t reserved0 : 3; /*[5-7]*/
+		uint32_t io_power_status_clear : 1; /*[8]*/
+		uint32_t io_power_int_enable : 1; /*[9]*/
+		uint32_t core_power_status : 1; /*[10]*/
+		uint32_t reserved1 : 5; /*[11-15]*/
+		uint32_t core_power_status_clear : 1; /*[16]*/
+		uint32_t core_power_int_enable : 1; /*[17]*/
+		uint32_t io_power_status : 1; /*[18]*/
+		uint32_t reserved2 : 13; /*[19-31]*/
+	} fields;
+};
+
+struct aspeed_chassis {
+	struct device *dev;
+	void __iomem *base;
+	int irq;
+	/* for hwmon */
+	const struct attribute_group *groups[2];
+};
+
+static ssize_t
+intrusion_store(struct device *dev, struct device_attribute *attr,
+		       const char *buf, size_t count)
+{
+	unsigned long val;
+	struct aspeed_chassis *chassis = dev_get_drvdata(dev);
+	union chassis_ctrl_register chassis_ctrl;
+
+	if (kstrtoul(buf, 10, &val) < 0 || val != 0)
+		return -EINVAL;
+
+	chassis_ctrl.value = readl(chassis->base);
+	chassis_ctrl.fields.intrusion_status_clear = 1;
+	writel(chassis_ctrl.value, chassis->base);
+	chassis_ctrl.fields.intrusion_status_clear = 0;
+	writel(chassis_ctrl.value, chassis->base);
+	return count;
+}
+
+static ssize_t intrusion_show(struct device *dev, struct device_attribute *attr,
+			  char *buf)
+{
+	struct sensor_device_attribute *sensor_attr = to_sensor_dev_attr(attr);
+	int index = sensor_attr->index;
+	struct aspeed_chassis *chassis = dev_get_drvdata(dev);
+	union chassis_ctrl_register chassis_ctrl;
+	uint8_t ret;
+
+	chassis_ctrl.value = readl(chassis->base);
+
+	switch (index) {
+	case 0:
+		ret = chassis_ctrl.fields.core_power_status;
+		break;
+	case 1:
+		ret = chassis_ctrl.fields.io_power_status;
+		break;
+	case 2:
+		ret = chassis_ctrl.fields.intrusion_status;
+		break;
+	}
+
+	return sprintf(buf, "%d\n", ret);
+}
+
+static SENSOR_DEVICE_ATTR_RO(core_power, intrusion, 0);
+static SENSOR_DEVICE_ATTR_RO(io_power, intrusion, 1);
+static SENSOR_DEVICE_ATTR_RW(intrusion0_alarm, intrusion, 2);
+
+static struct attribute *intrusion_dev_attrs[] = {
+	&sensor_dev_attr_core_power.dev_attr.attr,
+	&sensor_dev_attr_io_power.dev_attr.attr,
+	&sensor_dev_attr_intrusion0_alarm.dev_attr.attr, NULL
+};
+
+static const struct attribute_group intrusion_dev_group = {
+	.attrs = intrusion_dev_attrs,
+	.is_visible = NULL,
+};
+
+static void aspeed_chassis_status_check(struct aspeed_chassis *chassis)
+{
+	union chassis_ctrl_register chassis_ctrl;
+
+	chassis_ctrl.value = readl(chassis->base);
+	if (chassis_ctrl.fields.intrusion_status) {
+		dev_info(chassis->dev, "CHASI# pin has been pulled low");
+		chassis_ctrl.fields.intrusion_status_clear = 1;
+		writel(chassis_ctrl.value, chassis->base);
+		chassis_ctrl.fields.intrusion_status_clear = 0;
+		writel(chassis_ctrl.value, chassis->base);
+	}
+
+	if (chassis_ctrl.fields.core_power_status) {
+		dev_info(chassis->dev, "Core power has been pulled low");
+		chassis_ctrl.fields.core_power_status_clear = 1;
+		writel(chassis_ctrl.value, chassis->base);
+		chassis_ctrl.fields.core_power_status_clear = 0;
+		writel(chassis_ctrl.value, chassis->base);
+	}
+
+	if (chassis_ctrl.fields.io_power_status) {
+		dev_info(chassis->dev, "IO power has been pulled low");
+		chassis_ctrl.fields.io_power_status_clear = 1;
+		writel(chassis_ctrl.value, chassis->base);
+		chassis_ctrl.fields.io_power_status_clear = 0;
+		writel(chassis_ctrl.value, chassis->base);
+	}
+}
+
+static irqreturn_t aspeed_chassis_isr(int this_irq, void *dev_id)
+{
+	struct aspeed_chassis *chassis = dev_id;
+
+	aspeed_chassis_status_check(chassis);
+	return IRQ_HANDLED;
+}
+
+#ifdef USE_INTERRUPTS
+static void aspeed_chassis_int_ctrl(struct aspeed_chassis *chassis, bool ctrl)
+{
+	union chassis_ctrl_register chassis_ctrl;
+
+	chassis_ctrl.value = readl(chassis->base);
+	chassis_ctrl.fields.intrusion_int_enable = ctrl;
+	chassis_ctrl.fields.io_power_int_enable = ctrl;
+	chassis_ctrl.fields.core_power_int_enable = ctrl;
+	writel(chassis_ctrl.value, chassis->base);
+}
+#endif
+
+static const struct of_device_id aspeed_chassis_of_table[] = {
+	{ .compatible = "aspeed,ast2600-chassis" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, aspeed_chassis_of_table);
+
+static int aspeed_chassis_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct aspeed_chassis *priv;
+	struct device *hwmon;
+	int ret;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	priv->dev = dev;
+	priv->base = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(priv->base))
+		return PTR_ERR(priv->base);
+
+	priv->irq = platform_get_irq(pdev, 0);
+	if (priv->irq < 0) {
+		dev_err(dev, "no irq specified\n");
+		ret = -ENOENT;
+		return ret;
+	}
+
+	ret = devm_request_irq(dev, priv->irq, aspeed_chassis_isr, 0,
+			       dev_name(dev), priv);
+	if (ret) {
+		dev_err(dev, "Chassis Unable to get IRQ");
+		return ret;
+	}
+#ifdef USE_INTERRUPTS
+	aspeed_chassis_int_ctrl(priv, true);
+#endif
+
+	priv->groups[0] = &intrusion_dev_group;
+	priv->groups[1] = NULL;
+
+	hwmon = devm_hwmon_device_register_with_groups(dev, "aspeed_chassis",
+						       priv, priv->groups);
+
+	return PTR_ERR_OR_ZERO(hwmon);
+}
+
+static struct platform_driver aspeed_chassis_driver = {
+	.probe		= aspeed_chassis_probe,
+	.driver		= {
+		.name	= KBUILD_MODNAME,
+		.of_match_table = aspeed_chassis_of_table,
+	},
+};
+
+module_platform_driver(aspeed_chassis_driver);
+
+MODULE_AUTHOR("Billy Tsai<billy_tsai@aspeedtech.com>");
+MODULE_DESCRIPTION("ASPEED CHASSIS Driver");
+MODULE_LICENSE("GPL v2");
+
--
2.17.1

