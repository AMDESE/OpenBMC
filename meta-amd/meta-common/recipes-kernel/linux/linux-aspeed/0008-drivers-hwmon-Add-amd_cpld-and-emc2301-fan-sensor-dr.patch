From cfdf6e41c892f944375910ccc17f213f5cf37862 Mon Sep 17 00:00:00 2001
From: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
Date: Wed, 9 Nov 2022 19:20:17 -0600
Subject: [PATCH 08/19] drivers/hwmon: Add amd_cpld and emc2301 fan sensor
 drivers
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

Adds amd_cpld and emc2301 drivers to support hwmon based fan sensors.

Signed-off-by: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
---
 drivers/hwmon/Kconfig    |  17 ++
 drivers/hwmon/Makefile   |   2 +
 drivers/hwmon/amd_cpld.c | 243 +++++++++++++++++
 drivers/hwmon/emc2301.c  | 574 +++++++++++++++++++++++++++++++++++++++
 4 files changed, 836 insertions(+)
 create mode 100644 drivers/hwmon/amd_cpld.c
 create mode 100644 drivers/hwmon/emc2301.c

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index 91d287afa326..0e6bde49dce9 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -1611,6 +1611,15 @@ config SENSORS_EMC2103
 	  This driver can also be built as a module. If so, the module
 	  will be called emc2103.

+config SENSORS_EMC2301
+	tristate "SMSC EMC2301"
+	depends on I2C
+	help
+	  If you say yes here you get support for the temperature
+	  and fan sensors of the SMSC EMC2301 chips.
+	  This driver can also be built as a module. If so, the module
+	  will be called emc2301.
+
 config SENSORS_EMC6W201
 	tristate "SMSC EMC6W201"
 	depends on I2C
@@ -1621,6 +1630,14 @@ config SENSORS_EMC6W201
 	  This driver can also be built as a module. If so, the module
 	  will be called emc6w201.

+config SENSORS_AMD_CPLD_FANS
+	tristate "AMD CPLD FANS"
+	depends on I2C
+	help
+	  If you say yes here you get support for fan sensors of the AMD cpld fans.
+	  This driver can also be built as a module. If so, the module
+	  will be called amd_cpld_fans.
+
 config SENSORS_SMSC47M1
 	tristate "SMSC LPC47M10x and compatibles"
 	depends on !PPC
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index 5fcc3f859f1e..9f27a6915168 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -66,6 +66,7 @@ obj-$(CONFIG_SENSORS_DS620)	+= ds620.o
 obj-$(CONFIG_SENSORS_DS1621)	+= ds1621.o
 obj-$(CONFIG_SENSORS_EMC1403)	+= emc1403.o
 obj-$(CONFIG_SENSORS_EMC2103)	+= emc2103.o
+obj-$(CONFIG_SENSORS_EMC2301)	+= emc2301.o
 obj-$(CONFIG_SENSORS_EMC6W201)	+= emc6w201.o
 obj-$(CONFIG_SENSORS_F71805F)	+= f71805f.o
 obj-$(CONFIG_SENSORS_F71882FG)	+= f71882fg.o
@@ -177,6 +178,7 @@ obj-$(CONFIG_SENSORS_STTS751)	+= stts751.o
 obj-$(CONFIG_SENSORS_AMC6821)	+= amc6821.o
 obj-$(CONFIG_SENSORS_TC74)	+= tc74.o
 obj-$(CONFIG_SENSORS_THMC50)	+= thmc50.o
+obj-$(CONFIG_SENSORS_AMD_CPLD_FANS)	+= amd_cpld.o
 obj-$(CONFIG_SENSORS_TMP102)	+= tmp102.o
 obj-$(CONFIG_SENSORS_TMP103)	+= tmp103.o
 obj-$(CONFIG_SENSORS_TMP108)	+= tmp108.o
diff --git a/drivers/hwmon/amd_cpld.c b/drivers/hwmon/amd_cpld.c
new file mode 100644
index 000000000000..270e10a7a7cd
--- /dev/null
+++ b/drivers/hwmon/amd_cpld.c
@@ -0,0 +1,243 @@
+/*
+ * Driver for the AMD's CPLD based Fan controller
+ *
+ * Copyright (C) 2021 Advanced Micro Devices
+ * Author: Vinu Vaghasia <vinu.vaghasia@amd.com>
+ *
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/version.h>
+#include <linux/thermal.h>
+#include <linux/byteorder/little_endian.h>
+
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(5,2,0)
+#define HWMON_CHANNEL_INFO(stype, ...)  \
+    (&(struct hwmon_channel_info) { \
+        .type     = hwmon_##stype,  \
+        .config =     (u32 []) {    \
+            __VA_ARGS__,       0  \
+        }               \
+    })
+#endif
+
+#define AMD_CPLD_REG_FAN_PWM(n)         (0X18 + n)
+#define AMD_CPLD_REG_FAN_RPM_H(n)       (0X20 + (2*n))
+
+#define AMD_CPLD_NUM_OF_FANS            12
+#define RPM_MULTIPLIER					(100)
+
+static bool register_cdev = 1;
+module_param(register_cdev, bool, 0);
+
+struct amd_cpld_data {
+    struct device *dev;
+    struct i2c_client *i2c;
+    u8 num_fans;
+};
+
+static int amd_cpld_set_pwm_input(struct amd_cpld_data *devdata, int channel, long val)
+{
+    i2c_smbus_write_byte_data(devdata->i2c, AMD_CPLD_REG_FAN_PWM(channel), val);
+
+    return   0;
+}
+
+static int amd_cpld_read_pwm_input(struct amd_cpld_data *devdata, int channel, long *val)
+{
+    *val =   i2c_smbus_read_byte_data(devdata->i2c, AMD_CPLD_REG_FAN_PWM(channel));
+
+    return   0;
+}
+
+static int amd_cpld_read_fan_rpm(struct amd_cpld_data *devdata, int channel, long *val)
+{
+    u16 fan_rpm;
+
+	fan_rpm = i2c_smbus_read_word_data(devdata->i2c, AMD_CPLD_REG_FAN_RPM_H(channel));
+	/* swap bytes */
+	fan_rpm = __cpu_to_be16(fan_rpm);
+
+    *val = fan_rpm * RPM_MULTIPLIER;
+
+    return   0;
+}
+
+static int amd_cpld_read(struct device *dev, enum hwmon_sensor_types type,
+                        u32 attr,     int channel, long *val)
+{
+    struct   amd_cpld_data *data = dev_get_drvdata(dev);
+    if   (channel > data->num_fans)
+    {
+        return -ENOTSUPP;
+    }
+
+    switch   (type) {
+        case hwmon_fan :
+            switch(attr)       {
+                case hwmon_fan_input:
+                    return   amd_cpld_read_fan_rpm(data, channel, val);
+                default:
+                    return   -ENOTSUPP;
+                break;
+            }
+        case hwmon_pwm :
+            switch(attr)       {
+                case hwmon_pwm_input:
+                    return   amd_cpld_read_pwm_input(data, channel, val);
+                default:
+                    return   -ENOTSUPP;
+                break;
+            }
+    }
+    return   0;
+}
+
+static int amd_cpld_write(struct device *dev, enum hwmon_sensor_types type,
+                         u32 attr, int channel, long val)
+{
+    struct   amd_cpld_data *data = dev_get_drvdata(dev);
+
+    if (channel > data->num_fans)
+    {
+        return -EINVAL;
+    }
+
+    switch (type)
+    {
+        case hwmon_pwm:
+            switch (attr)
+            {
+                case hwmon_pwm_input:
+                    return   amd_cpld_set_pwm_input(data, channel, val);
+                default:
+                    return   -EOPNOTSUPP;
+            }
+        default:
+            return -EOPNOTSUPP;
+            break;
+    }
+    return   -EOPNOTSUPP;
+}
+
+static const struct hwmon_channel_info *amd_cpld_info[] = {
+    HWMON_CHANNEL_INFO(fan,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT,
+        HWMON_F_INPUT),
+    HWMON_CHANNEL_INFO(pwm,
+        HWMON_PWM_INPUT,
+        HWMON_PWM_INPUT,
+        HWMON_PWM_INPUT,
+        HWMON_PWM_INPUT,
+        HWMON_PWM_INPUT,
+        HWMON_PWM_INPUT),
+    NULL
+};
+
+static umode_t amd_cpld_is_visible(const void *drvdata, enum hwmon_sensor_types type, u32 attr, int channel)
+{
+    switch   (type)
+    {
+    case hwmon_fan:
+        switch (attr)
+        {
+        case hwmon_fan_input:
+            return S_IRUGO;
+        default:
+            break;
+        }
+        break;
+
+    case hwmon_pwm:
+        switch (attr)
+        {
+        case hwmon_pwm_input:
+            return S_IRUGO|S_IWUSR;
+        default:
+            break;
+        }
+        break;
+    default:
+        break;
+    }
+    return   0;
+}
+
+static const struct hwmon_ops amd_cpld_ops = {
+    .is_visible = amd_cpld_is_visible,
+    .read = amd_cpld_read,
+    .write   = amd_cpld_write,
+};
+
+static const struct hwmon_chip_info amd_cpld_chip_info = {
+    .ops =   &amd_cpld_ops,
+    .info = amd_cpld_info,
+};
+
+static int amd_cpld_i2c_probe (struct i2c_client *i2c,
+                 const struct i2c_device_id *id)
+{
+    struct   device *hwmon_dev;
+    struct   amd_cpld_data *data;
+
+    if   (!i2c_check_functionality(i2c->adapter, I2C_FUNC_SMBUS_BYTE_DATA |
+                     I2C_FUNC_SMBUS_WORD_DATA))
+        return -ENODEV;
+
+    data =   devm_kzalloc(&i2c->dev, sizeof(struct amd_cpld_data), GFP_KERNEL);
+    if   (unlikely(!data))
+        return -ENODEV;
+
+    data->dev = &i2c->dev;
+    data->i2c = i2c;
+
+    data->num_fans = AMD_CPLD_NUM_OF_FANS;
+
+    hwmon_dev = devm_hwmon_device_register_with_info(&i2c->dev,
+        i2c->name, data, &amd_cpld_chip_info, NULL );
+
+    if   (IS_ERR(hwmon_dev))
+        return PTR_ERR(hwmon_dev);
+
+    dev_info(&i2c->dev, "%s: sensor '%s'\n", dev_name(hwmon_dev), i2c->name);
+
+    return   PTR_ERR_OR_ZERO(hwmon_dev);
+}
+
+static const struct i2c_device_id amd_cpld_i2c_id[] = {
+    { "amd_cpld", 0   },
+    {}
+};
+
+MODULE_DEVICE_TABLE(i2c, amd_cpld_i2c_id);
+
+static struct i2c_driver amd_cpld_i2c_driver = {
+    .driver = {
+        .name     = "amd_cpld",
+    },
+    .probe      = amd_cpld_i2c_probe,
+    .id_table = amd_cpld_i2c_id,
+};
+
+module_i2c_driver(amd_cpld_i2c_driver);
+
+MODULE_DESCRIPTION("AMD's CPLD Fan controller driver");
+MODULE_AUTHOR("Vinu Vaghasia <vinu.vaghasia@amd.com>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/hwmon/emc2301.c b/drivers/hwmon/emc2301.c
new file mode 100644
index 000000000000..82f1c0b1e748
--- /dev/null
+++ b/drivers/hwmon/emc2301.c
@@ -0,0 +1,574 @@
+/*
+ * Driver for the Microchip/SMSC EMC2301 Fan controller
+ *
+ * Copyright (C) 2018-2020 Traverse Technologies
+ * Author: Mathew McBride <matt@traverse.com.au>
+ *
+ * Based in part on an earlier implementation by
+ * Reinhard Pfau <pfau@gdsys.de>
+ *
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/version.h>
+#include <linux/thermal.h>
+
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(5,2,0)
+#define HWMON_CHANNEL_INFO(stype, ...)  \
+    (&(struct hwmon_channel_info) { \
+        .type     = hwmon_##stype,  \
+        .config =     (u32 []) {    \
+            __VA_ARGS__,       0  \
+        }               \
+    })
+#endif
+
+/*
+ * Factor by equations [2] and [3] from data sheet; valid for fans where the
+ * number of edges equals (poles * 2 + 1).
+ */
+#define FAN_RPM_FACTOR 3932160
+
+#define TACH_HIGH_MASK  GENMASK(12,5)
+#define TACH_LOW_MASK   GENMASK(4,0)
+
+#define EMC230X_REG_PRODUCT_ID 0xFD
+#define EMC230X_MAX_COOLING_STATE 7
+
+#define FAN_MINIMUM       0x0
+#define FAN_MAXIMUM       0xFF
+#define FAN_RPM_MODE      0xAB
+#define FAN_PWM_MODE      0x2B
+#define FAN_FAULT_STATUS  0x07
+
+#define EMC2305_REG_FAN_DRIVE(n)     (0x30  + 0x10   * n)
+#define EMC2305_REG_FAN_MIN_DRIVE(n) (0x38 + 0x10 * n)
+#define EMC2305_REG_FAN_TACH(n)      (0x3E   + 0x10 * n)
+#define EMC2305_REG_FAN_CONF(n)      (0x32   + 0x10 * n)
+#define EMC2305_REG_FAN_H_RPM(n)     (0x3D  + 0x10   * n)
+#define EMC2305_REG_FAN_L_RPM(n)     (0x3C  + 0x10   * n)
+#define EMC230X_REG_MINTACH(n)       (0x38  + 0x10 *    n)
+
+#define EMC2305_REG_FAN_STATUS   0x24
+
+static bool register_cdev = 1;
+module_param(register_cdev, bool, 0);
+MODULE_PARM_DESC(register_cdev, "Set to zero to disable registering a cooling device");
+
+struct emc2301_data {
+    struct   device *dev;
+    struct   i2c_client *i2c;
+    u8   num_fans;
+    u16 minimum_rpm[5];
+    struct   thermal_cooling_device *cdev;
+
+    u8   current_cooling_state;
+    u16 cooling_step[5];
+    u16 min_rpm[5];
+    u16 max_rpm[5];
+    u16 setpoint[5];
+};
+
+static u16 emc2301_read_fan_tach_int(struct emc2301_data *data, int channel)
+{
+    struct   i2c_client *i2c = data->i2c;
+
+    u8   channel_reg;
+    u8   channel_high, channel_low;
+    u16 channel_combined;
+
+    channel_high =   i2c_smbus_read_byte_data(i2c, EMC2305_REG_FAN_TACH(channel));
+
+    channel_low = i2c_smbus_read_byte_data(i2c, EMC2305_REG_FAN_TACH(channel) + 0x01);
+    channel_combined =   ((u16)channel_high << 5) | (channel_low >> 3);
+
+    return   channel_combined;
+}
+
+static u16 emc2301_read_fan_tach(struct device *dev, int channel)
+{
+    struct   emc2301_data *data = dev_get_drvdata(dev);
+    return   emc2301_read_fan_tach_int(data, channel);
+}
+
+static int emc2301_set_pwm_input(struct emc2301_data *devdata, int channel, long val)
+{
+    i2c_smbus_write_byte_data(devdata->i2c, EMC2305_REG_FAN_DRIVE(channel), val);
+
+    return   0;
+}
+
+
+static int emc2301_set_pwm_enable(struct emc2301_data *devdata, int channel, long val)
+{
+    if   ( val == 1 )
+        i2c_smbus_write_byte_data(devdata->i2c, EMC2305_REG_FAN_CONF(channel), FAN_RPM_MODE);
+    else
+         i2c_smbus_write_byte_data(devdata->i2c, EMC2305_REG_FAN_CONF(channel), FAN_PWM_MODE);
+
+    return   0;
+}
+
+
+static int emc2301_read_pwm_input(struct emc2301_data *devdata, int channel, long *val)
+{
+    *val =   i2c_smbus_read_byte_data(devdata->i2c, EMC2305_REG_FAN_DRIVE(channel));
+
+    return   0;
+}
+
+static int emc2301_read_pwm_enable(struct emc2301_data *devdata, int channel, long *val)
+{
+    u16 pwm_enable;
+
+    pwm_enable   = i2c_smbus_read_byte_data(devdata->i2c, EMC2305_REG_FAN_CONF(channel));
+
+    if   (pwm_enable == FAN_RPM_MODE)
+        *val = 1;
+    else
+        *     val = 0;
+
+    return   0;
+}
+
+static int emc2301_read_fan_rpm(struct device *dev, int channel, long *val)
+{
+    u16 channel_tach;
+    u16 fan_rpm;
+
+    channel_tach =   emc2301_read_fan_tach(dev, channel);
+
+    fan_rpm = (FAN_RPM_FACTOR * 2)   / channel_tach;
+
+    /* if the Fan is off or  pwm<25 then fan_tach will report 960 rpm by default
+    *  so, it should reprot 0 rpm to upper layer
+    */
+    if (fan_rpm <= 960)
+        *val = 0;
+    else
+        *val =   fan_rpm;
+
+    return   0;
+}
+
+/* Write a target RPM to the TACH target register
+ * This requires RPM speed control to be enabled with
+ * EN_ALGO in the fan configuration register.
+ */
+static int emc2301_set_fan_rpm(struct emc2301_data *devdata,
+                               int channel, long       target_rpm)
+{
+    long rpm_high,   rpm_low;
+    long target_tach;
+
+    target_tach = (FAN_RPM_FACTOR * 2)   / target_rpm;
+
+    rpm_high =   (target_tach & TACH_HIGH_MASK) >> 5;
+    rpm_low = (target_tach   & TACH_LOW_MASK);
+
+    i2c_smbus_write_byte_data(devdata->i2c, EMC2305_REG_FAN_L_RPM(channel), rpm_low);
+    i2c_smbus_write_byte_data(devdata->i2c, EMC2305_REG_FAN_H_RPM(channel), rpm_high);
+
+    devdata->setpoint[channel]   = (u16)target_rpm;
+
+    return   0;
+}
+
+static int emc2301_fan_get_max_state(struct thermal_cooling_device *cdev,
+                                     unsigned long   *state)
+{
+    *state   = EMC230X_MAX_COOLING_STATE;
+    return   0;
+}
+
+static int emc2301_fan_get_cur_state(struct thermal_cooling_device *cdev,
+                                     unsigned long   *state)
+{
+    struct   emc2301_data *devdata = cdev->devdata;
+    *state   = devdata->current_cooling_state;
+
+    return   0;
+}
+
+static int emc2301_fan_set_cur_state(struct thermal_cooling_device *cdev,
+                                     unsigned long   state)
+{
+    struct   emc2301_data *devdata = cdev->devdata;
+    struct   device *dev = devdata->dev;
+
+    u16 rpm = 0;
+    int i=0;
+    int retval   = 0;
+
+    dev_dbg(dev, "emc2301_fan_set_cur_state %ld\n", state);
+
+    if   (devdata->i2c == NULL) {
+        dev_err(dev, "ERROR: no i2c instance\n");
+        return -EINVAL;
+    }
+
+    if   (state < 0 || state > EMC230X_MAX_COOLING_STATE)
+        return -EINVAL;
+
+    for(i=0; i<ARRAY_SIZE(devdata->cooling_step); i++)   {
+        if (devdata->cooling_step[i] > 0)     {
+            rpm = devdata->min_rpm[i] + ((state + 1)       * devdata->cooling_step[i]);
+            devdata->current_cooling_state =       state;
+            if(emc2301_set_fan_rpm(devdata, i, rpm))       {
+                retval = 1;
+            }
+        }
+    }
+
+    return   retval;
+}
+
+struct thermal_cooling_device_ops emc2301_thermal_cooling_device = {
+    .get_max_state   = emc2301_fan_get_max_state,
+    .get_cur_state   = emc2301_fan_get_cur_state,
+    .set_cur_state   = emc2301_fan_set_cur_state,
+};
+
+static int
+emc2301_read_fan_fault(struct device * dev, struct i2c_client *i2c, int channel, long *val)
+{
+    u8   status_reg;
+
+    if   (channel > 1) {
+        return -EOPNOTSUPP;
+    }
+
+    status_reg   = i2c_smbus_read_byte_data(i2c, EMC2305_REG_FAN_STATUS);
+
+    if   (status_reg & FAN_FAULT_STATUS) {
+        *val = 1;
+    } else   {
+        *val = 0;
+    }
+
+    return   0;
+}
+
+static int emc2301_read_fan_target(struct emc2301_data *devdata, int channel, long *val) {
+    if   (channel > devdata->num_fans) {
+        return -EINVAL;
+    }
+    *val =   devdata->setpoint[channel];
+    return   0;
+}
+
+static int emc2301_read(struct device *dev, enum hwmon_sensor_types type,
+                        u32 attr,     int channel, long *val)
+{
+    struct   emc2301_data *data = dev_get_drvdata(dev);
+    struct   i2c_client *i2c = data->i2c;
+
+    if   (channel > data->num_fans)
+    {
+        return -ENOTSUPP;
+    }
+
+    switch   (type) {
+        case hwmon_fan :
+            switch(attr)       {
+                case hwmon_fan_input:
+                    return   emc2301_read_fan_rpm(dev, channel, val);
+                case hwmon_fan_target:
+                    return   emc2301_read_fan_target(data, channel, val);
+                case hwmon_fan_fault:
+                    return   emc2301_read_fan_fault(dev, i2c, channel, val);
+                default:
+                    return   -ENOTSUPP;
+                break;
+            }
+        case hwmon_pwm :
+            switch(attr)       {
+                case hwmon_pwm_input:
+                    return   emc2301_read_pwm_input(data, channel, val);
+                case hwmon_pwm_enable:
+                    return   emc2301_read_pwm_enable(data, channel, val);
+                default:
+                    return   -ENOTSUPP;
+                break;
+            }
+    }
+    return   0;
+}
+
+static int emc2301_write(struct device *dev, enum hwmon_sensor_types type,
+                         u32 attr, int channel, long val)
+{
+    struct   emc2301_data *data = dev_get_drvdata(dev);
+
+    if   (channel > data->num_fans)
+        return -EINVAL;
+
+
+    switch   (type)
+    {
+        case hwmon_fan:
+            switch (attr)
+            {
+                case hwmon_fan_target:
+                    return   emc2301_set_fan_rpm(data, channel, val);
+                default:
+                    return   -EOPNOTSUPP;
+            }
+        case hwmon_pwm:
+            switch (attr)
+            {
+                case hwmon_pwm_input:
+                    return   emc2301_set_pwm_input(data, channel, val);
+                case hwmon_pwm_enable:
+                    return   emc2301_set_pwm_enable(data, channel, val);
+                default:
+                    return   -EOPNOTSUPP;
+            }
+        default:
+            return -EOPNOTSUPP;
+            break;
+    }
+    return   -EOPNOTSUPP;
+}
+
+static const struct hwmon_channel_info *emc2301_info[] = {
+    HWMON_CHANNEL_INFO(fan,
+        HWMON_F_INPUT | HWMON_F_TARGET,
+        HWMON_F_INPUT | HWMON_F_TARGET,
+        HWMON_F_INPUT | HWMON_F_TARGET,
+        HWMON_F_INPUT | HWMON_F_TARGET,
+        HWMON_F_INPUT | HWMON_F_TARGET),
+    HWMON_CHANNEL_INFO(pwm,
+        HWMON_PWM_INPUT | HWMON_PWM_ENABLE,
+        HWMON_PWM_INPUT | HWMON_PWM_ENABLE,
+        HWMON_PWM_INPUT | HWMON_PWM_ENABLE,
+        HWMON_PWM_INPUT | HWMON_PWM_ENABLE,
+        HWMON_PWM_INPUT | HWMON_PWM_ENABLE),
+    NULL
+};
+
+static umode_t emc2301_is_visible(const void *drvdata, enum hwmon_sensor_types type, u32 attr, int channel)
+{
+    switch   (type)
+    {
+    case hwmon_fan:
+        switch (attr)
+        {
+        case hwmon_fan_input:
+            return S_IRUGO;
+        case hwmon_fan_target:
+            return S_IRUGO|S_IWUSR;
+        default:
+            break;
+        }
+        break;
+
+    case hwmon_pwm:
+        switch (attr)
+        {
+        case hwmon_pwm_input:
+        case hwmon_pwm_enable:
+            return S_IRUGO|S_IWUSR;
+        default:
+            break;
+        }
+        break;
+    default:
+        break;
+    }
+    return   0;
+}
+
+static const struct hwmon_ops emc2301_ops = {
+    .is_visible = emc2301_is_visible,
+    .read = emc2301_read,
+    .write   = emc2301_write,
+};
+
+static const struct hwmon_chip_info emc2301_chip_info = {
+    .ops =   &emc2301_ops,
+    .info = emc2301_info,
+};
+
+static int emc2301_enable_rpm_control(struct emc2301_data *data, u16 fan_dev, bool enable) {
+    u8   fan_config_reg_addr;
+    u8   fan_config_reg_val;
+    int ret = 0;
+
+    fan_config_reg_addr = EMC2305_REG_FAN_CONF(fan_dev);
+
+    fan_config_reg_val   = i2c_smbus_read_byte_data(data->i2c, fan_config_reg_addr);
+    if   (enable) {
+        fan_config_reg_val |=     (1<<7);
+    } else   {
+        fan_config_reg_val &=     ~(1<<7);
+    }
+
+    dev_dbg(data->dev,   "Writing 0x%02X to 0x%02X\n", fan_config_reg_val, fan_config_reg_addr);
+
+    ret = i2c_smbus_write_byte_data(data->i2c,   fan_config_reg_addr, fan_config_reg_val);
+    if   (ret) {
+        dev_err(data->dev, "Unable to     write fan configuration register %02X\n", fan_config_reg_addr);
+        return ret;
+    }
+
+    if   (!enable) {
+        ret =     i2c_smbus_write_byte_data(data->i2c, EMC2305_REG_FAN_DRIVE(fan_dev), FAN_MAXIMUM);
+    }
+    return   ret;
+};
+
+static int emc2301_i2c_probe (struct i2c_client *i2c,
+                 const struct i2c_device_id *id)
+{
+    struct   device *hwmon_dev;
+    struct   device_node *of_node = i2c->dev.of_node;
+    struct   device_node *child_node;
+    struct   emc2301_data *data;
+    int8_t   regval;
+    u8   i, retval;
+    u16 chan_val;
+    u16 range;
+    bool has_cooling_step = false;
+    int numchildren = 0;
+
+    if   (!i2c_check_functionality(i2c->adapter, I2C_FUNC_SMBUS_BYTE_DATA |
+                     I2C_FUNC_SMBUS_WORD_DATA))
+        return -ENODEV;
+
+    data =   devm_kzalloc(&i2c->dev, sizeof(struct emc2301_data), GFP_KERNEL);
+    if   (unlikely(!data))
+        return -ENODEV;
+
+    data->dev = &i2c->dev;
+    data->i2c = i2c;
+
+    regval   = i2c_smbus_read_byte_data(i2c, EMC230X_REG_PRODUCT_ID);
+    switch   (regval) {
+    case 0x34:   /* EMC2305 */
+        data->num_fans = 5;
+        break;
+    case 0x35:   /* EMC2303 */
+        data->num_fans = 3;
+        break;
+    case 0x36:   /* EMC2302 */
+        data->num_fans = 2;
+        break;
+    case 0x37:   /* EMC2301 */
+        data->num_fans = 1;
+        break;
+    default:
+        dev_err(&i2c->dev, "Unknown product ID %d\n",     regval);
+        return -ENODEV;
+    }
+
+    memset(data->min_rpm, 0, sizeof(u16) *   ARRAY_SIZE(data->min_rpm));
+    memset(data->max_rpm, 0, sizeof(u16) *   ARRAY_SIZE(data->max_rpm));
+
+    /*   Read minimum and maximum RPM values from device
+     *   tree, if specified.
+     *   For example, the Noctua NF-A4x20 has a min
+     *   RPM of 1200 and a max of 5000-5500.
+     *   Without this, cooling actions with slower
+     *   fans may not be effective
+     */
+    if   (of_node) {
+        numchildren =     of_get_child_count(of_node);
+        dev_dbg(&i2c->dev, "Have %d fans configured in DT\n",     numchildren);
+        if (numchildren >     data->num_fans) {
+            dev_warn(&i2c->dev,
+                "%d fans are specified in DT, but only %d fans are supported by this device",
+                numchildren,
+                data->num_fans);
+            numchildren = data->num_fans;
+        }
+        child_node = of_node->child;
+
+        for(i=0; i<numchildren; i++) {
+            retval =       of_property_read_u16(child_node, "min-rpm", &chan_val);
+            if (!retval)       {
+                data->min_rpm[i] = chan_val;
+            }
+
+            retval =       of_property_read_u16(child_node, "max-rpm", &chan_val);
+            if (!retval)       {
+                data->max_rpm[i] = chan_val;
+            }
+            child_node =       of_get_next_child(of_node, child_node);
+        }
+    } else   {
+        dev_warn(&i2c->dev, "No device tree node found for this device");
+    }
+
+    for(i=0; i<data->num_fans;   i++) {
+        if (data->min_rpm[i] != 0     && data->max_rpm[i] != 0) {
+            range = data->max_rpm[i]       - data->min_rpm[i];
+            data->cooling_step[i] = range / (EMC230X_MAX_COOLING_STATE +       1);
+            dev_dbg(&i2c->dev, "Fan %i Cooling step is %d RPM, minimum %d, max %d RPM\n",
+                     i, data->cooling_step[i],   data->min_rpm[i], data->max_rpm[i]);
+            has_cooling_step       = true;
+            emc2301_enable_rpm_control(data,       i, false);
+            emc2301_set_fan_rpm(data, i,       data->max_rpm[i]);
+        }     else {
+            data->cooling_step[i] = 0;
+        }
+    }
+
+    data->current_cooling_state=EMC230X_MAX_COOLING_STATE;
+
+    hwmon_dev = devm_hwmon_device_register_with_info(&i2c->dev,
+        i2c->name,
+        data,
+        &emc2301_chip_info,
+        NULL
+    );
+
+    if   (IS_ERR(hwmon_dev))
+        return PTR_ERR(hwmon_dev);
+
+    dev_info(&i2c->dev, "%s: sensor '%s'\n", dev_name(hwmon_dev), i2c->name);
+
+    if   (IS_REACHABLE(CONFIG_THERMAL) && has_cooling_step && register_cdev == 1) {
+        dev_info(&i2c->dev, "registering a cooling device");
+        data->cdev = devm_thermal_of_cooling_device_register(&i2c->dev,
+            of_node,       "emc2301_fan", data, &emc2301_thermal_cooling_device);
+        if (IS_ERR(data->cdev)) {
+            dev_err(&i2c->dev, "Failed to register cooling device\n");
+            return PTR_ERR(data->cdev);
+        }
+    }
+
+    return   PTR_ERR_OR_ZERO(hwmon_dev);
+}
+
+static const struct i2c_device_id emc2301_i2c_id[] = {
+    { "emc2305", 0   },
+    { "emc2304", 0   },
+    { "emc2303", 0   },
+    { "emc2302", 0   },
+    { "emc2301", 0   },
+    {}
+};
+
+MODULE_DEVICE_TABLE(i2c, emc2301_i2c_id);
+
+static struct i2c_driver emc2301_i2c_driver = {
+    .driver = {
+        .name     = "emc2301",
+    },
+    .probe      = emc2301_i2c_probe,
+    .id_table = emc2301_i2c_id,
+};
+
+module_i2c_driver(emc2301_i2c_driver);
+
+MODULE_DESCRIPTION("EMC2301 Fan controller driver");
+MODULE_AUTHOR("Mathew McBride <matt@traverse.com.au>");
+MODULE_LICENSE("GPL v2");
--
2.17.1

