From d53bb43566aa233991418d370b407d32cacf6bd0 Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Mon, 18 Oct 2021 06:50:26 -0500
Subject: [PATCH] espi post code capture handler

Added changes to handle 8 byte post code pattern
actual 4 byte code will be extracted after validation

Signed-off-by: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
---
 main.cpp | 90 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 90 insertions(+)

diff --git a/main.cpp b/main.cpp
index 74d8072..cc9a545 100644
--- a/main.cpp
+++ b/main.cpp
@@ -32,8 +32,23 @@
 #include <sdeventplus/source/io.hpp>
 #include <thread>

+#define PAT_MATCH(x, y)         (((x) & (y)) == (y))
+#define PAT_NOT_MATCH(x, y)     (((x) & (y)) != (y))
+
+#define FULL_8B_PATTERN         (0x4300420041004000ull)
+#define PART_6B_PATTERN         (0x0000430042004100ull)
+#define PART_4B_PATTERN         (0x0000000043004200ull)
+#define PART_2B_PATTERN         (0x0000000000004300ull)
+
+#define GET_BYTE_7(x)           ((x & 0x00FF000000000000ull) >> 48)
+#define GET_BYTE_5(x)           ((x & 0x000000FF00000000ull) >> 32)
+#define GET_BYTE_3(x)           ((x & 0x0000000000FF0000ull) >> 16)
+#define GET_BYTE_1(x)           ((x & 0x00000000000000FFull))
+#define ESPI_PCC_PC_SIZE        (8)
+
 static size_t codeSize = 1; /* Size of each POST code in bytes */

+
 static void usage(const char* name)
 {
     fprintf(stderr,
@@ -45,6 +60,44 @@ static void usage(const char* name)
             name, codeSize);
 }

+/*
+ * Filter out invalid 8-byte data from espi pcc driver.
+ * we get three patterns of junk as host firmware transitions
+ *  - all zero or all 0xFF (empty cycles)
+ *  - 0x40pp40qq40rr40ss   (host sends 1-byte writes to port-80)
+ *  - truncated IO writes  (host writes less than 4 bytes)
+ *    (happens mostly during PSP to AGESA/BIOS transition)
+ *
+ * returns - false, and remaing bytes to re-read if current code is invalid.
+ *         - true, if code satisfies '0x43pp42qq41rr40ss' pattern.
+ */
+bool is_code_good(const uint64_t code, int* rem_bytes)
+{
+    *rem_bytes = 0;
+
+    if((code == 0ull) || (code == std::numeric_limits<uint64_t>::max()))
+    {
+        *rem_bytes = ESPI_PCC_PC_SIZE;
+        return false;
+    }
+
+    if(PAT_NOT_MATCH(code, FULL_8B_PATTERN))
+    {
+        if(PAT_MATCH(code, PART_6B_PATTERN))
+            *rem_bytes = 2;
+        if(PAT_MATCH(code, PART_4B_PATTERN))
+            *rem_bytes = 4;
+        if(PAT_MATCH(code, PART_2B_PATTERN))
+            *rem_bytes = 6;
+
+        if((*rem_bytes) == 0)
+            *rem_bytes = ESPI_PCC_PC_SIZE;    /* no partial pattern */
+
+        return false;
+    }
+
+    return true;
+}
 /*
  * Callback handling IO event from the POST code fd. i.e. there is new
  * POST code available to read.
@@ -54,8 +107,45 @@ void PostCodeEventHandler(sdeventplus::source::IO& s, int postFd, uint32_t,
 {
     uint64_t code = 0;
     ssize_t readb;
+    uint64_t trunc_code = 0;
+    int rem_bytes = 0; /* bytes to re-read incase of partial code */
+
     while ((readb = read(postFd, &code, codeSize)) > 0)
     {
+        // check 8-byte espi pcc code,re-read if partial
+        while (false == is_code_good(code, &rem_bytes))
+        {
+            trunc_code = code << (ESPI_PCC_PC_SIZE * rem_bytes);
+            readb = read(postFd, &code, rem_bytes);
+            if(readb == rem_bytes)
+            {
+                code = trunc_code | code;
+            }
+            else
+            {
+                if (readb < 0 && (errno == EAGAIN || errno == EWOULDBLOCK))
+                {
+                    return;
+                }
+
+                /* Read failure. */
+                if (readb == 0)
+                {
+                    fprintf(stderr, "Unexpected EOF reading postcode\n");
+                }
+                else
+                {
+                    fprintf(stderr, "Failed to read postcode: %s\n", strerror(errno));
+                }
+                s.get_event().exit(1);
+            }
+        }
+        // extract 0xppqqrrss from 0x43pp42qq41rr40ss pattern
+        trunc_code = (GET_BYTE_7(code) | GET_BYTE_5(code) |
+                      GET_BYTE_3(code) | GET_BYTE_1(code));
+
+        code = trunc_code;
+
         code = le64toh(code);
         if (verbose)
         {
--
2.17.1

