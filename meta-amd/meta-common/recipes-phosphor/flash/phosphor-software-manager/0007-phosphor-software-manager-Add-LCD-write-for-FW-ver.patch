From d85e9cdb2f5920c0fc1815c01f41ff72c40524b2 Mon Sep 17 00:00:00 2001
From: Mohsen Dolaty <mohsen.dolaty@amd.com>
Date: Mon, 13 Dec 2021 15:04:23 -0600
Subject: [PATCH 1/1] phosphor-software-manager: Add LCD write for FW ver

Add LCD write for:
LCD Line 3: BMC Version
LCD Line 4: BIOS Version

Signed-off-by: Mohsen Dolaty <mohsen.dolaty@amd.com>
---
 activation.cpp | 24 ++++++++++++++++++++
 version.cpp    | 59 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 83 insertions(+)

diff --git a/activation.cpp b/activation.cpp
index c893d52..b7e187c 100644
--- a/activation.cpp
+++ b/activation.cpp
@@ -1,3 +1,5 @@
+#include <lcdlib_common.h>
+
 #include "activation.hpp"

 #include "images.hpp"
@@ -49,6 +51,23 @@ using InternalFailure =
 namespace control = sdbusplus::xyz::openbmc_project::Control::server;
 #endif

+// LCD
+#define LCD_MAX_CHAR  20
+#define LCD_BUFF_SIZE 2*LCD_MAX_CHAR
+
+static void writeLCD(char *version)
+{
+    if (lcdlib_open_dev() != 0 ) {
+        log<level::ERR>("writeLCD Error: Could not open LCD device\n");
+        return;
+    }
+    if (lcdlib_write_string(BIOS_VER, (unsigned char*)version, LCD_MAX_CHAR) !=0)
+        log<level::ERR>("writeLCD Error: Could not wirte New BIOS Version to LCD \n");
+    if (lcdlib_close_dev() != 0 )
+        log<level::ERR>("writeLCD Error : Failed to close LCD device\n");
+    return;
+}
+
 void Activation::subscribeToSystemdSignals()
 {
     auto method = this->bus.new_method_call(SYSTEMD_BUSNAME, SYSTEMD_PATH,
@@ -482,6 +501,7 @@ void Activation::onStateChangesBios(sdbusplus::message::message& msg)
     sdbusplus::message::object_path newStateObjPath;
     std::string newStateUnit{};
     std::string newStateResult{};
+    char version[LCD_BUFF_SIZE];

     // Read the msg and populate each variable
     msg.read(newStateID, newStateObjPath, newStateUnit, newStateResult);
@@ -508,6 +528,10 @@ void Activation::onStateChangesBios(sdbusplus::message::message& msg)
             parent.biosVersion->version(
                 parent.versions.find(versionId)->second->version());
             SET_VER(BIOS_VER_FILE);
+            // LCD
+            snprintf(version, LCD_BUFF_SIZE, "BIOS: %s       ", parent.versions.find(versionId)->second->version().c_str());
+            writeLCD(version);
+
             parent.versions.find(versionId)->second->version("--");

             // Delete the uploaded activation
diff --git a/version.cpp b/version.cpp
index 04f40c4..8b72a9a 100644
--- a/version.cpp
+++ b/version.cpp
@@ -1,3 +1,6 @@
+#include <lcdlib_common.h>
+#include <unistd.h>
+
 #include "config.h"

 #include "version.hpp"
@@ -26,6 +29,52 @@ using namespace phosphor::logging;
 using Argument = xyz::openbmc_project::Common::InvalidArgument;
 using namespace sdbusplus::xyz::openbmc_project::Common::Error;

+// LCD
+int initLCDflag = 0;
+#define LCD_MAX_CHAR  20
+#define LCD_BUFF_SIZE 2*LCD_MAX_CHAR
+#define COMMAND_BIOS ("cat /var/lib/phosphor-bmc-code-mgmt/bios_ver |grep active |cut -c 15-25")
+#define BIOS_LEN     (11)
+
+static void initLCD(char *bmcVer)
+{
+    char data[LCD_BUFF_SIZE];
+    char bios[BIOS_LEN];
+    FILE *pf;
+
+    if (lcdlib_open_dev() != 0 ) {
+        log<level::ERR>("initLCD Error: Could not open LCD device\n");
+        return;
+    }
+    if (lcdlib_clearScreen() != 0 )
+        log<level::ERR>("initLCD Error: Could not clear LCD screen\n");
+
+    // BMC
+    sleep(1);
+    if (lcdlib_write_string(BMC_VER, (unsigned char*)bmcVer, LCD_MAX_CHAR) !=0)
+        log<level::ERR>("initLCD Error: Could not wirte BMC VER to LCD \n");
+    // BIOS
+    pf = popen(COMMAND_BIOS, "r");
+    if (pf != NULL)
+    {
+        if (fgets(bios, BIOS_LEN , pf) != NULL)
+        {
+            snprintf(data, LCD_BUFF_SIZE, "BIOS: %s     ", bios);
+            if (lcdlib_write_string(BIOS_VER, (unsigned char*)data, LCD_MAX_CHAR) !=0)
+                log<level::ERR>("initLCD Error: Could not wirte BIOS VER to LCD \n");
+        }
+        pclose(pf);
+    }
+    else {
+        log<level::ERR>("Failed to open BIOS command stream");
+    }
+
+    if (lcdlib_close_dev() != 0 )
+        log<level::ERR>("writeToLCD Error : Failed to close LCD device\n");
+
+    return;
+}
+
 std::string Version::getValue(const std::string& manifestFilePath,
                               std::string key)
 {
@@ -153,6 +202,8 @@ std::string Version::getBMCExtendedVersion(const std::string& releaseFilePath)

 std::string Version::getBMCVersion(const std::string& releaseFilePath)
 {
+    char bmcVer[LCD_BUFF_SIZE];
+
     std::string versionKey = "VERSION_ID=";
     std::string versionValue{};
     std::string version{};
@@ -193,6 +244,14 @@ std::string Version::getBMCVersion(const std::string& releaseFilePath)
         log<level::ERR>("Error BMC current version is empty");
         elog<InternalFailure>();
     }
+    else
+    {
+        if(initLCDflag == 0) {
+            snprintf(bmcVer, LCD_BUFF_SIZE, "BMC: %s   ", version.c_str());
+            initLCD(bmcVer);
+            initLCDflag++;
+        }
+    }

     return version;
 }
--
2.25.1
