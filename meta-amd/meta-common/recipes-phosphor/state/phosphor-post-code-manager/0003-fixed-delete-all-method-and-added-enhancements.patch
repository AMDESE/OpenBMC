From c3d5f62576f66de43d837a5d9186d53d6e36223e Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Tue, 15 Feb 2022 01:03:08 -0600
Subject: [PATCH] fixed delete all method and added enhancements

Signed-off-by: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
---
 inc/post_code.hpp |  4 +--
 src/post_code.cpp | 83 ++++++++++++++++++++++++++++-------------------
 2 files changed, 52 insertions(+), 35 deletions(-)

diff --git a/inc/post_code.hpp b/inc/post_code.hpp
index 05ce284..2c39c19 100644
--- a/inc/post_code.hpp
+++ b/inc/post_code.hpp
@@ -18,7 +18,7 @@
 #include <unistd.h>

 #include <cereal/access.hpp>
-#include <cereal/archives/json.hpp>
+#include <cereal/archives/binary.hpp>
 #include <cereal/cereal.hpp>
 #include <cereal/types/map.hpp>
 #include <cereal/types/tuple.hpp>
@@ -33,7 +33,7 @@
 #include <xyz/openbmc_project/State/Boot/PostCode/server.hpp>
 #include <xyz/openbmc_project/State/Host/server.hpp>

-#define MaxPostCodeCycles 100
+#define MaxPostCodeCycles 10

 const static constexpr char *CurrentBootCycleCountName =
     "CurrentBootCycleCount";
diff --git a/src/post_code.cpp b/src/post_code.cpp
index e8a6918..0db3e20 100644
--- a/src/post_code.cpp
+++ b/src/post_code.cpp
@@ -31,32 +31,21 @@ void PostCode::deleteAll()
               << std::endl;
     fs::create_directories(dir);
     postCodes.clear();
-    currentBootCycleIndex = 1;
-    currentBootCycleCount(1);
+    currentBootCycleIndex = 0;
+    currentBootCycleCount(0);
 }

 #define LCD_MAX_CHAR  20
 #define LCD_BUFF_SIZE 5*LCD_MAX_CHAR
-#define POST_CODE_LEN (11)

-void writeLCD(uint16_t pcIndex)
+void writeLCD(postcode_t code)
 {
-    char pc[LCD_MAX_CHAR];
     char post[LCD_BUFF_SIZE];
-    FILE *pf;

-    sprintf(post, " tail /var/lib/phosphor-post-code-manager/host0/%d  |grep tuple_element0 |cut -c 35-45 \n", pcIndex);
-    pf = popen(post, "r");
-    if (pf != NULL)
-    {
-        if (fgets(pc, POST_CODE_LEN , pf) != NULL) {
-            sprintf(post, "POSTCODE: %llx  ", atoll(pc));
-            pclose(pf);
-            if (lcdlib_open_dev() == 0 ) {
-                lcdlib_write_string(POST_CODE, (unsigned char*)post, LCD_MAX_CHAR);
-                lcdlib_close_dev();
-            }
-        }
+    sprintf(post, "POSTCODE: %llx  ", std::get<uint64_t>(code));
+    if (lcdlib_open_dev() == 0 ) {
+        lcdlib_write_string(POST_CODE, (unsigned char*)post, LCD_MAX_CHAR);
+        lcdlib_close_dev();
     }
 }
 std::vector<postcode_t> PostCode::getPostCodes(uint16_t index)
@@ -122,6 +111,8 @@ void PostCode::savePostCodes(postcode_t code)
     postCodes.insert(std::make_pair(tsUS, code));
     serialize(fs::path(strPostCodeListPath));

+    writeLCD(code);
+
 #ifdef ENABLE_BIOS_POST_CODE_LOG
     std::ostringstream hexCode;
     hexCode << "0x" << std::setfill('0') << std::setw(2) << std::hex
@@ -149,22 +140,42 @@ void PostCode::savePostCodes(postcode_t code)

 fs::path PostCode::serialize(const std::string& path)
 {
+    static uint16_t prev_bc = 0;
     try
     {
-        fs::path idxPath(path + strCurrentBootCycleIndexName);
-        std::ofstream osIdx(idxPath.c_str(), std::ios::binary);
-        cereal::JSONOutputArchive idxArchive(osIdx);
-        idxArchive(currentBootCycleIndex);
+        /* Flush index files on new boot count only */
+        if (prev_bc != currentBootCycleCount())
+        {
+            fs::path idxPath(path + strCurrentBootCycleIndexName);
+            std::ofstream osIdx(idxPath.c_str(), std::ios::binary);
+            cereal::BinaryOutputArchive idxArchive(osIdx);
+            idxArchive(currentBootCycleIndex);
+
+            uint16_t count = currentBootCycleCount();
+            fs::path cntPath(path + strCurrentBootCycleCountName);
+            std::ofstream osCnt(cntPath.c_str(), std::ios::binary);
+            cereal::BinaryOutputArchive cntArchive(osCnt);
+            cntArchive(count);

-        uint16_t count = currentBootCycleCount();
-        fs::path cntPath(path + strCurrentBootCycleCountName);
-        std::ofstream osCnt(cntPath.c_str(), std::ios::binary);
-        cereal::JSONOutputArchive cntArchive(osCnt);
-        cntArchive(count);
+            prev_bc = currentBootCycleCount();
+        }
+    }
+    catch (cereal::Exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
+        return "";
+    }
+    catch (const fs::filesystem_error& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
+        return "";
+    }

+    try
+    {
         std::ofstream osPostCodes(
             (path + std::to_string(currentBootCycleIndex)));
-        cereal::JSONOutputArchive oarchivePostCodes(osPostCodes);
+        cereal::BinaryOutputArchive oarchivePostCodes(osPostCodes);
         oarchivePostCodes(postCodes);
     }
     catch (cereal::Exception& e)
@@ -177,7 +188,6 @@ fs::path PostCode::serialize(const std::string& path)
         phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
         return "";
     }
-    writeLCD(currentBootCycleCount());
     return path;
 }

@@ -188,7 +198,7 @@ bool PostCode::deserialize(const fs::path& path, uint16_t& index)
         if (fs::exists(path))
         {
             std::ifstream is(path.c_str(), std::ios::in | std::ios::binary);
-            cereal::JSONInputArchive iarchive(is);
+            cereal::BinaryInputArchive iarchive(is);
             iarchive(index);
             return true;
         }
@@ -215,7 +225,7 @@ bool PostCode::deserializePostCodes(const fs::path& path,
         if (fs::exists(path))
         {
             std::ifstream is(path.c_str(), std::ios::in | std::ios::binary);
-            cereal::JSONInputArchive iarchive(is);
+            cereal::BinaryInputArchive iarchive(is);
             iarchive(codes);
             return true;
         }
@@ -243,8 +253,15 @@ void PostCode::incrBootCycle()
     {
         currentBootCycleIndex++;
     }
-    currentBootCycleCount(std::min(
-        maxBootCycleNum(), static_cast<uint16_t>(currentBootCycleCount() + 1)));
+    if (currentBootCycleCount() >= maxBootCycleNum())
+    {
+        currentBootCycleCount(1);
+    }
+    else
+    {
+        currentBootCycleCount(std::min(
+            maxBootCycleNum(), static_cast<uint16_t>(currentBootCycleCount() + 1)));
+    }
 }

 uint16_t PostCode::getBootNum(const uint16_t index) const
