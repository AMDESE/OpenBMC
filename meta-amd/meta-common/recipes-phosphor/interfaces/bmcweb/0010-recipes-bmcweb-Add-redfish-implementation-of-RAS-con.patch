From db877443928119b1d895df012615615094e37e67 Mon Sep 17 00:00:00 2001
From: Abinaya <abinaya.dhandapani@amd.com>
Date: Fri, 13 Jan 2023 05:25:47 -0600
Subject: [PATCH] recipes/bmcweb: Add redfish implementation of RAS
 configuration

Signed-off-by: Abinaya <abinaya.dhandapani@amd.com>
---
 redfish-core/include/redfish.hpp  |   1 +
 redfish-core/lib/log_services.hpp | 195 +++++++++++++++++++++++++++++-
 2 files changed, 195 insertions(+), 1 deletion(-)

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index db58d609..167d42b5 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -142,6 +142,7 @@ class RedfishService
         nodes.emplace_back(std::make_unique<CrashdumpFile>(app));
         nodes.emplace_back(std::make_unique<CrashdumpClear>(app));
         nodes.emplace_back(std::make_unique<CrashdumpCollect>(app));
+        nodes.emplace_back(std::make_unique<CrashdumpConfiguration>(app));
 #endif // BMCWEB_ENABLE_REDFISH_CPU_LOG

         nodes.emplace_back(std::make_unique<ProcessorCollection>(app));
diff --git a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
index d20f62fc..d46ee0eb 100644
--- a/redfish-core/lib/log_services.hpp
+++ b/redfish-core/lib/log_services.hpp
@@ -49,6 +49,8 @@ constexpr char const* crashdumpOnDemandInterface =
     "com.amd.crashdump.OnDemand";
 constexpr char const* crashdumpTelemetryInterface =
     "com.amd.crashdump.Telemetry";
+constexpr char const* crashdumpConfigurationInterface =
+    "com.amd.crashdump.Configuration";

 namespace message_registries
 {
@@ -2593,7 +2595,10 @@ class CrashdumpService : public Node
                          "Actions/LogService.ClearLog"}}},
             {"#LogService.CollectDiagnosticData",
              {{"target", "/redfish/v1/Systems/system/LogServices/Crashdump/"
-                         "Actions/LogService.CollectDiagnosticData"}}}};
+                         "Actions/LogService.CollectDiagnosticData"}}},
+            {"#LogService.CrashdumpConfiguration",
+             {{"target", "/redfish/v1/Systems/system/LogServices/Crashdump/"
+                         "Actions/Oem/Crashdump.Configuration"}}}};
     }
 };

@@ -2810,6 +2815,194 @@ class CrashdumpEntry : public Node
     }
 };

+class CrashdumpConfiguration : public Node
+{
+  public:
+
+    CrashdumpConfiguration(App& app) :
+        Node(app, "/redfish/v1/Systems/system/LogServices/Crashdump/"
+                  "Actions/Oem/Crashdump.Configuration")
+    {
+        // Note: Deviated from redfish privilege registry for GET & HEAD
+        // method for security reasons.
+        entityPrivileges = {
+            {boost::beast::http::verb::get, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::head, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::patch, {{"ConfigureManager"}}},
+            {boost::beast::http::verb::put, {{"ConfigureManager"}}},
+            {boost::beast::http::verb::delete_, {{"ConfigureManager"}}},
+            {boost::beast::http::verb::post, {{"ConfigureManager"}}}};
+    }
+
+ private:
+
+    void doGet(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const crow::Request&,
+               const std::vector<std::string>&) override
+    {
+        asyncResp->res.jsonValue = {
+            {"@odata.id", "/redfish/v1/Systems/system/LogServices/Crashdump/"
+                          "Actions/Oem/Crashdump.Configuration"},
+            {"@odata.type", "#LogService.v1_2_0.LogService"}};
+        crow::connections::systemBus->async_method_call(
+            [asyncResp](
+                const boost::system::error_code ec,
+                const std::vector<std::pair<
+                    std::string, std::variant<uint16_t, bool>>>&
+                    propertiesList) {
+                if (ec)
+                {
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                BMCWEB_LOG_DEBUG << "Got " << propertiesList.size()
+                                 << "properties for Crashdump configuration";
+                for (const std::pair<std::string,
+                                     std::variant<uint16_t, bool>>&
+                         property : propertiesList)
+                {
+                    if (property.first == "apmlRetries")
+                    {
+                        const uint16_t* value =
+                            std::get_if<uint16_t>(&property.second);
+                        if (value != nullptr)
+                        {
+                            asyncResp->res.jsonValue["apmlRetries"] =
+                                *value;
+                        }
+                    }
+                    if (property.first == "systemRecovery")
+                    {
+                        const uint16_t* value =
+                            std::get_if<uint16_t>(&property.second);
+                        if (value != nullptr)
+                        {
+                            asyncResp->res.jsonValue["systemRecovery"] =
+                                *value;
+                        }
+                    }
+                    if (property.first == "harvestuCodeVersion")
+                    {
+                        const bool* value =
+                            std::get_if<bool>(&property.second);
+                        if (value != nullptr)
+                        {
+                            asyncResp->res
+                                .jsonValue["harvestuCodeVersion"] = *value;
+                        }
+                    }
+                    if (property.first == "harvestPpin")
+                    {
+                        const bool* value =
+                            std::get_if<bool>(&property.second);
+                        if (value != nullptr)
+                        {
+                            asyncResp->res
+                                .jsonValue["harvestPpin"] = *value;
+                        }
+                    }
+                }
+            },
+            crashdumpObject, crashdumpPath,
+            "org.freedesktop.DBus.Properties", "GetAll",
+            crashdumpConfigurationInterface);
+    }
+
+    void doPatch(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                const crow::Request& req,
+                const std::vector<std::string>&) override
+    {
+        std::optional<uint16_t> apmlRetries;
+        std::optional<uint16_t> systemRecovery;
+        std::optional<bool> harvestuCodeVersion;
+        std::optional<bool> harvestPpin;
+
+        if (!json_util::readJson(req, asyncResp->res, "apmlRetries", apmlRetries,
+                                "systemRecovery", systemRecovery,
+                                "harvestPpin", harvestPpin,
+                                "harvestuCodeVersion", harvestuCodeVersion))
+        {
+            return;
+        }
+
+        if(apmlRetries)
+        {
+            crow::connections::systemBus->async_method_call(
+            [asyncResp](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR << "D-Bus responses error: " << ec;
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                messages::success(asyncResp->res);
+                return;
+            },
+            crashdumpObject, crashdumpPath,
+            "org.freedesktop.DBus.Properties", "Set",
+            crashdumpConfigurationInterface, "apmlRetries",
+            std::variant<uint16_t>(*apmlRetries));
+        }
+
+        if(systemRecovery)
+        {
+            crow::connections::systemBus->async_method_call(
+            [asyncResp](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR << "D-Bus responses error: " << ec;
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                messages::success(asyncResp->res);
+                return;
+            },
+            crashdumpObject,crashdumpPath,
+            "org.freedesktop.DBus.Properties", "Set",
+            crashdumpConfigurationInterface, "systemRecovery",
+            std::variant<uint16_t>(*systemRecovery));
+        }
+
+        if(harvestPpin)
+        {
+            crow::connections::systemBus->async_method_call(
+            [asyncResp](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR << "D-Bus responses error: " << ec;
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                messages::success(asyncResp->res);
+                return;
+            },
+            crashdumpObject, crashdumpPath,
+            "org.freedesktop.DBus.Properties", "Set",
+            crashdumpConfigurationInterface, "harvestPpin",
+            std::variant<bool>(*harvestPpin));
+        }
+
+        if(harvestuCodeVersion)
+        {
+            crow::connections::systemBus->async_method_call(
+            [asyncResp](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR << "D-Bus responses error: " << ec;
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                messages::success(asyncResp->res);
+                return;
+            },
+            crashdumpObject,crashdumpPath,
+            "org.freedesktop.DBus.Properties", "Set",
+            crashdumpConfigurationInterface, "harvestuCodeVersion",
+            std::variant<bool>(*harvestuCodeVersion));
+        }
+    }
+};
+
 class CrashdumpFile : public Node
 {
   public:
