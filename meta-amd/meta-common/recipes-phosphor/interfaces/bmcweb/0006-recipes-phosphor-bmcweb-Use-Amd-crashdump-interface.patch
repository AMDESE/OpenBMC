From ed337a1f9336c4c0b517f9899a77e1c529f927b4 Mon Sep 17 00:00:00 2001
From: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
Date: Tue, 26 Jul 2022 20:39:18 -0500
Subject: [PATCH 1/1] recipes-phosphor/bmcweb: Use Amd crashdump interface
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

Uses Amd crashdump interface instead of Intel crashdump interface with
log services to retrieve crashdump data.
This is a temporary change.
TODO: Need to work with upstream maintainers to design a generic
interface.

Signed-off-by: Abinaya <abinaya.dhandapani@amd.com>
Signed-off-by: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
---
 redfish-core/lib/log_services.hpp | 19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

diff --git a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
index 4f43e760..d20f62fc 100644
--- a/redfish-core/lib/log_services.hpp
+++ b/redfish-core/lib/log_services.hpp
@@ -40,15 +40,15 @@
 namespace redfish
 {

-constexpr char const* crashdumpObject = "com.intel.crashdump";
-constexpr char const* crashdumpPath = "/com/intel/crashdump";
-constexpr char const* crashdumpInterface = "com.intel.crashdump";
+constexpr char const* crashdumpObject = "com.amd.crashdump";
+constexpr char const* crashdumpPath = "/com/amd/crashdump";
+constexpr char const* crashdumpInterface = "com.amd.crashdump";
 constexpr char const* deleteAllInterface =
     "xyz.openbmc_project.Collection.DeleteAll";
 constexpr char const* crashdumpOnDemandInterface =
-    "com.intel.crashdump.OnDemand";
+    "com.amd.crashdump.OnDemand";
 constexpr char const* crashdumpTelemetryInterface =
-    "com.intel.crashdump.Telemetry";
+    "com.amd.crashdump.Telemetry";

 namespace message_registries
 {
@@ -2583,7 +2583,7 @@ class CrashdumpService : public Node
         asyncResp->res.jsonValue["Description"] = "Oem Crashdump Service";
         asyncResp->res.jsonValue["Id"] = "Oem Crashdump";
         asyncResp->res.jsonValue["OverWritePolicy"] = "WrapsWhenFull";
-        asyncResp->res.jsonValue["MaxNumberOfRecords"] = 3;
+        asyncResp->res.jsonValue["MaxNumberOfRecords"] = 10;
         asyncResp->res.jsonValue["Entries"] = {
             {"@odata.id",
              "/redfish/v1/Systems/system/LogServices/Crashdump/Entries"}};
@@ -2681,7 +2681,7 @@ static void
                             {"EntryType", "Oem"},
                             {"AdditionalDataURI", std::move(crashdumpURI)},
                             {"DiagnosticDataType", "OEM"},
-                            {"OEMDiagnosticDataType", "PECICrashdump"},
+                            {"OEMDiagnosticDataType", "APMLCrashdump"},
                             {"Created", std::move(timestamp)}};
         };
     crow::connections::systemBus->async_method_call(
@@ -2901,7 +2901,8 @@ class CrashdumpFile : public Node
                 // The cast to std::string is intentional in order to use the
                 // assign() that applies move mechanics
                 asyncResp->res.body().assign(
-                    static_cast<std::string>(crashData.get()));
+                    static_cast<char *>(crashData.get()), static_cast<unsigned int>(fileSize));
+

                 // Configure this to be a file download when accessed from
                 // a browser
@@ -2991,7 +2992,7 @@ class CrashdumpCollect : public Node
                     return task::completed;
                 },
                 "type='signal',interface='org.freedesktop.DBus.Properties',"
-                "member='PropertiesChanged',arg0namespace='com.intel."
+                "member='PropertiesChanged',arg0namespace='com.amd."
                 "crashdump'");
             task->startTimer(std::chrono::minutes(5));
             task->populateResp(asyncResp->res);
--
2.17.1

