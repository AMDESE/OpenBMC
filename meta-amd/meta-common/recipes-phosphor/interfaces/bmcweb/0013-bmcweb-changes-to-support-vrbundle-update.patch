From 2e94517effdd7b989842bfe20bf8e8a8a6f2a7a4 Mon Sep 17 00:00:00 2001
From: Ashok Kumar <ashok2.kumar@amd.com>
Date: Wed, 15 Feb 2023 14:22:06 -0600
Subject: [PATCH] bmcweb changes to support vrbundle update

Added new function to return vrbundle details using
/redfish/v1/UpdateService/FirmwareInventory/vr_bundle_activ uri

Signed-off-by: Ashok Kumar <ashok2.kumar@amd.com>

---
 redfish-core/include/utils/fw_utils.hpp | 177 ++++++++++++++++++++++++
 redfish-core/lib/update_service.hpp     |   5 +
 2 files changed, 182 insertions(+)

diff --git a/redfish-core/include/utils/fw_utils.hpp b/redfish-core/include/utils/fw_utils.hpp
index c990023b..ca43aeda 100644
--- a/redfish-core/include/utils/fw_utils.hpp
+++ b/redfish-core/include/utils/fw_utils.hpp
@@ -371,6 +371,183 @@ inline void getFwStatus(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         "org.freedesktop.DBus.Properties", "GetAll",
         "xyz.openbmc_project.Software.Activation");
 }
+/**
+ * @brief Put status of input swId into json response
+ *
+ * This function will put the appropriate Redfish state of the input
+ * VR Bundle firmware info to "VRBundle": ["FirmwareID", "FirmwareVersion"
+ * "HealthStatus", "Processor", "SlaveAddress"] within the json response
+ *
+ * @param[i,o] aResp    Async response object
+ * @param[i]   swId     The software ID to get status for
+ * @param[i]   dbusSvc  The dbus service implementing the software object
+ *
+ * @return void
+ */
+
+inline void getVRBundleFw(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                        const std::shared_ptr<std::string>& swId,
+                        const std::string& dbusSvc)
+{
+
+    crow::connections::systemBus->async_method_call(
+        [asyncResp,
+         swId](const boost::system::error_code errorCode,
+               const boost::container::flat_map< std::string,
+                  std::variant<std::string, std::vector<std::string>>>& propertiesList) {
+            if (errorCode)
+            {
+                messages::internalError(asyncResp->res);
+                return;
+            }
+            std::vector<std::string> FirmwareIDs;
+            std::vector<std::string> Processors;
+            std::vector<std::string> SlaveAddress;
+            std::vector<std::string> Status;
+            std::vector<std::string> Versions;
+            std::vector<std::string> Checksum;
+
+            boost::container::flat_map< std::string,
+                   std::variant<std::string, std::vector<std::string>>>::const_iterator it = propertiesList.find("FirmwareID");
+            // first check if required property exist
+            if (it == propertiesList.end())
+            {
+                BMCWEB_LOG_DEBUG << "Can't find property \"FirmwareID\"!";
+                messages::propertyMissing(asyncResp->res, "FirmwareID");
+                return;
+            }
+            it = propertiesList.find("Processor");
+            if (it == propertiesList.end())
+            {
+                BMCWEB_LOG_DEBUG << "Can't find property \"Processor\"!";
+                messages::propertyMissing(asyncResp->res, "Processor");
+                return;
+            }
+            it = propertiesList.find("SlaveAddress");
+            if (it == propertiesList.end())
+            {
+                BMCWEB_LOG_DEBUG << "Can't find property \"SlaveAddress\"!";
+                messages::propertyMissing(asyncResp->res, "SlaveAddress");
+                return;
+            }
+            it = propertiesList.find("Status");
+            if (it == propertiesList.end())
+            {
+                BMCWEB_LOG_DEBUG << "Can't find property \"Status\"!";
+                messages::propertyMissing(asyncResp->res, "Status");
+                return;
+            }
+            it = propertiesList.find("Versions");
+            if (it == propertiesList.end())
+            {
+                BMCWEB_LOG_DEBUG << "Can't find property \"Versions\"!";
+                messages::propertyMissing(asyncResp->res, "Versions");
+                return;
+            }
+            it = propertiesList.find("Checksum");
+            if (it == propertiesList.end())
+            {
+                BMCWEB_LOG_DEBUG << "Can't find property \"Versions\"!";
+                messages::propertyMissing(asyncResp->res, "Versions");
+                return;
+            }
+            //retrieve all the values
+            for (const auto& propertyPair : propertiesList)
+            {
+               if (propertyPair.first == "FirmwareID")
+               {
+                  const std::vector<std::string>* fwvalue =
+                                std::get_if<std::vector<std::string>>(
+                                    &propertyPair.second);
+                  if (fwvalue == nullptr)
+                  {
+                     return;
+                  }
+                  FirmwareIDs = *fwvalue;
+               }
+               else if (propertyPair.first == "Processor")
+               {
+                   const std::vector<std::string>* procvalue =
+                                 std::get_if<std::vector<std::string>>(
+                                     &propertyPair.second);
+                  if (procvalue == nullptr)
+                  {
+                     return;
+                  }
+                  Processors = *procvalue;
+               }
+               else if (propertyPair.first == "SlaveAddress")
+               {
+                   const std::vector<std::string>* slavevalue =
+                                 std::get_if<std::vector<std::string>>(
+                                     &propertyPair.second);
+                  if (slavevalue == nullptr)
+                  {
+                     return;
+                  }
+                  SlaveAddress = *slavevalue;
+               }
+               else if (propertyPair.first == "Status")
+               {
+                   const std::vector<std::string>* statusvalue =
+                                 std::get_if<std::vector<std::string>>(
+                                     &propertyPair.second);
+                  if (statusvalue == nullptr)
+                  {
+                     return;
+                  }
+                  Status = *statusvalue;
+               }
+               else if (propertyPair.first == "Versions")
+               {
+                   const std::vector<std::string>* vervalue =
+                                 std::get_if<std::vector<std::string>>(
+                                     &propertyPair.second);
+                  if (vervalue == nullptr)
+                  {
+                     return;
+                  }
+                  Versions = *vervalue;
+               }
+               else if (propertyPair.first == "Checksum")
+               {
+                   const std::vector<std::string>* chksumvalue =
+                                 std::get_if<std::vector<std::string>>(
+                                     &propertyPair.second);
+                  if (chksumvalue == nullptr)
+                  {
+                     return;
+                  }
+                  Checksum = *chksumvalue;
+               }
+           }//end of for loop
+           // now process all the property values
+           if (((FirmwareIDs.size() == Processors.size())
+               == (SlaveAddress.size() == Status.size()))
+               == (Versions.size() == Checksum.size()))
+           {
+               for (unsigned i = 0; i < FirmwareIDs.size(); i++ )
+               {
+                   nlohmann::json& members = asyncResp->res.jsonValue["VRBundle"];
+                   members.push_back({
+                     {"SlaveAddress", SlaveAddress.at(i)},
+                     {"FirmwareID", FirmwareIDs.at(i)},
+                     {"FirmwareVersion", Versions.at(i)},
+                     {"Processor", Processors.at(i)},
+                     {"HealthStatus", Status.at(i)},
+                     {"Checksum", Checksum.at(i)},
+                  });
+               }
+           }
+           else
+           {
+               BMCWEB_LOG_ERROR << "Unknown VR bundle firmware";
+           }
+        },
+        dbusSvc, "/xyz/openbmc_project/software/" + *swId,
+        "org.freedesktop.DBus.Properties", "GetAll",
+        "xyz.openbmc_project.Software.BundleVersion");
+}

 /**
  * @brief Updates programmable status of input swId into json response
diff --git a/redfish-core/lib/update_service.hpp b/redfish-core/lib/update_service.hpp
index 472d8154..1d70cded 100644
--- a/redfish-core/lib/update_service.hpp
+++ b/redfish-core/lib/update_service.hpp
@@ -857,6 +857,11 @@ class SoftwareInventory : public Node
                     found = true;
                     fw_util::getFwStatus(asyncResp, swId, obj.second[0].first);

+                    if (*swId == "vr_bundle_active")
+                    {
+                        fw_util::getVRBundleFw(asyncResp, swId, obj.second[0].first);
+                    }
+
                     crow::connections::systemBus->async_method_call(
                         [asyncResp,
                          swId](const boost::system::error_code errorCode,
