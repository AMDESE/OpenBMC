From 724a7273ce0ef0b2102f85ca2b80c61437274a9e Mon Sep 17 00:00:00 2001
From: Akshay Gupta <Akshay.Gupta@amd.com>
Date: Mon, 28 Feb 2022 12:36:57 +0530
Subject: [PATCH 2/2] hwmon: Add support for sbtsi driver over I3C

- This patch add support for I3C based sbtsi driver
  based over regmap_i3c
- Following info we can get from hwmon subsytem
	- CPU Temperature
	- Read/Write Low Temperature Threshold
	- Read/Write High Temperature Threshold

Change-Id: I95c1f151d2b98c0333e1b519965a314d7446924a
Signed-off-by: Akshay Gupta <Akshay.Gupta@amd.com>
Signed-off-by: Naveen Krishna Chatradhi <nchatrad@amd.com>
---
 drivers/hwmon/Kconfig     |  12 ++
 drivers/hwmon/Makefile    |   1 +
 drivers/hwmon/sbtsi-i3c.c | 272 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 285 insertions(+)
 create mode 100644 drivers/hwmon/sbtsi-i3c.c

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index e2c002672b49..7ea0fafa5ec2 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -1531,6 +1531,18 @@ config SENSORS_SBRMI_I3C
 	  This driver can also be built as a module. If so, the module will
 	  be called sbrmi_i3c.

+config SENSORS_SBTSI_I3C
+	tristate "Emulated SB-TSI temperature sensor over I3C"
+	depends on I3C
+	select REGMAP_I3C
+	default n
+	help
+	  If you say yes here you get support for emulated temperature
+	  sensors on AMD SoCs with SB-TSI interface connected to a BMC device.
+
+	  This driver can also be built as a module. If so, the module will
+	  be called sbtsi_i3c.
+
 config SENSORS_SHT15
 	tristate "Sensiron humidity and temperature sensors. SHT15 and compat."
 	depends on GPIOLIB || COMPILE_TEST
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index 0c84919a92bb..f6874e76ee93 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -161,6 +161,7 @@ obj-$(CONFIG_SENSORS_RASPBERRYPI_HWMON)	+= raspberrypi-hwmon.o
 obj-$(CONFIG_SENSORS_S3C)	+= s3c-hwmon.o
 obj-$(CONFIG_SENSORS_SBTSI)	+= sbtsi_temp.o
 obj-$(CONFIG_SENSORS_SBRMI)	+= sbrmi.o
+obj-$(CONFIG_SENSORS_SBTSI_I3C)	+= sbtsi-i3c.o
 obj-$(CONFIG_SENSORS_SBRMI_I3C)	+= sbrmi-i3c.o
 obj-$(CONFIG_SENSORS_SCH56XX_COMMON)+= sch56xx-common.o
 obj-$(CONFIG_SENSORS_SCH5627)	+= sch5627.o
diff --git a/drivers/hwmon/sbtsi-i3c.c b/drivers/hwmon/sbtsi-i3c.c
new file mode 100644
index 000000000000..b7b499aa33ef
--- /dev/null
+++ b/drivers/hwmon/sbtsi-i3c.c
@@ -0,0 +1,272 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * sbtsi-i3c.c - hwmon driver for a SB-TSI mailbox
+ *               compliant AMD SoC device.
+ *
+ * Copyright (C) 2021-2022 Advanced Micro Devices, Inc.
+ */
+
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/i3c/device.h>
+#include <linux/i3c/master.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/minmax.h>
+#include <linux/mutex.h>
+#include <linux/of.h>
+#include <linux/regmap.h>
+
+/*
+ * SB-TSI registers only support SMBus byte data access. "_INT" registers are
+ * the integer part of a temperature value or limit, and "_DEC" registers are
+ * corresponding decimal parts.
+ */
+#define SBTSI_REG_TEMP_INT		0x01 /* RO */
+#define SBTSI_REG_STATUS		0x02 /* RO */
+#define SBTSI_REG_CONFIG		0x03 /* RO */
+#define SBTSI_REG_TEMP_HIGH_INT		0x07 /* RW */
+#define SBTSI_REG_TEMP_LOW_INT		0x08 /* RW */
+#define SBTSI_REG_TEMP_DEC		0x10 /* RW */
+#define SBTSI_REG_TEMP_HIGH_DEC		0x13 /* RW */
+#define SBTSI_REG_TEMP_LOW_DEC		0x14 /* RW */
+
+#define SBTSI_CONFIG_READ_ORDER_SHIFT	5
+
+#define SBTSI_TEMP_MIN	0
+#define SBTSI_TEMP_MAX	255875
+
+/*
+ * SBTSI_STEP_INC Fractional portion of temperature
+ * One increment of these bits is equivalent to a step of 0.125 Â°C
+ *
+ * SBTSI_INT_OFFSET Integer offset for temperature value
+ *
+ * SBTSI_DEC_OFFSET offset for decimal bits in register[7:5]
+ *
+ * SBTSI_DEC_MASK Mask for decimal value
+ */
+#define SBTSI_STEP_INC		125
+#define SBTSI_INT_OFFSET	3
+#define SBTSI_DEC_OFFSET	5
+#define SBTSI_DEC_MASK		0x7
+/* Each device has this additional data */
+struct sbtsi_i3c_data {
+	struct regmap *regmap;
+	struct mutex lock;
+};
+
+/*
+ * From SB-TSI spec: CPU temperature readings and limit registers encode the
+ * temperature in increments of 0.125 from 0 to 255.875. The "high byte"
+ * register encodes the base-2 of the integer portion, and the upper 3 bits of
+ * the "low byte" encode in base-2 the decimal portion.
+ *
+ * e.g. INT=0x19, DEC=0x20 represents 25.125 degrees Celsius
+ *
+ * Therefore temperature in millidegree Celsius =
+ *   (INT + DEC / 256) * 1000 = (INT * 8 + DEC / 32) * 125
+ */
+static inline int sbtsi_reg_to_mc(s32 integer, s32 decimal)
+{
+	return ((integer << SBTSI_INT_OFFSET) +
+		(decimal >> SBTSI_DEC_OFFSET)) * SBTSI_STEP_INC;
+}
+
+/*
+ * Inversely, given temperature in millidegree Celsius
+ *   INT = (TEMP / 125) / 8
+ *   DEC = ((TEMP / 125) % 8) * 32
+ * Caller have to make sure temp doesn't exceed 255875, the max valid value.
+ */
+static inline void sbtsi_mc_to_reg(s32 temp, unsigned int *integer, unsigned int *decimal)
+{
+	temp /= SBTSI_STEP_INC;
+	*integer = temp >> SBTSI_INT_OFFSET;
+	*decimal = (temp & SBTSI_DEC_MASK) << SBTSI_DEC_OFFSET;
+}
+
+static int sbtsi_i3c_read(struct device *dev, enum hwmon_sensor_types type,
+			  u32 attr, int channel, long *val)
+{
+	struct sbtsi_i3c_data *data = dev_get_drvdata(dev);
+	unsigned int temp_int, temp_dec, cfg;
+	int ret;
+
+	switch (attr) {
+	case hwmon_temp_input:
+		/*
+		 * ReadOrder bit specifies the reading order of integer and
+		 * decimal part of CPU temp for atomic reads. If bit == 0,
+		 * reading integer part triggers latching of the decimal part,
+		 * so integer part should be read first. If bit == 1, read
+		 * order should be reversed.
+		 */
+		ret = regmap_read(data->regmap, SBTSI_REG_CONFIG, &cfg);
+		if (ret < 0)
+			return ret;
+
+		mutex_lock(&data->lock);
+		if (cfg & BIT(SBTSI_CONFIG_READ_ORDER_SHIFT)) {
+			ret = regmap_read(data->regmap, SBTSI_REG_TEMP_DEC, &temp_dec);
+			ret = regmap_read(data->regmap, SBTSI_REG_TEMP_INT, &temp_int);
+		} else {
+			ret = regmap_read(data->regmap, SBTSI_REG_TEMP_INT, &temp_int);
+			ret = regmap_read(data->regmap, SBTSI_REG_TEMP_DEC, &temp_dec);
+		}
+		mutex_unlock(&data->lock);
+		break;
+	case hwmon_temp_max:
+		mutex_lock(&data->lock);
+		ret = regmap_read(data->regmap, SBTSI_REG_TEMP_HIGH_INT, &temp_int);
+		ret = regmap_read(data->regmap, SBTSI_REG_TEMP_HIGH_DEC, &temp_dec);
+		mutex_unlock(&data->lock);
+		break;
+	case hwmon_temp_min:
+		mutex_lock(&data->lock);
+		ret = regmap_read(data->regmap, SBTSI_REG_TEMP_LOW_INT, &temp_int);
+		ret = regmap_read(data->regmap, SBTSI_REG_TEMP_LOW_DEC, &temp_dec);
+		mutex_unlock(&data->lock);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	if (ret < 0)
+		return ret;
+
+	*val = sbtsi_reg_to_mc(temp_int, temp_dec);
+
+	return 0;
+}
+
+static int sbtsi_i3c_write(struct device *dev, enum hwmon_sensor_types type,
+			   u32 attr, int channel, long val)
+{
+	struct sbtsi_i3c_data *data = dev_get_drvdata(dev);
+	unsigned int temp_int, temp_dec;
+	int reg_int, reg_dec, err;
+
+	switch (attr) {
+	case hwmon_temp_max:
+		reg_int = SBTSI_REG_TEMP_HIGH_INT;
+		reg_dec = SBTSI_REG_TEMP_HIGH_DEC;
+		break;
+	case hwmon_temp_min:
+		reg_int = SBTSI_REG_TEMP_LOW_INT;
+		reg_dec = SBTSI_REG_TEMP_LOW_DEC;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	val = clamp_val(val, SBTSI_TEMP_MIN, SBTSI_TEMP_MAX);
+	sbtsi_mc_to_reg(val, &temp_int, &temp_dec);
+
+	mutex_lock(&data->lock);
+	err = regmap_write(data->regmap, reg_int, temp_int);
+	if (err)
+		goto exit;
+
+	err = regmap_write(data->regmap, reg_dec, temp_dec);
+exit:
+	mutex_unlock(&data->lock);
+	return err;
+}
+
+static umode_t sbtsi_i3c_is_visible(const void *data,
+				    enum hwmon_sensor_types type,
+				    u32 attr, int channel)
+{
+	switch (type) {
+	case hwmon_temp:
+		switch (attr) {
+		case hwmon_temp_input:
+			return 0444;
+		case hwmon_temp_min:
+			return 0644;
+		case hwmon_temp_max:
+			return 0644;
+		}
+		break;
+	default:
+		break;
+	}
+	return 0;
+}
+
+static const struct hwmon_channel_info *sbtsi_i3c_info[] = {
+	HWMON_CHANNEL_INFO(temp, HWMON_T_INPUT | HWMON_T_MIN | HWMON_T_MAX),
+	NULL
+};
+
+static const struct hwmon_ops sbtsi_i3c_hwmon_ops = {
+	.is_visible = sbtsi_i3c_is_visible,
+	.read = sbtsi_i3c_read,
+	.write = sbtsi_i3c_write,
+};
+
+static const struct hwmon_chip_info sbtsi_i3c_chip_info = {
+	.ops = &sbtsi_i3c_hwmon_ops,
+	.info = sbtsi_i3c_info,
+};
+
+static int sbtsi_i3c_probe(struct i3c_device *i3cdev)
+{
+	struct device *dev = &i3cdev->dev;
+	struct device *hwmon_dev;
+	struct sbtsi_i3c_data *data;
+	struct regmap_config sbtsi_i3c_regmap_config = {
+		.reg_bits = 8,
+		.val_bits = 8,
+	};
+	struct regmap *regmap;
+
+	regmap = devm_regmap_init_i3c(i3cdev, &sbtsi_i3c_regmap_config);
+	if (IS_ERR(regmap)) {
+		dev_err(&i3cdev->dev, "Failed to register i3c regmap %d\n",
+			(int)PTR_ERR(regmap));
+		return PTR_ERR(regmap);
+	}
+
+	data = devm_kzalloc(dev, sizeof(struct sbtsi_i3c_data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->regmap = regmap;
+	mutex_init(&data->lock);
+
+	dev_set_drvdata(dev, (void *)data);
+	hwmon_dev = devm_hwmon_device_register_with_info(dev, "sbtsi_i3c", data,
+							 &sbtsi_i3c_chip_info, NULL);
+
+	return PTR_ERR_OR_ZERO(hwmon_dev);
+}
+
+static int sbtsi_i3c_remove(struct i3c_device *i3cdev)
+{
+	dev_info(&i3cdev->dev, "Removed sbtsi-i3c driver\n");
+	return 0;
+}
+
+static const struct i3c_device_id sbtsi_i3c_id[] = {
+	I3C_DEVICE_EXTRA_INFO(0x112, 0, 0x1, NULL),
+	{}
+};
+MODULE_DEVICE_TABLE(i3c, sbtsi_i3c_id);
+
+static struct i3c_driver sbtsi_i3c_driver = {
+	.driver = {
+		.name = "sbtsi_i3c",
+	},
+	.probe = sbtsi_i3c_probe,
+	.remove = sbtsi_i3c_remove,
+	.id_table = sbtsi_i3c_id,
+};
+
+module_i3c_driver(sbtsi_i3c_driver);
+
+MODULE_AUTHOR("Akshay Gupta <akshay.gupta@amd.com>");
+MODULE_DESCRIPTION("Hwmon driver for AMD SB-TSI emulated sensor");
+MODULE_LICENSE("GPL");
--
2.25.1
