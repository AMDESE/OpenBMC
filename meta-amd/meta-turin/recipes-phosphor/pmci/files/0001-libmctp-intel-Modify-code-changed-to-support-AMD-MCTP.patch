From b8aaff3d83005f0e0a7e01eeecba9b51447a81c4 Mon Sep 17 00:00:00 2001
From: Vinu Vaghasia <vinu.vaghasia@amd.com>
Date: Tue, 21 Jun 2022 16:50:19 -0500
Subject: [PATCH 1/1] libmctp-intel: Modify code changed to support AMD MCTP
 over PCIe testing

libmctp-intel modified to support the MCPT over PCIe testing.

Signed-off-by: Vinu Vaghasia <vinu.vaghasia@amd.com>
---
 CMakeLists.txt |  2 +-
 astpcie.c      |  2 +-
 astpcie.h      |  2 +-
 core.c         | 20 +++++++++-----------
 libmctp.h      |  7 +++++++
 5 files changed, 19 insertions(+), 14 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b27da63..7eedd83 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -82,4 +82,4 @@ add_executable (mctp_astpcie_register_type utils/mctp-astpcie-register-type.c)
 target_link_libraries (mctp_astpcie_register_type mctp_intel)

 install (TARGETS mctp_intel DESTINATION lib)
-install (FILES libmctp.h libmctp-cmds.h libmctp-vdpci.h libmctp-smbus.h libmctp-astpcie.h libmctp-msgtypes.h DESTINATION include)
+install (FILES libmctp.h libmctp-cmds.h libmctp-vdpci.h libmctp-smbus.h libmctp-astpcie.h libmctp-msgtypes.h astpcie.h DESTINATION include)
diff --git a/astpcie.c b/astpcie.c
index 59a236d..00a889f 100644
--- a/astpcie.c
+++ b/astpcie.c
@@ -228,7 +228,7 @@ static int mctp_astpcie_tx(struct mctp_binding *b, struct mctp_pktbuf *pkt)

 	memcpy(hdr, &mctp_pcie_hdr_template_be, sizeof(*hdr));

-	mctp_prdebug("TX, len: %d, pad: %d", payload_len_dw, pad);
+	//mctp_prdebug("TX, len: %d, pad: %d", payload_len_dw, pad);

 	PCIE_SET_ROUTING(hdr, pkt_prv->routing);
 	PCIE_SET_DATA_LEN(hdr, payload_len_dw);
diff --git a/astpcie.h b/astpcie.h
index 90a84e7..4a546a0 100644
--- a/astpcie.h
+++ b/astpcie.h
@@ -59,7 +59,7 @@ struct mctp_pcie_hdr {
  * See more details in Table 1 of DSP0238 DMTF Spec.
  */
 #define MSG_4DW_HDR 0x70
-#define MCTP_PCIE_VDM_ATTR 0x0010
+#define MCTP_PCIE_VDM_ATTR 0x0090
 #define MSG_CODE_VDM_TYPE_1 0x7f
 #define VENDOR_ID_DMTF_VDM 0xb41a

diff --git a/core.c b/core.c
index b54273c..c4a6e16 100644
--- a/core.c
+++ b/core.c
@@ -88,7 +88,7 @@ struct mctp {
 #define MCTP_MAX_MESSAGE_SIZE 65536
 #endif

-static int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
+int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
 				  mctp_eid_t src, mctp_eid_t dest, void *msg,
 				  size_t len, bool tag_owner, uint8_t tag,
 				  void *msg_binding_private);
@@ -356,7 +356,7 @@ int mctp_set_rx_all(struct mctp *mctp, mctp_rx_fn fn, void *data)
 	return 0;
 }

-static struct mctp_bus *find_bus_for_eid(struct mctp *mctp, mctp_eid_t dest
+struct mctp_bus *find_bus_for_eid(struct mctp *mctp, mctp_eid_t dest
 					 __attribute__((unused)))
 {
 	/* for now, just use the first bus. For full routing support,
@@ -482,10 +482,13 @@ static void mctp_rx(struct mctp *mctp, struct mctp_bus *bus, mctp_eid_t src,
 		    uint8_t tag, void *msg_binding_private)
 {
 	assert(buf != NULL);
-
+/*
 	if (mctp->route_policy == ROUTE_ENDPOINT &&
 	    (dest == bus->eid || dest == MCTP_EID_NULL ||
 	     dest == MCTP_EID_BROADCAST)) {
+*/
+	if (mctp->route_policy == ROUTE_ENDPOINT ) {
+
 		/*
 		 * Identify if this is a control request message.
 		 * See DSP0236 v1.3.0 sec. 11.5.
@@ -549,12 +552,13 @@ void mctp_bus_rx(struct mctp_binding *binding, struct mctp_pktbuf *pkt)

 	/* small optimisation: don't bother reassembly if we're going to
 	 * drop the packet in mctp_rx anyway */
+	/*
 	if (mctp->route_policy == ROUTE_ENDPOINT &&
 	    ((hdr->dest != bus->eid && hdr->dest != MCTP_EID_NULL &&
 	      hdr->dest != MCTP_EID_BROADCAST) ||
 	     MCTP_HDR_GET_VER(hdr->ver) != MCTP_HDR_GET_VER(binding->version)))
 		goto out;
-
+*/
 	tag_owner = hdr->flags_seq_tag & MCTP_HDR_FLAG_TO;
 	flags = hdr->flags_seq_tag & (MCTP_HDR_FLAG_SOM | MCTP_HDR_FLAG_EOM);
 	tag = MCTP_HDR_GET_TAG(hdr->flags_seq_tag);
@@ -727,7 +731,7 @@ void mctp_binding_set_tx_enabled(struct mctp_binding *binding, bool enable)
 		mctp_send_tx_queue(bus);
 }

-static int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
+int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
 				  mctp_eid_t src, mctp_eid_t dest, void *msg,
 				  size_t msg_len, bool tag_owner, uint8_t tag,
 				  void *msg_binding_private)
@@ -739,10 +743,6 @@ static int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,

 	max_payload_len = bus->binding->pkt_size - sizeof(*hdr);

-	mctp_prdebug(
-		"Generating packets for transmission of %zu byte message from %hhu to %hhu",
-		msg_len, src, dest);
-
 	/* queue up packets, each of max MCTP_MTU size */
 	for (p = 0, i = 0; p < msg_len; i++) {
 		payload_len = msg_len - p;
@@ -793,8 +793,6 @@ static int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
 		p += payload_len;
 	}

-	mctp_prdebug("Enqueued %d packets", i);
-
 	return mctp_send_tx_queue(bus);
 }

diff --git a/libmctp.h b/libmctp.h
index 87befe1..c1035f4 100644
--- a/libmctp.h
+++ b/libmctp.h
@@ -124,6 +124,13 @@ int mctp_set_rx_all(struct mctp *mctp, mctp_rx_fn fn, void *data);
 int mctp_message_tx(struct mctp *mctp, mctp_eid_t eid, void *msg, size_t len,
 		    bool tag_owner, uint8_t tag, void *msg_binding_private);

+int mctp_message_tx_on_bus(struct mctp *mctp, struct mctp_bus *bus,
+				  mctp_eid_t src, mctp_eid_t dest, void *msg,
+				  size_t len, bool tag_owner, uint8_t tag,
+				  void *msg_binding_private);
+struct mctp_bus *find_bus_for_eid(struct mctp *mctp, mctp_eid_t dest
+					 __attribute__((unused)));
+
 /* hardware bindings */
 struct mctp_binding {
 	const char *name;
--
2.17.1

