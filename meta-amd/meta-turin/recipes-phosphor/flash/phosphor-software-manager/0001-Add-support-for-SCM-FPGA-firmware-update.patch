From 7f65ce1802e7eb44522163bb0f5b4aa3192c926c Mon Sep 17 00:00:00 2001
From: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
Date: Fri, 25 Jun 2021 09:46:57 -0500
Subject: [PATCH 1/1] Add support for SCM FPGA firmware update
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

Adds support for SCM FPGA firmware update.

Signed-off-by: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
---
 activation.cpp                  | 97 ++++++++++++++++++++++++++++++++-
 activation.hpp                  |  8 +++
 item_updater.cpp                | 36 ++++++++++++
 item_updater.hpp                | 19 +++++++
 meson.build                     | 11 ++++
 meson_options.txt               |  9 +++
 obmc-flash-scm-fpga@.service.in |  7 +++
 7 files changed, 185 insertions(+), 2 deletions(-)
 create mode 100644 obmc-flash-scm-fpga@.service.in

diff --git a/activation.cpp b/activation.cpp
index c82e297..841762f 100644
--- a/activation.cpp
+++ b/activation.cpp
@@ -88,9 +88,9 @@ auto Activation::activation(Activations value) -> Activations

     if (value == softwareServer::Activation::Activations::Activating)
     {
+        auto purpose = parent.versions.find(versionId)->second->purpose();

 #ifdef HOST_BIOS_UPGRADE
-        auto purpose = parent.versions.find(versionId)->second->purpose();
         if (purpose == VersionPurpose::Host)
         {
             if (!activationProgress)
@@ -112,6 +112,28 @@ auto Activation::activation(Activations value) -> Activations
         }
 #endif

+#ifdef SCM_FPGA_UPGRADE
+        if (purpose == VersionPurpose::SCM_FPGA)
+        {
+            if (!activationProgress)
+            {
+                activationProgress =
+                    std::make_unique<ActivationProgress>(bus, path);
+            }
+
+            // Enable systemd signals
+            subscribeToSystemdSignals();
+
+            // Set initial progress
+            activationProgress->progress(20);
+
+            // Initiate image writing to flash
+            flashWriteSCMFPGA();
+
+            return softwareServer::Activation::activation(value);
+        }
+#endif
+
         auto versionStr = parent.versions.find(versionId)->second->version();

         if (!minimum_ship_level::verify(versionStr))
@@ -293,8 +315,9 @@ void Activation::unitStateChange(sdbusplus::message::message& msg)
         return;
     }

-#ifdef HOST_BIOS_UPGRADE
     auto purpose = parent.versions.find(versionId)->second->purpose();
+#ifdef HOST_BIOS_UPGRADE
+
     if (purpose == VersionPurpose::Host)
     {
         onStateChangesBios(msg);
@@ -302,6 +325,14 @@ void Activation::unitStateChange(sdbusplus::message::message& msg)
     }
 #endif

+#ifdef SCM_FPGA_UPGRADE
+    if (purpose == VersionPurpose::SCM_FPGA)
+    {
+    	onStateChangesScmFpga(msg);
+        return;
+    }
+#endif
+
     onStateChanges(msg);

     return;
@@ -445,6 +476,68 @@ void Activation::onStateChangesBios(sdbusplus::message::message& msg)

 #endif

+#ifdef SCM_FPGA_UPGRADE
+void Activation::flashWriteSCMFPGA()
+{
+    auto method = bus.new_method_call(SYSTEMD_BUSNAME, SYSTEMD_PATH,
+                                      SYSTEMD_INTERFACE, "StartUnit");
+    auto scmfpgaServiceFile = "obmc-flash-scm-fpga@" + versionId + ".service";
+    method.append(scmfpgaServiceFile, "replace");
+    try
+    {
+        auto reply = bus.call(method);
+    }
+    catch (const SdBusError& e)
+    {
+        log<level::ERR>("Error in trying to upgrade SCM FPGA.");
+        report<InternalFailure>();
+    }
+}
+
+void Activation::onStateChangesScmFpga(sdbusplus::message::message& msg)
+{
+    uint32_t newStateID{};
+    sdbusplus::message::object_path newStateObjPath;
+    std::string newStateUnit{};
+    std::string newStateResult{};
+
+    // Read the msg and populate each variable
+    msg.read(newStateID, newStateObjPath, newStateUnit, newStateResult);
+
+    auto scmfpgaServiceFile = "obmc-flash-scm-fpga@" + versionId + ".service";
+
+    if (newStateUnit == scmfpgaServiceFile)
+    {
+        // unsubscribe to systemd signals
+        unsubscribeFromSystemdSignals();
+
+        if (newStateResult == "done")
+        {
+            // Remove version object from image manager
+            deleteImageManagerObject();
+
+            // Set activation progress to 100
+            activationProgress->progress(100);
+
+            // Set Activation value to active
+            activation(softwareServer::Activation::Activations::Active);
+
+            log<level::INFO>("SCM FPGA upgrade completed successfully.");
+        }
+        else if (newStateResult == "failed")
+        {
+            // Set Activation value to Failed
+            activation(softwareServer::Activation::Activations::Failed);
+
+            log<level::ERR>("SCM FPGA upgrade failed.");
+        }
+    }
+
+    return;
+}
+
+#endif
+
 void Activation::rebootBmc()
 {
     auto method = bus.new_method_call(SYSTEMD_BUSNAME, SYSTEMD_PATH,
diff --git a/activation.hpp b/activation.hpp
index 90b32b7..e678883 100644
--- a/activation.hpp
+++ b/activation.hpp
@@ -247,6 +247,14 @@ class Activation : public ActivationInherit, public Flash
     void onStateChangesBios(sdbusplus::message::message&);
 #endif

+#ifdef SCM_FPGA_UPGRADE
+    /* @brief write to SCM FPGA flash function */
+    void flashWriteSCMFPGA();
+
+    /** @brief Function that acts on SCM FPGA upgrade service file state changes */
+    void onStateChangesScmFpga(sdbusplus::message::message&);
+#endif
+
     /** @brief Overloaded function that acts on service file state changes */
     void onStateChanges(sdbusplus::message::message&) override;

diff --git a/item_updater.cpp b/item_updater.cpp
index 204bbf8..6516fb7 100644
--- a/item_updater.cpp
+++ b/item_updater.cpp
@@ -67,6 +67,9 @@ void ItemUpdater::createActivation(sdbusplus::message::message& msg)
                     if (value == VersionPurpose::BMC ||
 #ifdef HOST_BIOS_UPGRADE
                         value == VersionPurpose::Host ||
+#endif
+#ifdef SCM_FPGA_UPGRADE
+                        value == VersionPurpose::SCM_FPGA ||
 #endif
                         value == VersionPurpose::System)
                     {
@@ -783,6 +786,39 @@ void ItemUpdater::createBIOSObject()
 }
 #endif

+#ifdef SCM_FPGA_UPGRADE
+void ItemUpdater::createSCMFPGAObject()
+{
+    std::string path = SCM_FPGA_OBJPATH;
+    // Get version id from last item in the path
+    auto pos = path.rfind("/");
+    if (pos == std::string::npos)
+    {
+        log<level::ERR>("No version id found in object path",
+                        entry("SCM_FPGA_OBJPATH=%s", path.c_str()));
+        return;
+    }
+
+    createActiveAssociation(path);
+    createFunctionalAssociation(path);
+
+    auto versionId = path.substr(pos + 1);
+    auto version = "null";
+    AssociationList assocs = {};
+    scmfpgaActivation = std::make_unique<Activation>(
+        bus, path, *this, versionId, server::Activation::Activations::Active,
+        assocs);
+    auto dummyErase = [](std::string /*entryId*/) {
+        // Do nothing;
+    };
+    scmfpgaVersion = std::make_unique<VersionClass>(
+        bus, path, version, VersionPurpose::SCM_FPGA, "", "",
+        std::bind(dummyErase, std::placeholders::_1));
+    scmfpgaVersion->deleteObject =
+        std::make_unique<phosphor::software::manager::Delete>(bus, path,
+                                                              *scmfpgaVersion);
+}
+#endif
 } // namespace updater
 } // namespace software
 } // namespace phosphor
diff --git a/item_updater.hpp b/item_updater.hpp
index b2185b9..5c0b2da 100644
--- a/item_updater.hpp
+++ b/item_updater.hpp
@@ -64,6 +64,9 @@ class ItemUpdater : public ItemUpdaterInherit
         restoreFieldModeStatus();
 #ifdef HOST_BIOS_UPGRADE
         createBIOSObject();
+#endif
+#ifdef SCM_FPGA_UPGRADE
+        createSCMFPGAObject();
 #endif
         emit_object_added();
     };
@@ -272,6 +275,22 @@ class ItemUpdater : public ItemUpdaterInherit
     /** @brief Persistent Version D-Bus object for BIOS */
     std::unique_ptr<VersionClass> biosVersion;
 #endif
+
+#ifdef SCM_FPGA_UPGRADE
+    /** @brief Create the SCM FPGA object without knowing the version.
+     *
+     *  The object is created only to provide the DBus access so that an
+     *  external service could set the correct SCM FPGA version.
+     *  On SCM FPGA code update, the version is updated accordingly.
+     */
+    void createSCMFPGAObject();
+
+    /** @brief Persistent Activation D-Bus object for SCM FPGA */
+    std::unique_ptr<Activation> scmfpgaActivation;
+
+    /** @brief Persistent Version D-Bus object for SCM FPGA */
+    std::unique_ptr<VersionClass> scmfpgaVersion;
+#endif
 };

 } // namespace updater
diff --git a/meson.build b/meson.build
index a6ebcc4..79ee15e 100644
--- a/meson.build
+++ b/meson.build
@@ -59,6 +59,9 @@ conf.set('WANT_SIGNATURE_VERIFY', \
     get_option('verify-full-signature').enabled())
 conf.set('WANT_SIGNATURE_FULL_VERIFY', get_option('verify-full-signature').enabled())

+conf.set('SCM_FPGA_UPGRADE', get_option('scm-fpga-upgrade').enabled())
+
+
 # Configurable variables
 conf.set('ACTIVE_BMC_MAX_ALLOWED', get_option('active-bmc-max-allowed'))
 conf.set_quoted('HASH_FILE_NAME', get_option('hash-file-name'))
@@ -83,6 +86,10 @@ if get_option('host-bios-upgrade').enabled()
     conf.set_quoted('BIOS_OBJPATH', get_option('bios-object-path'))
 endif

+if get_option('scm-fpga-upgrade').enabled()
+    conf.set_quoted('SCM_FPGA_OBJPATH', get_option('scm-fpga-object-path'))
+endif
+
 configure_file(output: 'config.h', configuration: conf)

 deps = [
@@ -162,6 +169,10 @@ if get_option('host-bios-upgrade').enabled()
     unit_files += 'obmc-flash-host-bios@.service.in'
 endif

+if get_option('scm-fpga-upgrade').enabled()
+    unit_files += 'obmc-flash-scm-fpga@.service.in'
+endif
+
 if get_option('sync-bmc-files').enabled()
     executable(
         'phosphor-sync-software-manager',
diff --git a/meson_options.txt b/meson_options.txt
index 0877798..4dfb57c 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -12,6 +12,9 @@ option('bmc-layout', type: 'combo',
 option('host-bios-upgrade', type: 'feature',
     description: 'Enable host bios upgrade support.')

+option('scm-fpga-upgrade', type: 'feature',
+    description: 'Enable scm fpga upgrade support.')
+
 option('sync-bmc-files', type: 'feature',
     description: 'Enable sync of filesystem files.')

@@ -110,3 +113,9 @@ option(
     value: '/xyz/openbmc_project/software/bios_active',
     description: 'The BIOS DBus object path.',
 )
+
+option(
+    'scm-fpga-object-path', type: 'string',
+    value: '/xyz/openbmc_project/software/scm_fpga_active',
+    description: 'The SCM FPGA DBus object path.',
+)
diff --git a/obmc-flash-scm-fpga@.service.in b/obmc-flash-scm-fpga@.service.in
new file mode 100644
index 0000000..ac0fea5
--- /dev/null
+++ b/obmc-flash-scm-fpga@.service.in
@@ -0,0 +1,7 @@
+[Unit]
+Description=Flash SCM FPGA image %I to SCM FPGA
+
+[Service]
+Type=oneshot
+RemainAfterExit=no
+ExecStart=echo Please add custom command for flashing image /tmp/image/%i
--
2.17.1

