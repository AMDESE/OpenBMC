From 4055489442ca0c81fd384f54bf27051bfbdbd165 Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Tue, 7 Jun 2022 04:19:23 -0500
Subject: [PATCH] Add Set Sensor threshold IPMI command

Register ipmiSensorSetSensorThresholds for setting sensor thresholds,
which was missing in base IPMI implementation.

Examples:
ipmitool sensor thresh BMC upper 39 42 45
ipmitool sensor thresh BMC lower 0 1 3
ipmitool sensor thresh BMC ucr 43

Signed-off-by: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
---
 sensorhandler.cpp | 108 ++++++++++++++++++++++++++++++++++++++++++++++
 sensorhandler.hpp |   1 +
 2 files changed, 109 insertions(+)

diff --git a/sensorhandler.cpp b/sensorhandler.cpp
index 364462a..f051617 100644
--- a/sensorhandler.cpp
+++ b/sensorhandler.cpp
@@ -33,6 +33,8 @@ extern FruMap frus;
 using namespace phosphor::logging;
 using InternalFailure =
     sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure;
+using Value = std::variant<bool, uint8_t, int16_t, uint16_t, int32_t, uint32_t,
+                           int64_t, uint64_t, double, std::string>;

 void register_netfn_sen_functions() __attribute__((constructor));

@@ -464,6 +466,107 @@ ipmi::RspType<uint8_t, // sensor reading
     }
 }

+ipmi::RspType<> setSensorThresholds(const ipmi::sensor::Info *info, uint8_t set_mask,
+                                    uint8_t lower_non_crit, uint8_t lower_crit,
+                                    uint8_t upper_non_crit, uint8_t upper_crit)
+{
+    Value value;
+    std::string property;
+    std::string Iface;
+
+    constexpr auto warningThreshIntf =
+        "xyz.openbmc_project.Sensor.Threshold.Warning";
+    constexpr auto criticalThreshIntf =
+        "xyz.openbmc_project.Sensor.Threshold.Critical";
+
+    // Set lower_non_crit
+    if (set_mask == static_cast<uint8_t>(ipmi::sensor::ThresholdMask::NON_CRITICAL_LOW_MASK))
+    {
+        property  = "WarningLow";
+        Iface     = warningThreshIntf;
+        value     = static_cast<double>(lower_non_crit);
+    }
+    else if (set_mask == static_cast<uint8_t>(ipmi::sensor::ThresholdMask::CRITICAL_LOW_MASK))
+    {
+        property  = "CriticalLow";
+        Iface     = criticalThreshIntf;
+        value     = static_cast<double>(lower_crit);
+    }
+    else if (set_mask == static_cast<uint8_t>(ipmi::sensor::ThresholdMask::NON_CRITICAL_HIGH_MASK))
+    {
+        property  = "WarningHigh";
+        Iface     = warningThreshIntf;
+        value     = static_cast<double>(upper_non_crit);
+    }
+    else if (set_mask == static_cast<uint8_t>(ipmi::sensor::ThresholdMask::CRITICAL_HIGH_MASK))
+    {
+        property  = "CriticalHigh";
+        Iface     = criticalThreshIntf;
+        value     = static_cast<double>(upper_crit);
+    }
+    else
+    {
+        // Return Success - as AlarmHigh and AlarmLow does not exist in DBUS Interface
+        return ipmi::responseSuccess();
+    }
+
+    sdbusplus::bus::bus bus(ipmid_get_sd_bus_connection());
+    auto service = ipmi::getService(bus, info->sensorInterface, info->sensorPath);
+
+    sd_journal_print(LOG_INFO,
+                     "Setting DBUS Service = %s\n, Path = %s\n, IFace = %s\n, Property = %s\n, Value=%lf",
+                     service.c_str(), info->sensorPath.c_str(), Iface.c_str(), property.c_str(), std::get<double>(value));
+
+    ipmi::setDbusProperty(bus, service, info->sensorPath, Iface, property, std::get<double>(value));
+
+    return ipmi::responseSuccess();
+}
+
+/** @brief implements the set sensor thresholds command
+ *  @param sensorNum - sensor number
+ *
+ *  @returns IPMI completion code
+ */
+ipmi::RspType<>
+    ipmiSensorSetSensorThresholds(uint8_t sensor_num, uint8_t set_mask, uint8_t lower_non_crit,
+                                  uint8_t lower_crit, uint8_t lower_non_recov, uint8_t upper_non_crit,
+                                  uint8_t upper_crit, uint8_t upper_non_recov)
+{
+    constexpr auto valueInterface = "xyz.openbmc_project.Sensor.Value";
+
+    const auto iter = ipmi::sensor::sensors.find(sensor_num);
+    if (iter == ipmi::sensor::sensors.end())
+    {
+        return ipmi::responseSensorInvalid();
+    }
+
+    const auto info = iter->second;
+
+    // Proceed only if the sensor value interface is implemented.
+    if (info.propertyInterfaces.find(valueInterface) ==
+        info.propertyInterfaces.end())
+    {
+        // return with valid mask as 0
+        return ipmi::responseSuccess();
+    }
+
+    ipmi::RspType<> resp;
+    try
+    {
+        resp = setSensorThresholds(&info, set_mask,
+                                   lower_non_crit, lower_crit,
+                                   upper_non_crit, upper_crit);
+    }
+    catch (std::exception& e)
+    {
+        // Mask if the property is not present
+        sd_journal_print(LOG_ERR,"Setting DBUS Property failed");
+        return ipmi::responseInvalidFieldRequest();
+    }
+
+    return resp;
+}
+
 get_sdr::GetSensorThresholdsResponse getSensorThresholds(uint8_t sensorNum)
 {
     get_sdr::GetSensorThresholdsResponse resp{};
@@ -1125,5 +1228,10 @@ void register_netfn_sen_functions()
                           ipmi::sensor_event::cmdGetSensorThreshold,
                           ipmi::Privilege::User, ipmiSensorGetSensorThresholds);

+    // <Set Sensor Thresholds>
+    ipmi::registerHandler(ipmi::prioOpenBmcBase, ipmi::netFnSensor,
+                          ipmi::sensor_event::cmdSetSensorThreshold,
+                          ipmi::Privilege::User, ipmiSensorSetSensorThresholds);
+
     return;
 }
diff --git a/sensorhandler.hpp b/sensorhandler.hpp
index 27bdb64..fb72f86 100644
--- a/sensorhandler.hpp
+++ b/sensorhandler.hpp
@@ -16,6 +16,7 @@ enum ipmi_netfn_sen_cmds
     IPMI_CMD_GET_SENSOR_READING = 0x2D,
     IPMI_CMD_GET_SENSOR_TYPE = 0x2F,
     IPMI_CMD_SET_SENSOR = 0x30,
+    IPMI_CMD_SET_SENSOR_THRESHOLDS = 0x26,
     IPMI_CMD_GET_SENSOR_THRESHOLDS = 0x27,
 };

