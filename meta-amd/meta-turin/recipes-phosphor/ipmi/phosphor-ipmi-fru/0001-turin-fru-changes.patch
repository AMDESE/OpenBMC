From 307740c19be3bf7a8f259a4e4ddfd47a70df8cdb Mon Sep 17 00:00:00 2001
From: Alisha Kulkarni <ALISHA.KULKARNI@amd.com>
Date: Thu, 22 Dec 2022 16:14:04 -0600
Subject: [PATCH 1/1] turin-fru-changes

Signed-off-by: Alisha Kulkarni <ALISHA.KULKARNI@amd.com>
---
 Makefile.am                       |  57 ++++++++++++--
 configure.ac                      |  47 +++++++++--
 frup.hpp                          |   8 ++
 scripts/extra-properties.mako.cpp |   2 +-
 scripts/extra-properties.py       |  10 ++-
 scripts/fru_gen.py                |  13 +++-
 scripts/writefru.mako.cpp         |   2 +-
 types.hpp                         |   8 ++
 writefrudata.cpp                  | 125 +++++++++++++++++++++++++++++-
 9 files changed, 249 insertions(+), 23 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index 2288a3b..6795fe8 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,4 +1,16 @@
-BUILT_SOURCES=fru-gen.cpp extra-properties-gen.cpp
+BUILT_SOURCES= galena-fru-gen.cpp \
+	galena-extra-properties-gen.cpp \
+	recluse-fru-gen.cpp \
+	recluse-extra-properties-gen.cpp \
+	chalupa-fru-gen.cpp \
+	chalupa-extra-properties-gen.cpp \
+	purico-fru-gen.cpp \
+	purico-extra-properties-gen.cpp \
+	volcano-fru-gen.cpp \
+	volcano-extra-properties-gen.cpp \
+	huambo-fru-gen.cpp \
+	huambo-extra-properties-gen.cpp
+
 AM_DEFAULT_SOURCE_EXT = .cpp

 CLEANFILES=$(BUILT_SOURCES)
@@ -16,10 +28,21 @@ phosphor_read_eeprom_LDADD = libwritefrudata.la

 lib_LTLIBRARIES = libwritefrudata.la
 libwritefrudata_la_SOURCES = frup.cpp \
-	fru-gen.cpp \
+	galena-fru-gen.cpp \
+	recluse-fru-gen.cpp \
+	chalupa-fru-gen.cpp \
+	purico-fru-gen.cpp \
+	volcano-fru-gen.cpp \
+	huambo-fru-gen.cpp \
 	fru_area.cpp \
 	writefrudata.cpp \
-	extra-properties-gen.cpp
+	galena-extra-properties-gen.cpp \
+	recluse-extra-properties-gen.cpp \
+	chalupa-extra-properties-gen.cpp \
+	purico-extra-properties-gen.cpp \
+	volcano-extra-properties-gen.cpp \
+	huambo-extra-properties-gen.cpp
+
 libwritefrudata_la_LDFLAGS = $(SYSTEMD_LIBS) \
 	$(libmapper_LIBS) \
 	$(SDBUSPLUS_LIBS) \
@@ -41,7 +64,27 @@ libstrgfnhandler_la_LIBADD = libwritefrudata.la
 libstrgfnhandler_la_CXXFLAGS = $(PHOSPHOR_LOGGING_CFLAGS) \
 	$(LIBIPMID_CFLAGS)

-fru-gen.cpp:
-	$(AM_V_GEN)@FRUGEN@ -o $(top_builddir) generate-cpp
-extra-properties-gen.cpp:
-	$(AM_V_GEN)@PROPGEN@
+galena-fru-gen.cpp:
+	$(AM_V_GEN)@GALENA_FRUGEN@ -o $(top_builddir) -p galena generate-cpp
+galena-extra-properties-gen.cpp:
+	$(AM_V_GEN)@GALENA_PROPGEN@ -p galena
+recluse-fru-gen.cpp:
+	$(AM_V_GEN)@RECLUSE_FRUGEN@ -o $(top_builddir) -p recluse generate-cpp
+recluse-extra-properties-gen.cpp:
+	$(AM_V_GEN)@RECLUSE_PROPGEN@ -p recluse
+chalupa-fru-gen.cpp:
+	$(AM_V_GEN)@CHALUPA_FRUGEN@ -o $(top_builddir) -p chalupa generate-cpp
+chalupa-extra-properties-gen.cpp:
+	$(AM_V_GEN)@CHALUPA_PROPGEN@ -p chalupa
+purico-fru-gen.cpp:
+	$(AM_V_GEN)@PURICO_FRUGEN@ -o $(top_builddir) -p purico generate-cpp
+purico-extra-properties-gen.cpp:
+	$(AM_V_GEN)@PURICO_PROPGEN@ -p purico
+volcano-fru-gen.cpp:
+	$(AM_V_GEN)@VOLCANO_FRUGEN@ -o $(top_builddir) -p volcano generate-cpp
+volcano-extra-properties-gen.cpp:
+	$(AM_V_GEN)@VOLCANO_PROPGEN@ -p volcano
+huambo-fru-gen.cpp:
+	$(AM_V_GEN)@HUAMBO_FRUGEN@ -o $(top_builddir) -p huambo generate-cpp
+huambo-extra-properties-gen.cpp:
+	$(AM_V_GEN)@HUAMBO_PROPGEN@ -p huambo
diff --git a/configure.ac b/configure.ac
index 47c31bb..75eff72 100644
--- a/configure.ac
+++ b/configure.ac
@@ -64,12 +64,47 @@ AS_IF([test "x$enable_oe_sdk" == "xyes"],
     AC_SUBST([OESDK_TESTCASE_FLAGS], [$testcase_flags])
 )

-AS_IF([test "x$YAML_GEN" == "x"], [YAML_GEN="example.yaml"])
-FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $YAML_GEN"
-AC_SUBST(FRUGEN)
-AS_IF([test "x$PROP_YAML" == "x"], [PROP_YAML="extra-properties-example.yaml"])
-PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $PROP_YAML"
-AC_SUBST(PROPGEN)
+AS_IF([test "x$GALENA_YAML_GEN" == "x"], [GALENA_YAML_GEN="example.yaml"])
+GALENA_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $GALENA_YAML_GEN"
+AC_SUBST(GALENA_FRUGEN)
+AS_IF([test "x$GALENA_PROP_YAML" == "x"], [GALENA_PROP_YAML="extra-properties-example.yaml"])
+GALENA_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $GALENA_PROP_YAML"
+AC_SUBST(GALENA_PROPGEN)
+
+AS_IF([test "x$RECLUSE_YAML_GEN" == "x"], [RECLUSE_YAML_GEN="example.yaml"])
+RECLUSE_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $RECLUSE_YAML_GEN"
+AC_SUBST(RECLUSE_FRUGEN)
+AS_IF([test "x$RECLUSE_PROP_YAML" == "x"], [RECLUSE_PROP_YAML="extra-properties-example.yaml"])
+RECLUSE_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $RECLUSE_PROP_YAML"
+AC_SUBST(RECLUSE_PROPGEN)
+
+AS_IF([test "x$CHALUPA_YAML_GEN" == "x"], [CHALUPA_YAML_GEN="example.yaml"])
+CHALUPA_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $CHALUPA_YAML_GEN"
+AC_SUBST(CHALUPA_FRUGEN)
+AS_IF([test "x$CHALUPA_PROP_YAML" == "x"], [CHALUPA_PROP_YAML="extra-properties-example.yaml"])
+CHALUPA_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $CHALUPA_PROP_YAML"
+AC_SUBST(CHALUPA_PROPGEN)
+
+AS_IF([test "x$PURICO_YAML_GEN" == "x"], [PURICO_YAML_GEN="example.yaml"])
+PURICO_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $PURICO_YAML_GEN"
+AC_SUBST(PURICO_FRUGEN)
+AS_IF([test "x$PURICO_PROP_YAML" == "x"], [PURICO_PROP_YAML="extra-properties-example.yaml"])
+PURICO_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $PURICO_PROP_YAML"
+AC_SUBST(PURICO_PROPGEN)
+
+AS_IF([test "x$VOLCANO_YAML_GEN" == "x"], [VOLCANO_YAML_GEN="example.yaml"])
+VOLCANO_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $VOLCANO_YAML_GEN"
+AC_SUBST(VOLCANO_FRUGEN)
+AS_IF([test "x$VOLCANO_PROP_YAML" == "x"], [VOLCANO_PROP_YAML="extra-properties-example.yaml"])
+VOLCANO_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $VOLCANO_PROP_YAML"
+AC_SUBST(VOLCANO_PROPGEN)
+
+AS_IF([test "x$HUAMBO_YAML_GEN" == "x"], [HUAMBO_YAML_GEN="example.yaml"])
+HUAMBO_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $HUAMBO_YAML_GEN"
+AC_SUBST(HUAMBO_FRUGEN)
+AS_IF([test "x$HUAMBO_PROP_YAML" == "x"], [HUAMBO_PROP_YAML="extra-properties-example.yaml"])
+HUAMBO_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $HUAMBO_PROP_YAML"
+AC_SUBST(HUAMBO_PROPGEN)

 # Create configured output
 AC_CONFIG_FILES([Makefile])
diff --git a/frup.hpp b/frup.hpp
index 6afd621..c6fbcb0 100644
--- a/frup.hpp
+++ b/frup.hpp
@@ -112,4 +112,12 @@ int parse_fru(const void* msgbuf, sd_bus_message* vpdtbl);
 int parse_fru_area(const uint8_t area, const void* msgbuf, const size_t len,
                    IPMIFruInfo& info);

+extern FruMap frus;
+extern const FruMap galena_frus;
+extern const FruMap recluse_frus;
+extern const FruMap chalupa_frus;
+extern const FruMap purico_frus;
+extern const FruMap volcano_frus;
+extern const FruMap huambo_frus;
+
 #endif
diff --git a/scripts/extra-properties.mako.cpp b/scripts/extra-properties.mako.cpp
index e566cec..2dda098 100644
--- a/scripts/extra-properties.mako.cpp
+++ b/scripts/extra-properties.mako.cpp
@@ -6,7 +6,7 @@

 using namespace ipmi::vpd;

-extern const std::map<Path, InterfaceMap> extras = {
+const std::map<Path, InterfaceMap> ipmi::vpd::${platform}_extras = {
 % for path in dict.keys():
 <%
     interfaces = dict[path]
diff --git a/scripts/extra-properties.py b/scripts/extra-properties.py
index c63ec9c..fbbd23b 100755
--- a/scripts/extra-properties.py
+++ b/scripts/extra-properties.py
@@ -15,6 +15,12 @@ def main():
         dest='extra_props_yaml',
         default='extra-properties-example.yaml',
         help='input extra properties yaml file to parse')
+
+    parser.add_argument(
+        "-p", "--platform", dest="platform",
+        default="amd",
+        help="platform name")
+
     args = parser.parse_args()

     with open(os.path.join(script_dir, args.extra_props_yaml), 'r') as fd:
@@ -23,10 +29,10 @@ def main():
         # Render the mako template
         template = os.path.join(script_dir, 'extra-properties.mako.cpp')
         t = Template(filename=template)
-        with open('extra-properties-gen.cpp', 'w') as fd:
+        with open(args.platform+'-'+'extra-properties-gen.cpp', 'w') as fd:
             fd.write(
                 t.render(
-                    dict=yamlDict))
+                    dict=yamlDict, platform=args.platform))


 if __name__ == '__main__':
diff --git a/scripts/fru_gen.py b/scripts/fru_gen.py
index 5241f2f..dead1b7 100755
--- a/scripts/fru_gen.py
+++ b/scripts/fru_gen.py
@@ -7,7 +7,7 @@ import argparse
 from mako.template import Template


-def generate_cpp(inventory_yaml, output_dir):
+def generate_cpp(inventory_yaml, output_dir, plat_name):
     with open(os.path.join(script_dir, inventory_yaml), 'r') as f:
         ifile = yaml.safe_load(f)
         if not isinstance(ifile, dict):
@@ -19,9 +19,9 @@ def generate_cpp(inventory_yaml, output_dir):
                      script_dir,
                      "writefru.mako.cpp"))

-        output_hpp = os.path.join(output_dir, "fru-gen.cpp")
+        output_hpp = os.path.join(output_dir, plat_name+"-fru-gen.cpp")
         with open(output_hpp, 'w') as fd:
-            fd.write(t.render(fruDict=ifile))
+            fd.write(t.render(fruDict=ifile, platform=plat_name))


 def main():
@@ -41,6 +41,11 @@ def main():
         default=".",
         help="output directory")

+    parser.add_argument(
+        "-p", "--platform", dest="platform",
+        default="amd",
+        help="platform name")
+
     parser.add_argument(
         'command', metavar='COMMAND', type=str,
         choices=list(valid_commands.keys()),
@@ -52,7 +57,7 @@ def main():
         sys.exit("Can not find input yaml file " + args.inventory_yaml)

     function = valid_commands[args.command]
-    function(args.inventory_yaml, args.outputdir)
+    function(args.inventory_yaml, args.outputdir, args.platform)

 if __name__ == '__main__':
     script_dir = os.path.dirname(os.path.realpath(__file__))
diff --git a/scripts/writefru.mako.cpp b/scripts/writefru.mako.cpp
index a3de4b5..9be0340 100644
--- a/scripts/writefru.mako.cpp
+++ b/scripts/writefru.mako.cpp
@@ -2,7 +2,7 @@
 #include <iostream>
 #include "frup.hpp"

-extern const FruMap frus = {
+const FruMap ${platform}_frus = {
 % for key in fruDict.keys():
    {${key},{
 <%
diff --git a/types.hpp b/types.hpp
index 46abfe0..5179aad 100644
--- a/types.hpp
+++ b/types.hpp
@@ -33,5 +33,13 @@ using InterfaceMap = std::map<Interface, PropertyMap>;
 using Object = sdbusplus::message::object_path;
 using ObjectMap = std::map<Object, InterfaceMap>;

+extern std::map<Path, InterfaceMap> extras;
+extern const std::map<Path, InterfaceMap> galena_extras;
+extern const std::map<Path, InterfaceMap> recluse_extras;
+extern const std::map<Path, InterfaceMap> chalupa_extras;
+extern const std::map<Path, InterfaceMap> purico_extras;
+extern const std::map<Path, InterfaceMap> volcano_extras;
+extern const std::map<Path, InterfaceMap> huambo_extras;
+
 } // namespace vpd
 } // namespace ipmi
diff --git a/writefrudata.cpp b/writefrudata.cpp
index eca66d6..42c47b0 100644
--- a/writefrudata.cpp
+++ b/writefrudata.cpp
@@ -20,11 +20,30 @@
 #include <sstream>
 #include <vector>

+// Platform Type
+constexpr auto GALENA_1       = 104;   //0x68
+constexpr auto GALENA_2       = 112;   //0x70
+constexpr auto GALENA_3       = 113;   //0x71
+constexpr auto RECLUSE        = 105;   //0x69
+constexpr auto CHALUPA_1      = 102;   //0x66
+constexpr auto CHALUPA_2      = 110;   //0x6E
+constexpr auto CHALUPA_3      = 111;   //0x6F
+constexpr auto PURICO_1       = 106;   //0x6A
+constexpr auto PURICO_2       = 114;   //0x72
+constexpr auto PURICO_3       = 115;   //0x73
+constexpr auto VOLCANO_1      = 107;   //0x6B
+constexpr auto VOLCANO_2      = 116;   //0x74
+constexpr auto VOLCANO_3      = 117;   //0x75
+constexpr auto HUAMBO         = 103;   //0x67
+
+#define COMMAND_BOARD_ID    ("/sbin/fw_printenv -n board_id")
+#define COMMAND_LEN         3
+
 using namespace ipmi::vpd;
 using namespace phosphor::logging;

-extern const FruMap frus;
-extern const std::map<Path, InterfaceMap> extras;
+FruMap frus;
+std::map<Path, InterfaceMap> ipmi::vpd::extras;

 using FruAreaVector = std::vector<std::unique_ptr<IPMIFruArea>>;

@@ -159,6 +178,64 @@ auto getService(sdbusplus::bus::bus& bus, const std::string& intf,
     return mapperResponse.begin()->first;
 }

+std::string getPlatformID()
+{
+    FILE *pf;
+    char data[COMMAND_LEN] = {0};
+    std::stringstream ss;
+    unsigned int board_id = 0;
+
+    // Setup pipe for reading and execute to get u-boot environment
+    // variable board_id.
+    pf = popen(COMMAND_BOARD_ID,"r");
+
+    if(pf > 0)
+    {   // no error
+        if (fgets(data, COMMAND_LEN , pf) != NULL)
+        {
+            ss << std::hex << (std::string)data;
+            ss >> board_id;
+        }
+        pclose(pf);
+        if ( board_id > 0 || board_id < 0xFF )
+        {
+           switch (board_id)
+            {
+                case GALENA_1:
+                case GALENA_2:
+                case GALENA_3:
+                   return "galena";
+                case RECLUSE:
+                   return "recluse";
+                case PURICO_1:
+                case PURICO_2:
+                case PURICO_3:
+                    return "purico";
+                case CHALUPA_1:
+                case CHALUPA_2:
+                case CHALUPA_3:
+                    return "chalupa";
+                case VOLCANO_1:
+                case VOLCANO_2:
+                case VOLCANO_3:
+                    return "volcano";
+                case HUAMBO:
+                    return "huambo";
+                default:
+                    return "chalupa";
+            }//switch
+        }
+    }
+    else
+    {
+        log<level::DEBUG>("Unable to determine platform",
+                          entry("Defaulting to 2P"));
+    }
+
+    return "chalupa";
+}
+
+
 /**
  * Takes FRU data, invokes Parser for each FRU record area and updates
  * inventory.
@@ -174,6 +251,50 @@ int updateInventory(FruAreaVector& areaVector, sdbusplus::bus::bus& bus)
     uint8_t fruid = 0;
     IPMIFruInfo fruData;

+    // Load platform data structure
+    std::string platform = getPlatformID();
+    if (platform.compare("chalupa") == 0)
+    {
+        log<level::INFO>("Loading Chalupa configuration");
+        frus = chalupa_frus;
+        extras = chalupa_extras;
+    }
+    else if (platform.compare("galena") == 0)
+    {
+        log<level::INFO>("Loading Galena configuration");
+        frus = galena_frus;
+        extras = galena_extras;
+    }
+    else if (platform.compare("recluse") == 0)
+    {
+        log<level::INFO>("Loading Recluse configuration");
+        frus = recluse_frus;
+        extras = recluse_extras;
+    }
+    else if (platform.compare("purico") == 0)
+    {
+        log<level::INFO>("Loading Purico configuration");
+        frus = purico_frus;
+        extras = purico_extras;
+    }
+    else if (platform.compare("volcano") == 0)
+    {
+        log<level::INFO>("Loading Volcano configuration");
+        frus = volcano_frus;
+        extras = volcano_extras;
+    }
+    else if (platform.compare("huambo") == 0)
+    {
+        log<level::INFO>("Loading Huambo configuration");
+        frus = huambo_frus;
+        extras = huambo_extras;
+    }
+    else
+    {
+        log<level::ERR>("Unknown platform?!",
+                          entry("Registration failed"));
+    }
+
     // For each FRU area, extract the needed data , get it parsed and update
     // the Inventory.
     for (const auto& fruArea : areaVector)
--
2.17.1

