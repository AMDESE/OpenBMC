From b1216e623ee911a8e20bfd3427b6650cdda9f7d9 Mon Sep 17 00:00:00 2001
From: Vinu Vaghasia <vinu.vaghasia@amd.com>
Date: Thu, 5 Aug 2021 18:57:05 -0500
Subject: [PATCH 1/1] u-boot-sdk : Add device tree selection code

1. Code read the board_id from env variable
2. Selects the appropriate device tree based on board_id

Signed-off-by: Vinu Vaghasia <vinu.vaghasia@amd.com>
---
 common/image-fit.c | 36 ++++++++++++++++++++++++++++++++----
 tools/Makefile     |  5 +++++
 2 files changed, 37 insertions(+), 4 deletions(-)

diff --git a/common/image-fit.c b/common/image-fit.c
index 3c8667f93d..db3d3ea961 100644
--- a/common/image-fit.c
+++ b/common/image-fit.c
@@ -11,10 +11,13 @@
 #ifdef USE_HOSTCC
 #include "mkimage.h"
 #include <time.h>
+#include "env/fw_env.h"
+#define env_get fw_getenv
 #else
 #include <linux/compiler.h>
 #include <linux/kconfig.h>
 #include <common.h>
+#include <u-boot/crc.h>
 #include <errno.h>
 #include <mapmem.h>
 #include <asm/io.h>
@@ -24,7 +27,6 @@ DECLARE_GLOBAL_DATA_PTR;

 #include <image.h>
 #include <bootstage.h>
-#include <u-boot/crc.h>
 #include <u-boot/md5.h>
 #include <u-boot/sha1.h>
 #include <u-boot/sha256.h>
@@ -1795,6 +1797,11 @@ int fit_image_load(bootm_headers_t *images, ulong addr,
	const char *fit_base_uname_config;
	const void *fit;
	const void *buf;
+	const int conf_name_size = 64;
+	char *conf_name;
+	char *platform_id;
+	int board_id;
+
	size_t size;
	int type_ok, os_ok;
	ulong load, data, len;
@@ -1811,7 +1818,6 @@ int fit_image_load(bootm_headers_t *images, ulong addr,
	fit_base_uname_config = NULL;
	prop_name = fit_get_image_type_property(image_type);
	printf("## Loading %s from FIT Image at %08lx ...\n", prop_name, addr);
-
	bootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT);
	if (!fit_check_format(fit)) {
		printf("Bad FIT %s image format!\n", prop_name);
@@ -1833,6 +1839,30 @@ int fit_image_load(bootm_headers_t *images, ulong addr,
		if (IMAGE_ENABLE_BEST_MATCH && !fit_uname_config) {
			cfg_noffset = fit_conf_find_compat(fit, gd_fdt_blob());
		} else {
+			fit_uname_config = (char *) malloc(conf_name_size);
+
+			// Reading board_id from ENV
+			platform_id = env_get("board_id");
+			// Convert bd_id string to integer
+			board_id = ( (platform_id[0]-'0')*16 + (platform_id[1]-'0'));
+
+			// select the  device tree configuration based on board_id
+			if ( board_id == 0x40 || board_id == 0x41 || board_id == 0x42 ) {
+				sprintf((char *)fit_uname_config, "conf-aspeed-bmc-amd-onyx.dtb");
+			}
+			else if ( board_id == 0x43 || board_id == 0x44 || board_id == 0x45 ) {
+				sprintf((char *)fit_uname_config, "conf-aspeed-bmc-amd-quartz.dtb");
+			}
+			else if ( board_id == 0x46 || board_id == 0x47 || board_id == 0x48 ) {
+				sprintf((char *)fit_uname_config, "conf-aspeed-bmc-amd-ruby.dtb");
+			}
+			else if ( board_id == 0x49 || board_id == 0x4A || board_id == 0x4B ) {
+				sprintf((char *)fit_uname_config, "conf-aspeed-bmc-amd-titanite.dtb");
+			}
+			else {
+				sprintf((char *)fit_uname_config, "conf-aspeed-bmc-amd-onyx.dtb");
+			}
+
			cfg_noffset = fit_conf_get_node(fit,
							fit_uname_config);
		}
@@ -1842,7 +1872,6 @@ int fit_image_load(bootm_headers_t *images, ulong addr,
					BOOTSTAGE_SUB_NO_UNIT_NAME);
			return -ENOENT;
		}
-
		fit_base_uname_config = fdt_get_name(fit, cfg_noffset, NULL);
		printf("   Using '%s' configuration\n", fit_base_uname_config);
		/* Remember this config */
@@ -2064,7 +2093,6 @@ int boot_get_fdt_fit(bootm_headers_t *images, ulong addr,
		if (next_config - 1 > fit_uname_config_copy)
			fit_uname_config = fit_uname_config_copy;
	}
-
	fdt_noffset = fit_image_load(images,
		addr, &fit_uname, &fit_uname_config,
		arch, IH_TYPE_FLATDT,
diff --git a/tools/Makefile b/tools/Makefile
index 81aa374a32..64e5c6230f 100644
--- a/tools/Makefile
+++ b/tools/Makefile
@@ -77,6 +77,9 @@ RSA_OBJS-$(CONFIG_FIT_SIGNATURE) := $(addprefix lib/rsa/, \

 ROCKCHIP_OBS = lib/rc4.o rkcommon.o rkimage.o rksd.o rkspi.o

+ENV_OBJS = $(addprefix env/, fw_env.o ctype.o linux_string.o \
+				env_attr.o env_flags.o )
+
 # common objs for dumpimage and mkimage
 dumpimage-mkimage-objs := aisimage.o \
			atmelimage.o \
@@ -88,6 +91,7 @@ dumpimage-mkimage-objs := aisimage.o \
			lib/fdtdec.o \
			fit_common.o \
			fit_image.o \
+			$(ENV_OBJS) \
			common/image-fit.o \
			image-host.o \
			common/image.o \
@@ -254,6 +258,7 @@ HOST_EXTRACFLAGS += -include $(srctree)/include/compiler.h \
		$(patsubst -I%,-idirafter%, $(filter -I%, $(UBOOTINCLUDE))) \
		-I$(srctree)/scripts/dtc/libfdt \
		-I$(srctree)/tools \
+		-I$(srctree)/tools/env \
		-DUSE_HOSTCC \
		-D__KERNEL_STRICT_NAMES \
		-D_GNU_SOURCE \
--
2.17.1

