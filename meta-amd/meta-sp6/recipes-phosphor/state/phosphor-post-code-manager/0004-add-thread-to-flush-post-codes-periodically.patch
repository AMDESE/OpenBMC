From 3d33e3bae0be6abbc3782b4fc3ae07bcb4b0f221 Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Mon, 28 Feb 2022 05:28:18 -0600
Subject: [PATCH] add thread to flush post codes periodically

---
 inc/post_code.hpp |  4 +++-
 src/post_code.cpp | 19 ++++++++++++++++++-
 2 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/inc/post_code.hpp b/inc/post_code.hpp
index 2c39c19..2a90c71 100644
--- a/inc/post_code.hpp
+++ b/inc/post_code.hpp
@@ -178,6 +178,7 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
             count);
         currentBootCycleCount(count);
         maxBootCycleNum(MaxPostCodeCycles);
+        scheduled_flush();
     }
     ~PostCode()
     {
@@ -187,7 +188,7 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
     std::map<uint64_t, postcode_t>
         getPostCodesWithTimeStamp(uint16_t index) override;
     void deleteAll() override;
-
+    void scheduled_flush();
   private:
     void incrBootCycle();
     uint16_t getBootNum(const uint16_t index) const;
@@ -195,6 +196,7 @@ struct PostCode : sdbusplus::server::object_t<post_code, delete_all>
     sdbusplus::bus::bus &bus;
     std::chrono::time_point<std::chrono::steady_clock> firstPostCodeTimeSteady;
     uint64_t firstPostCodeUsSinceEpoch;
+    uint32_t last_flushed_entries = 0;
     std::map<uint64_t, postcode_t> postCodes;
     std::string strPostCodeListPath;
     std::string strCurrentBootCycleIndexName;
diff --git a/src/post_code.cpp b/src/post_code.cpp
index 0db3e20..aa5aa44 100644
--- a/src/post_code.cpp
+++ b/src/post_code.cpp
@@ -48,6 +48,23 @@ void writeLCD(postcode_t code)
         lcdlib_close_dev();
     }
 }
+
+#define FLUSH_INTERVAL    10
+
+void PostCode::scheduled_flush()
+{
+    std::thread([this](){
+        while(1) {
+            std::this_thread::sleep_for(std::chrono::seconds(FLUSH_INTERVAL));
+	    if( !PostCode::postCodes.empty() && (PostCode::postCodes.size() > last_flushed_entries))
+            {
+                last_flushed_entries = PostCode::postCodes.size();
+                PostCode::serialize(fs::path(PostCode::strPostCodeListPath));
+            }
+        }
+    }).detach();
+}
+
 std::vector<postcode_t> PostCode::getPostCodes(uint16_t index)
 {
     std::vector<postcode_t> codesVec;
@@ -109,7 +126,6 @@ void PostCode::savePostCodes(postcode_t code)
     }

     postCodes.insert(std::make_pair(tsUS, code));
-    serialize(fs::path(strPostCodeListPath));

     writeLCD(code);

@@ -262,6 +278,7 @@ void PostCode::incrBootCycle()
         currentBootCycleCount(std::min(
             maxBootCycleNum(), static_cast<uint16_t>(currentBootCycleCount() + 1)));
     }
+    last_flushed_entries = 0;
 }

 uint16_t PostCode::getBootNum(const uint16_t index) const
