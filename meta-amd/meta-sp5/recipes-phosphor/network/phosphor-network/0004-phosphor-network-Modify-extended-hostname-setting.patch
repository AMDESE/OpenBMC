From 15f9082b37cea91ffb9428345c9c2b0c32d97da5 Mon Sep 17 00:00:00 2001
From: Vinu Vaghasia <vinu.vaghasia@amd.com>
Date: Fri, 12 Nov 2021 12:19:56 -0600
Subject: [PATCH 1/1] phosphor-network : Modify extended hostname to settings

Code modified to set the extended hostname manually and save into u-boot env

Signed-off-by: Vinu Vaghasia <vinu.vaghasia@amd.com>
---
 system_configuration.cpp | 152 ++++++++++++++++++++++-----------------
 system_configuration.hpp |   3 +
 2 files changed, 90 insertions(+), 65 deletions(-)

diff --git a/system_configuration.cpp b/system_configuration.cpp
index 497429b..46f3609 100644
--- a/system_configuration.cpp
+++ b/system_configuration.cpp
@@ -43,6 +43,8 @@ constexpr auto TITANITE_6   = 78;   //0x4E

 #define COMMAND_BOARD_ID    ("/sbin/fw_printenv -n board_id")
 #define COMMAND_OUTPUT_LEN  (8)
+#define COMMAND_HOSTNAME ("/sbin/fw_printenv -n hostname")
+#define HOSTNAME_BUFF_LEN   (64)

 using namespace phosphor::logging;
 using namespace sdbusplus::xyz::openbmc_project::Common::Error;
@@ -51,37 +53,42 @@ using InvalidArgumentMetadata = xyz::openbmc_project::Common::InvalidArgument;
 using SystemConfigIntf =
     sdbusplus::xyz::openbmc_project::Network::server::SystemConfiguration;

-static bool getPlatformID(char *data)
-//static bool getPlatformID()
+static void readEnvData(unsigned *brd_id, std::string &hname)
 {
+    char data[COMMAND_OUTPUT_LEN];
+    char hostname[HOSTNAME_BUFF_LEN];
+
+    std::stringstream ss;
     FILE *pf;

-    // Setup pipe for reading and execute to get u-boot environment
-    // variable board_id.
     pf = popen(COMMAND_BOARD_ID,"r");
-
-    // Error handling
-    if(pf < 0)
+    if(pf > 0)
     {
-        log<level::ERR>("Unable to get Board ID");
-        return false;
+        if (fgets(data, COMMAND_OUTPUT_LEN , pf) != NULL)
+        {
+            ss << std::hex << (std::string)data;
+            ss >> *brd_id;
+        }
+        pclose(pf);
     }
+    else
+        log<level::ERR>("Failed to open command stream");

-    // Get the data from the process execution
-    if (fgets(data, COMMAND_OUTPUT_LEN , pf) == NULL)
+    pf = popen(COMMAND_HOSTNAME, "r");
+    if (pf > 0)
     {
-        log<level::ERR>("Board ID data is null");
-        return false;
+        if (fgets(hostname, HOSTNAME_BUFF_LEN , pf) != NULL)
+        {
+            hname = (std::string)hostname;
+            /* Remove the '\n' char at the end */
+            hname = hname.substr(0, hname.length()-1);
+        }
+        pclose(pf);
     }
-
-    // the data is now in 'data'
-    if (pclose(pf) != 0)
-    {
-        log<level::ERR>("Failed to close command stream");
-        return false;
+    else {
+        log<level::ERR>("Failed to open command stream");
     }
-
-    return true;
+    return;
 }

 SystemConfiguration::SystemConfiguration(sdbusplus::bus::bus& bus,
@@ -91,7 +98,11 @@ SystemConfiguration::SystemConfiguration(sdbusplus::bus::bus& bus,
     Iface(bus, objPath.c_str(), true),
     bus(bus), manager(parent)
 {
+
     macAddress = mac;
+    // Read board_id and hostname from env
+    readEnvData(&board_id, host_name);
+    // Set hostnmae using 4 MAC digits
     setHostName();

     auto name = getHostNameFromSystem();
@@ -120,10 +131,23 @@ SystemConfiguration::SystemConfiguration(sdbusplus::bus::bus& bus,

 std::string SystemConfiguration::hostName(std::string name)
 {
+    std::stringstream  host_str;
+
     if (SystemConfigIntf::hostName() == name)
     {
         return name;
     }
+
+    // If the hostname set manually then also save it to env
+    host_str << "fw_setenv hostname " << name;
+    if ( system((char *)(host_str.str()).c_str()) > 0) {
+        log<level::INFO>("hostname saved in env", entry("hostname=%s", (host_str.str()).c_str()));
+        host_name = name;
+    }
+    else {
+            log<level::ERR>("Failed to save 'hostname' to u-boot env");
+    }
+
     auto method = bus.new_method_call(HOSTNAMED_SERVICE, HOSTNAMED_SERVICE_PATH,
                                       HOSTNAMED_INTERFACE, METHOD_SET);

@@ -143,53 +167,51 @@ std::string SystemConfiguration::hostName(std::string name)
 std::string SystemConfiguration::setHostName()
 {
     std::string name;
-    std::string boardID;
-    char * data = (char*)malloc(8);
-    unsigned int board_id;
-    std::stringstream ss;
-
-    auto macLast4 = macAddress.substr (LAST4MACPOS, LAST4MACLEN);

-    log<level::INFO>("macLast4", entry("macLast4=%s", macLast4.c_str()));
-
-    // Get rid of ":" character
-    macLast4.erase(2,1);
-
-    if (getPlatformID(data)) {
-        boardID = data;
-        ss << std::hex << boardID;
-        ss >> board_id;
+    /* if the Host name is set manually, then use static hostname */
+    if ( !host_name.empty() ) {
+        name = host_name;
+    }
+    else    /* Use hostname + 4 digit MAC */
+    {
+        auto macLast4 = macAddress.substr (LAST4MACPOS, LAST4MACLEN);
+        log<level::INFO>("macLast4", entry("macLast4=%s", macLast4.c_str()));

-        switch (board_id)
+        // Get rid of ":" character
+        macLast4.erase(2,1);
+        if (board_id >= 0 )
         {
-            case ONYX_SLT:
-            case ONYX_1 ... ONYX_3:
-            case ONYX_FR4:
-                name = "Onyx-" + macLast4;
-                log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
-                break;
-            case QUARTZ_DAP:
-            case QUARTZ_1 ... QUARTZ_3:
-            case QUARTZ_FR4:
-                name = "Quartz-" + macLast4;
-                log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
-                break;
-            case RUBY_1 ... RUBY_3:
-                name = "Ruby-" + macLast4;
-                log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
-                break;
-            case TITANITE_1 ... TITANITE_6:
-                name = "Titanite-" + macLast4;
-                log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
-                break;
-            default:
-                log<level::ERR>("Invalid board_ID : ",  entry("boardID = %s", boardID.c_str()));
-                name = "sp5-" + macLast4;
-                break;
-        }//switch
-    }
-    else {
-       name = "sp5-" + macLast4;
+            switch (board_id)
+            {
+                case ONYX_SLT:
+                case ONYX_1 ... ONYX_3:
+                case ONYX_FR4:
+                    name = "onyx-" + macLast4;
+                    log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
+                    break;
+                case QUARTZ_DAP:
+                case QUARTZ_1 ... QUARTZ_3:
+                case QUARTZ_FR4:
+                    name = "quartz-" + macLast4;
+                    log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
+                    break;
+                case RUBY_1 ... RUBY_3:
+                    name = "ruby-" + macLast4;
+                    log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
+                    break;
+                case TITANITE_1 ... TITANITE_6:
+                    name = "titanite-" + macLast4;
+                    log<level::INFO>("Hostname : ",  entry("name = %s", name.c_str()));
+                    break;
+                default:
+                    log<level::ERR>("Invalid board_ID : ",  entry("boardID = %d", board_id));
+                    name = "sp5-" + macLast4;
+                    break;
+            }//switch
+        }
+        else {
+           name = "sp5-" + macLast4;
+        }
     }

     auto method = bus.new_method_call(HOSTNAMED_SERVICE, HOSTNAMED_SERVICE_PATH,
diff --git a/system_configuration.hpp b/system_configuration.hpp
index 91c83a4..50cc3a1 100644
--- a/system_configuration.hpp
+++ b/system_configuration.hpp
@@ -78,6 +78,9 @@ class SystemConfiguration : public Iface

     /** @brief Active MAC Address. */
     std::string macAddress;
+    std::string host_name;
+    unsigned int board_id = 0;
+
 };

 } // namespace network
--
2.17.1

