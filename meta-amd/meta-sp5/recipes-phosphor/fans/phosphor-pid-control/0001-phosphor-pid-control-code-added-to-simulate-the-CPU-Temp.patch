From 7a0dd7ff212380a79192c87583c7d9c77dfaea49 Mon Sep 17 00:00:00 2001
From: Vinu Vaghasia <vinu.vaghasia@amd.com>
Date: Fri, 29 Oct 2021 17:20:19 -0500
Subject: [PATCH 1/1] phosphor-pid-control: code added to simulate the CPU Temp

Code added to read the Temp from a /etc/thermal/d/temp file,
which help to simulate the CPU temp.

Signed-off-by: Vinu Vaghasia <vinu.vaghasia@amd.com>
---
 pid/zone.cpp | 53 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 53 insertions(+)

diff --git a/pid/zone.cpp b/pid/zone.cpp
index 441031a..d81db5e 100644
--- a/pid/zone.cpp
+++ b/pid/zone.cpp
@@ -33,6 +33,7 @@
 #include <memory>
 #include <sstream>
 #include <string>
+#include <filesystem>

 using tstamp = std::chrono::high_resolution_clock::time_point;
 using namespace std::literals::chrono_literals;
@@ -357,9 +358,36 @@ void DbusPidZone::updateFanTelemetry(void)
     return;
 }

+static double fileParseTemp(void)
+{
+    std::string errText;
+    std::string fileName = "/etc/thermal.d/temp";
+    try
+    {
+        std::ifstream ifs;
+        ifs.open(fileName);
+        if (ifs)
+        {
+            double value;
+            ifs >> value;
+
+            return value;
+        }
+    }
+    catch (const std::exception& e)
+    {
+        errText = "Exception: ";
+        errText += e.what();
+    }
+
+    return 0;
+}
+
 void DbusPidZone::updateSensors(void)
 {
     using namespace std::chrono;
+    double temp_val;
+
     /* margin and temp are stored as temp */
     tstamp now = high_resolution_clock::now();

@@ -369,6 +397,31 @@ void DbusPidZone::updateSensors(void)
         ReadReturn r = sensor->read();
         int64_t timeout = sensor->getTimeout();

+        /* If the sb-tsi sensor device is faulty, then it retruns junk value e.g '9.11844e+18'
+         * swampd  does not recognise it and runs all the fans at higher speed.
+         * So, added code to check the CPU Temp is within range or not.
+         * Range = -50C to 200C Temp.
+         */
+        if (r.value < -50000 || r.value > 200000)
+            r.value = 0;
+        else
+        {
+            /* CPU Temp sensor returns value in 5 digits e.g 29000 = 29.000C,
+             * Swampd  expects temp to be converted into decimal digits.
+             * not sure why it's not converting by default, but it works after conversion
+             * Once we figure out why? then we will remove it */
+            r.value = r.value/1000;
+        }
+
+        /* Following code added for simulating the CPU Temp using /etc/thermal.d/temp file.
+         * If /etc/thermal.d/temp file exists then swampd will read temp value from it
+        */
+        if ( std::filesystem::exists("/etc/thermal.d/temp") )
+        {
+            temp_val = fileParseTemp();
+            r.value = temp_val;
+        }
+
         _cachedValuesByName[t] = r.value;
         tstamp then = r.updated;

--
2.17.1

