From ca211393f76b34f27fb4ba65aef953d42c7b228d Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Mon, 16 May 2022 04:28:02 -0500
Subject: [PATCH 1/2] script changes for mako templates and platforms

Signed-off-by: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>

%% original patch: 0001-script-changes-for-mako-templates-and-platforms.patch

%% original patch: 0002-script-changes-for-mako-templates-and-platforms.patch
---
 scripts/fru_gen.py               | 14 +++++++++-----
 scripts/inventory-sensor.py      | 13 +++++++++----
 scripts/inventorysensor.mako.cpp |  5 +++--
 scripts/readfru.mako.cpp         |  3 +--
 scripts/sensor_gen.py            | 13 +++++++++----
 scripts/writesensor.mako.cpp     |  3 +--
 6 files changed, 32 insertions(+), 19 deletions(-)

diff --git a/scripts/fru_gen.py b/scripts/fru_gen.py
index 4375086..9642a8f 100755
--- a/scripts/fru_gen.py
+++ b/scripts/fru_gen.py
@@ -7,7 +7,7 @@ import argparse
 from mako.template import Template


-def generate_cpp(inventory_yaml, output_dir):
+def generate_cpp(inventory_yaml, output_dir, plat_name):
     with open(inventory_yaml, 'r') as f:
         ifile = yaml.safe_load(f)
         if not isinstance(ifile, dict):
@@ -19,9 +19,9 @@ def generate_cpp(inventory_yaml, output_dir):
                      script_dir,
                      "readfru.mako.cpp"))

-        output_hpp = os.path.join(output_dir, "fru-read-gen.cpp")
+        output_hpp = os.path.join(output_dir, plat_name+"-fru-read-gen.cpp")
         with open(output_hpp, 'w') as fd:
-            fd.write(t.render(fruDict=ifile))
+            fd.write(t.render(fruDict=ifile, platform=plat_name))


 def main():
@@ -41,6 +41,11 @@ def main():
         default=".",
         help="output directory")

+    parser.add_argument(
+        "-p", "--platform", dest="platform",
+        default="amd",
+        help="platform name")
+
     parser.add_argument(
         'command', metavar='COMMAND', type=str,
         choices=valid_commands.keys(),
@@ -52,8 +57,7 @@ def main():
         sys.exit("Can not find input yaml file " + args.inventory_yaml)

     function = valid_commands[args.command]
-    function(args.inventory_yaml, args.outputdir)
-
+    function(args.inventory_yaml, args.outputdir, args.platform)
 if __name__ == '__main__':
     script_dir = os.path.dirname(os.path.realpath(__file__))
     main()
diff --git a/scripts/inventory-sensor.py b/scripts/inventory-sensor.py
index 1a4e5db..e3f46cf 100755
--- a/scripts/inventory-sensor.py
+++ b/scripts/inventory-sensor.py
@@ -7,7 +7,7 @@ import argparse
 from mako.template import Template


-def generate_cpp(sensor_yaml, output_dir):
+def generate_cpp(sensor_yaml, output_dir, plat_name):
     with open(sensor_yaml, 'r') as f:
         ifile = yaml.safe_load(f)
         if not isinstance(ifile, dict):
@@ -19,9 +19,9 @@ def generate_cpp(sensor_yaml, output_dir):
                      script_dir,
                      "inventorysensor.mako.cpp"))

-        output_cpp = os.path.join(output_dir, "inventory-sensor-gen.cpp")
+        output_cpp = os.path.join(output_dir, plat_name+"-inventory-sensor-gen.cpp")
         with open(output_cpp, 'w') as fd:
-            fd.write(t.render(sensorDict=ifile))
+            fd.write(t.render(sensorDict=ifile, platform=plat_name))


 def main():
@@ -41,6 +41,11 @@ def main():
         default=".",
         help="output directory")

+    parser.add_argument(
+        "-p", "--platform", dest="platform",
+        default="amd",
+        help="platform name")
+
     parser.add_argument(
         'command', metavar='COMMAND', type=str,
         choices=valid_commands.keys(),
@@ -52,7 +57,7 @@ def main():
         sys.exit("Can not find input yaml file " + args.sensor_yaml)

     function = valid_commands[args.command]
-    function(args.sensor_yaml, args.outputdir)
+    function(args.sensor_yaml, args.outputdir, args.platform)


 if __name__ == '__main__':
diff --git a/scripts/inventorysensor.mako.cpp b/scripts/inventorysensor.mako.cpp
index 68af3e8..7930cb5 100644
--- a/scripts/inventorysensor.mako.cpp
+++ b/scripts/inventorysensor.mako.cpp
@@ -4,9 +4,10 @@
 // !!! WARNING: This is a GENERATED Code..Please do NOT Edit !!!

 #include <ipmid/types.hpp>
-using namespace ipmi::sensor;
+#include "selutility.hpp"

-extern const InvObjectIDMap invSensors = {
+using namespace ipmi::sensor;
+const InvObjectIDMap ${platform}_invSensors = {
 % for key in sensorDict.keys():
    % if key:
 {"${key}",
diff --git a/scripts/readfru.mako.cpp b/scripts/readfru.mako.cpp
index 57265be..1b66a99 100644
--- a/scripts/readfru.mako.cpp
+++ b/scripts/readfru.mako.cpp
@@ -1,8 +1,7 @@
 // !!! WARNING: This is a GENERATED Code..Please do NOT Edit !!!
 #include <iostream>
 #include "fruread.hpp"
-
-extern const FruMap frus = {
+const FruMap ${platform}_frus = {
 % for key in fruDict.keys():
    {${key},{
 <%
diff --git a/scripts/sensor_gen.py b/scripts/sensor_gen.py
index f03bea8..24ffce3 100755
--- a/scripts/sensor_gen.py
+++ b/scripts/sensor_gen.py
@@ -7,7 +7,7 @@ import argparse
 from mako.template import Template


-def generate_cpp(sensor_yaml, output_dir):
+def generate_cpp(sensor_yaml, output_dir, plat_name):
     with open(sensor_yaml, 'r') as f:
         ifile = yaml.safe_load(f)
         if not isinstance(ifile, dict):
@@ -19,9 +19,9 @@ def generate_cpp(sensor_yaml, output_dir):
                      script_dir,
                      "writesensor.mako.cpp"))

-        output_cpp = os.path.join(output_dir, "sensor-gen.cpp")
+        output_cpp = os.path.join(output_dir, plat_name+"-sensor-gen.cpp")
         with open(output_cpp, 'w') as fd:
-            fd.write(t.render(sensorDict=ifile))
+            fd.write(t.render(sensorDict=ifile, platform=plat_name))


 def main():
@@ -41,6 +41,11 @@ def main():
         default=".",
         help="output directory")

+    parser.add_argument(
+        "-p", "--platform", dest="platform",
+        default="amd",
+        help="platform name")
+
     parser.add_argument(
         'command', metavar='COMMAND', type=str,
         choices=valid_commands.keys(),
@@ -52,7 +57,7 @@ def main():
         sys.exit("Can not find input yaml file " + args.sensor_yaml)

     function = valid_commands[args.command]
-    function(args.sensor_yaml, args.outputdir)
+    function(args.sensor_yaml, args.outputdir, args.platform)


 if __name__ == '__main__':
diff --git a/scripts/writesensor.mako.cpp b/scripts/writesensor.mako.cpp
index 8b26805..4f8a7df 100644
--- a/scripts/writesensor.mako.cpp
+++ b/scripts/writesensor.mako.cpp
@@ -31,8 +31,7 @@ sensorNameMaxLength = 16

 namespace ipmi {
 namespace sensor {
-
-extern const IdInfoMap sensors = {
+const IdInfoMap ${platform}_sensors = {
 % for key in sensorDict.keys():
    % if key:
 {${key},{
--
2.17.1

