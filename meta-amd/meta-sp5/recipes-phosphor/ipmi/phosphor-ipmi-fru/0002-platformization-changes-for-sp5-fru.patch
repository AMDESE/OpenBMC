From 679809c898bbd74e73e69ae65bce4e2ad18b5b6b Mon Sep 17 00:00:00 2001
From: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
Date: Wed, 18 May 2022 04:47:37 -0500
Subject: [PATCH] platformization changes for sp5 fru

Signed-off-by: Rajaganesh Rathinasabapathi <Rajaganesh.Rathinasabapathi@amd.com>
---
 Makefile.am      |  40 ++++++++++++++---
 configure.ac     |  33 +++++++++++---
 frup.hpp         |   5 +++
 types.hpp        |   5 +++
 writefrudata.cpp | 109 ++++++++++++++++++++++++++++++++++++++++++++++-
 5 files changed, 177 insertions(+), 15 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index 2288a3b..19f7f65 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,4 +1,12 @@
-BUILT_SOURCES=fru-gen.cpp extra-properties-gen.cpp
+BUILT_SOURCES= onyx-fru-gen.cpp \
+	onyx-extra-properties-gen.cpp \
+	quartz-fru-gen.cpp \
+	quartz-extra-properties-gen.cpp \
+	ruby-fru-gen.cpp \
+	ruby-extra-properties-gen.cpp \
+	titanite-fru-gen.cpp \
+	titanite-extra-properties-gen.cpp
+
 AM_DEFAULT_SOURCE_EXT = .cpp

 CLEANFILES=$(BUILT_SOURCES)
@@ -16,10 +24,16 @@ phosphor_read_eeprom_LDADD = libwritefrudata.la

 lib_LTLIBRARIES = libwritefrudata.la
 libwritefrudata_la_SOURCES = frup.cpp \
-	fru-gen.cpp \
+	onyx-fru-gen.cpp \
+	quartz-fru-gen.cpp \
+	ruby-fru-gen.cpp \
+	titanite-fru-gen.cpp \
 	fru_area.cpp \
 	writefrudata.cpp \
-	extra-properties-gen.cpp
+	onyx-extra-properties-gen.cpp \
+	quartz-extra-properties-gen.cpp \
+	ruby-extra-properties-gen.cpp \
+	titanite-extra-properties-gen.cpp
 libwritefrudata_la_LDFLAGS = $(SYSTEMD_LIBS) \
 	$(libmapper_LIBS) \
 	$(SDBUSPLUS_LIBS) \
@@ -41,7 +55,19 @@ libstrgfnhandler_la_LIBADD = libwritefrudata.la
 libstrgfnhandler_la_CXXFLAGS = $(PHOSPHOR_LOGGING_CFLAGS) \
 	$(LIBIPMID_CFLAGS)

-fru-gen.cpp:
-	$(AM_V_GEN)@FRUGEN@ -o $(top_builddir) generate-cpp
-extra-properties-gen.cpp:
-	$(AM_V_GEN)@PROPGEN@
+onyx-fru-gen.cpp:
+	$(AM_V_GEN)@ONYX_FRUGEN@ -o $(top_builddir) -p onyx generate-cpp
+onyx-extra-properties-gen.cpp:
+	$(AM_V_GEN)@ONYX_PROPGEN@ -p onyx
+quartz-fru-gen.cpp:
+	$(AM_V_GEN)@QUARTZ_FRUGEN@ -o $(top_builddir) -p quartz generate-cpp
+quartz-extra-properties-gen.cpp:
+	$(AM_V_GEN)@QUARTZ_PROPGEN@ -p quartz
+ruby-fru-gen.cpp:
+	$(AM_V_GEN)@RUBY_FRUGEN@ -o $(top_builddir) -p ruby generate-cpp
+ruby-extra-properties-gen.cpp:
+	$(AM_V_GEN)@RUBY_PROPGEN@ -p ruby
+titanite-fru-gen.cpp:
+	$(AM_V_GEN)@TITANITE_FRUGEN@ -o $(top_builddir) -p titanite generate-cpp
+titanite-extra-properties-gen.cpp:
+	$(AM_V_GEN)@TITANITE_PROPGEN@ -p titanite
diff --git a/configure.ac b/configure.ac
index 47c31bb..884e49b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -64,12 +64,33 @@ AS_IF([test "x$enable_oe_sdk" == "xyes"],
     AC_SUBST([OESDK_TESTCASE_FLAGS], [$testcase_flags])
 )

-AS_IF([test "x$YAML_GEN" == "x"], [YAML_GEN="example.yaml"])
-FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $YAML_GEN"
-AC_SUBST(FRUGEN)
-AS_IF([test "x$PROP_YAML" == "x"], [PROP_YAML="extra-properties-example.yaml"])
-PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $PROP_YAML"
-AC_SUBST(PROPGEN)
+AS_IF([test "x$ONYX_YAML_GEN" == "x"], [ONYX_YAML_GEN="example.yaml"])
+ONYX_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $ONYX_YAML_GEN"
+AC_SUBST(ONYX_FRUGEN)
+AS_IF([test "x$ONYX_PROP_YAML" == "x"], [ONYX_PROP_YAML="extra-properties-example.yaml"])
+ONYX_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $ONYX_PROP_YAML"
+AC_SUBST(ONYX_PROPGEN)
+
+AS_IF([test "x$QUARTZ_YAML_GEN" == "x"], [QUARTZ_YAML_GEN="example.yaml"])
+QUARTZ_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $QUARTZ_YAML_GEN"
+AC_SUBST(QUARTZ_FRUGEN)
+AS_IF([test "x$QUARTZ_PROP_YAML" == "x"], [QUARTZ_PROP_YAML="extra-properties-example.yaml"])
+QUARTZ_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $QUARTZ_PROP_YAML"
+AC_SUBST(QUARTZ_PROPGEN)
+
+AS_IF([test "x$RUBY_YAML_GEN" == "x"], [RUBY_YAML_GEN="example.yaml"])
+RUBY_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $RUBY_YAML_GEN"
+AC_SUBST(RUBY_FRUGEN)
+AS_IF([test "x$RUBY_PROP_YAML" == "x"], [RUBY_PROP_YAML="extra-properties-example.yaml"])
+RUBY_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $RUBY_PROP_YAML"
+AC_SUBST(RUBY_PROPGEN)
+
+AS_IF([test "x$TITANITE_YAML_GEN" == "x"], [TITANITE_YAML_GEN="example.yaml"])
+TITANITE_FRUGEN="$PYTHON $srcdir/scripts/fru_gen.py -i $TITANITE_YAML_GEN"
+AC_SUBST(TITANITE_FRUGEN)
+AS_IF([test "x$TITANITE_PROP_YAML" == "x"], [TITANITE_PROP_YAML="extra-properties-example.yaml"])
+TITANITE_PROPGEN="$PYTHON $srcdir/scripts/extra-properties.py -e $TITANITE_PROP_YAML"
+AC_SUBST(TITANITE_PROPGEN)

 # Create configured output
 AC_CONFIG_FILES([Makefile])
diff --git a/frup.hpp b/frup.hpp
index 6afd621..2d10e38 100644
--- a/frup.hpp
+++ b/frup.hpp
@@ -112,4 +112,9 @@ int parse_fru(const void* msgbuf, sd_bus_message* vpdtbl);
 int parse_fru_area(const uint8_t area, const void* msgbuf, const size_t len,
                    IPMIFruInfo& info);

+extern FruMap frus;
+extern const FruMap onyx_frus;
+extern const FruMap quartz_frus;
+extern const FruMap ruby_frus;
+extern const FruMap titanite_frus;
 #endif
diff --git a/types.hpp b/types.hpp
index 46abfe0..04c92f9 100644
--- a/types.hpp
+++ b/types.hpp
@@ -33,5 +33,10 @@ using InterfaceMap = std::map<Interface, PropertyMap>;
 using Object = sdbusplus::message::object_path;
 using ObjectMap = std::map<Object, InterfaceMap>;

+extern std::map<Path, InterfaceMap> extras;
+extern const std::map<Path, InterfaceMap> onyx_extras;
+extern const std::map<Path, InterfaceMap> quartz_extras;
+extern const std::map<Path, InterfaceMap> ruby_extras;
+extern const std::map<Path, InterfaceMap> titanite_extras;
 } // namespace vpd
 } // namespace ipmi
diff --git a/writefrudata.cpp b/writefrudata.cpp
index eca66d6..1ab63e5 100644
--- a/writefrudata.cpp
+++ b/writefrudata.cpp
@@ -20,11 +20,35 @@
 #include <sstream>
 #include <vector>

+// Platform Type
+constexpr auto ONYX_SLT     = 61;   //0x3D
+constexpr auto ONYX_1       = 64;   //0x40
+constexpr auto ONYX_2       = 65;   //0x41
+constexpr auto ONYX_3       = 66;   //0x42
+constexpr auto ONYX_FR4     = 82;   //0x52
+constexpr auto QUARTZ_DAP   = 62;   //0x3E
+constexpr auto QUARTZ_1     = 67;   //0x43
+constexpr auto QUARTZ_2     = 68;   //0x44
+constexpr auto QUARTZ_3     = 69;   //0x45
+constexpr auto QUARTZ_FR4   = 81;   //0x51
+constexpr auto RUBY_1       = 70;   //0x46
+constexpr auto RUBY_2       = 71;   //0x47
+constexpr auto RUBY_3       = 72;   //0x48
+constexpr auto TITANITE_1   = 73;   //0x49
+constexpr auto TITANITE_2   = 74;   //0x4A
+constexpr auto TITANITE_3   = 75;   //0x4B
+constexpr auto TITANITE_4   = 76;   //0x4C
+constexpr auto TITANITE_5   = 77;   //0x4D
+constexpr auto TITANITE_6   = 78;   //0x4E
+
+#define COMMAND_BOARD_ID    ("/sbin/fw_printenv -n board_id")
+#define COMMAND_LEN         3
+
 using namespace ipmi::vpd;
 using namespace phosphor::logging;

-extern const FruMap frus;
-extern const std::map<Path, InterfaceMap> extras;
+FruMap frus;
+std::map<Path, InterfaceMap> ipmi::vpd::extras;

 using FruAreaVector = std::vector<std::unique_ptr<IPMIFruArea>>;

@@ -158,6 +182,54 @@ auto getService(sdbusplus::bus::bus& bus, const std::string& intf,

     return mapperResponse.begin()->first;
 }
+std::string getPlatformID()
+{
+    FILE *pf;
+    char data[COMMAND_LEN] = {0};
+    std::stringstream ss;
+    unsigned int board_id = 0;
+
+    // Setup pipe for reading and execute to get u-boot environment
+    // variable board_id.
+    pf = popen(COMMAND_BOARD_ID,"r");
+
+    if(pf > 0)
+    {   // no error
+        if (fgets(data, COMMAND_LEN , pf) != NULL)
+        {
+            ss << std::hex << (std::string)data;
+            ss >> board_id;
+        }
+        pclose(pf);
+        if ( board_id > 0 || board_id < 0xFF )
+        {
+            switch (board_id)
+            {
+                case ONYX_SLT:
+                case ONYX_1 ... ONYX_3:
+                case ONYX_FR4:
+                    return "onyx";
+                case RUBY_1 ... RUBY_3:
+                    return "ruby";
+                case QUARTZ_DAP:
+                case QUARTZ_1 ... QUARTZ_3:
+                case QUARTZ_FR4:
+                    return "quartz";
+                case TITANITE_1 ... TITANITE_6:
+                    return "titanite";
+                default:
+                    return "quartz";
+            }//switch
+        }
+    }
+    else
+    {
+        log<level::DEBUG>("Unable to determine platform",
+                          entry("Defaulting to 2P"));
+    }
+
+    return "quartz";
+}

 /**
  * Takes FRU data, invokes Parser for each FRU record area and updates
@@ -174,6 +246,39 @@ int updateInventory(FruAreaVector& areaVector, sdbusplus::bus::bus& bus)
     uint8_t fruid = 0;
     IPMIFruInfo fruData;

+    // Load platform data structure
+    std::string platform = getPlatformID();
+    if (platform.compare("quartz") == 0)
+    {
+        log<level::INFO>("Loading Quartz configuration");
+        frus = quartz_frus;
+        extras = quartz_extras;
+    }
+    else if (platform.compare("onyx") == 0)
+    {
+        log<level::INFO>("Loading Onyx configuration");
+        frus = onyx_frus;
+        extras = onyx_extras;
+    }
+    else if (platform.compare("ruby") == 0)
+    {
+        log<level::INFO>("Loading Ruby configuration");
+        frus = ruby_frus;
+        extras = ruby_extras;
+    }
+    else if (platform.compare("titanite") == 0)
+    {
+        log<level::INFO>("Loading Titanite configuration");
+        frus = titanite_frus;
+        extras = titanite_extras;
+    }
+    else
+    {
+        log<level::ERR>("Unknown platform?!",
+                          entry("Registration failed"));
+    }
+
+
     // For each FRU area, extract the needed data , get it parsed and update
     // the Inventory.
     for (const auto& fruArea : areaVector)
