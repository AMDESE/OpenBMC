From f4785bbb3eaa7328f1c79df11789f15cfe70df95 Mon Sep 17 00:00:00 2001
From: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
Date: Wed, 9 Jun 2021 17:20:45 -0500
Subject: [PATCH 2/4] spi-nor: Porting MT25Q01G flash part
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit

Due to bad raising timing, hold/reset pin feature should
be disabled if quad mode is enabled. Otherwise, flash will
be hold when command is send to flash.

Signed-off-by: Chin-Ting Kuo <chin-ting_kuo@aspeedtech.com>
Signed-off-by: Supreeth Venkatesh <supreeth.venkatesh@amd.com>
---
 drivers/mtd/spi/spi-nor-core.c | 76 ++++++++++++++++++++++++++++++++++
 include/linux/mtd/spi-nor.h    |  3 ++
 2 files changed, 79 insertions(+)

diff --git a/drivers/mtd/spi/spi-nor-core.c b/drivers/mtd/spi/spi-nor-core.c
index a8f5b61582..e1fe91712e 100644
--- a/drivers/mtd/spi/spi-nor-core.c
+++ b/drivers/mtd/spi/spi-nor-core.c
@@ -595,6 +595,78 @@ erase_err:
 	return ret;
 }

+static int micron_read_nvcr(struct spi_nor *nor)
+{
+	int ret;
+	int val;
+
+	ret = nor->read_reg(nor, SPINOR_OP_MICRON_RDNVCR, (u8 *)&val, 2);
+	if (ret < 0) {
+		dev_err(nor->dev, "[Micron] error %d reading NVCR\n", ret);
+		return ret;
+	}
+
+	return val;
+}
+
+static int micron_write_nvcr(struct spi_nor *nor, int val)
+{
+	int ret;
+
+	write_enable(nor);
+
+	nor->cmd_buf[0] = val & 0xff;
+	nor->cmd_buf[1] = (val >> 8) & 0xff;
+
+	ret = nor->write_reg(nor, SPINOR_OP_MICRON_WRNVCR, nor->cmd_buf, 2);
+	if (ret < 0) {
+		dev_err(nor->dev,
+			"[Micron] error while writing configuration register\n");
+		return -EINVAL;
+	}
+
+	ret = spi_nor_wait_till_ready(nor);
+	if (ret) {
+		dev_err(nor->dev,
+			"[Micron] timeout while writing configuration register\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int micron_read_cr_quad_enable(struct spi_nor *nor)
+{
+	int ret;
+
+	/* Check current Quad Enable bit value. */
+	ret = micron_read_nvcr(nor);
+	if (ret < 0) {
+		dev_err(dev, "[Micron] error while reading nonvolatile configuration register\n");
+		return -EINVAL;
+	}
+
+	if ((ret & MICRON_RST_HOLD_CTRL) == 0)
+		return 0;
+
+	ret &= ~MICRON_RST_HOLD_CTRL;
+
+	/* Keep the current value of the Status Register. */
+	ret = micron_write_nvcr(nor, ret);
+	if (ret < 0) {
+		dev_err(dev, "[Micron] error while writing nonvolatile configuration register\n");
+		return -EINVAL;
+	}
+
+	ret = micron_read_nvcr(nor);
+	if (ret > 0 && (ret & MICRON_RST_HOLD_CTRL)) {
+		dev_err(nor->dev, "[Micron] Quad bit not set\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 #ifdef CONFIG_SPI_FLASH_SPANSION
 /*
  * Erase for Spansion/Cypress Flash devices that has overlaid 4KB sectors at
@@ -2165,6 +2237,10 @@ static int spi_nor_init_params(struct spi_nor *nor,
 			}
 #endif
 		}
+
+		/* need to disable hold/reset pin feature */
+		if (JEDEC_MFR(info) == SNOR_MFR_ST)
+			params->quad_enable = micron_read_cr_quad_enable;
 	}

 	return 0;
diff --git a/include/linux/mtd/spi-nor.h b/include/linux/mtd/spi-nor.h
index 8abaac65b0..0aab424ad6 100644
--- a/include/linux/mtd/spi-nor.h
+++ b/include/linux/mtd/spi-nor.h
@@ -115,6 +115,8 @@
 /* Used for Micron flashes only. */
 #define SPINOR_OP_RD_EVCR      0x65    /* Read EVCR register */
 #define SPINOR_OP_WD_EVCR      0x61    /* Write EVCR register */
+#define SPINOR_OP_MICRON_RDNVCR 0xB5   /* Read nonvolatile configuration register */
+#define SPINOR_OP_MICRON_WRNVCR 0xB1   /* Write nonvolatile configuration register */

 /* Status Register bits. */
 #define SR_WIP			BIT(0)	/* Write in progress */
@@ -133,6 +135,7 @@

 /* Enhanced Volatile Configuration Register bits */
 #define EVCR_QUAD_EN_MICRON	BIT(7)	/* Micron Quad I/O */
+#define MICRON_RST_HOLD_CTRL BIT(4)

 /* Flag Status Register bits */
 #define FSR_READY		BIT(7)	/* Device status, 0 = Busy, 1 = Ready */
--
2.17.1

